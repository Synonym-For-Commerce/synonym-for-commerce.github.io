{"ast":null,"code":"import React, { Component } from \"react\";\nimport gsap from \"gsap\";\nimport * as svgGeneric from \"../js/svgGeneric\";\nimport * as gsapExtension from \"../js/gsapExtension\";\nconst pi = Math.PI;\nlet defaultRadius = 50; //creates a circle from an array of svg paths, returns <g class=\"ring\">\n\nclass SvgRing extends React.Component {\n  render() {\n    // super();\n    console.log(this.props + \"in MandalaReact\");\n    this.state = {\n      pathArrLength: this.props.pathArr.length,\n      ring: svgGeneric.group({\n        class: this.props.ringClass + \" ring\"\n      })\n    };\n    if (this.state.pathArrLength < 1) this.state.ring.appendChild(svgGeneric.circle({\n      r: this.props.radius ? this.props.radius : defaultRadius,\n      class: \"mandalaCircle\"\n    }));else {\n      let avgWidth = 0;\n      let avgHeight = 0;\n      let pathDataArr = [];\n      this.props.pathArr.forEach(e => {\n        let bBox = e.getBBox(); //any elements passed in that are not in dom will be added to defs, as will any elements in the dom that have height == 0 and width == 0\n\n        if (!bBox.width && !bBox.height) {\n          svgGeneric.addToDefs(e);\n          bBox = e.getBBox();\n        }\n\n        avgWidth += bBox.width;\n        avgHeight += bBox.height;\n        pathDataArr.push([e.getAttribute(\"id\"), e.getAttribute(\"class\")]);\n      });\n      avgWidth /= this.state.pathArrLength;\n      avgHeight /= this.state.pathArrLength;\n      this.state = {\n        radius: this.props.radius ? this.props.radius : avgHeight,\n        circumference: this.state.radius * 2 * pi,\n        cuts: !this.props.cuts || this.props.cuts < 1 ? Math.floor(this.state.circumference / avgWidth / this.state.pathArrLength) : this.props.cuts,\n        totalCuts: this.state.cuts * this.state.pathArrLength\n      };\n\n      for (let i = 1; i <= this.state.totalCuts; i++) {\n        let pathData = pathDataArr[i % this.state.pathArrLength];\n        let partialPath = svgGeneric.use({\n          href: `#${pathData[0]}`,\n          class: pathData[1]\n        }); //center\n\n        gsapExtension.centerElement(partialPath); //move to circumference\n\n        let angleRad = 2 * pi * i / this.state.totalCuts;\n        let scale = this.props.scale ? this.props.scale : 1;\n        gsapExtension.moveToCircumferenceAtAngle(partialPath, angleRad, this.state.radius, scale);\n        if (this.props.offset && this.props.offest != 0) gsap.set(this.state.ring, {\n          transformOrigin: \"center\",\n          rotation: this.props.offset\n        });\n        this.state.ring.appendChild(partialPath);\n      }\n    } // }\n    // render() {\n\n    return this.state.ring;\n  }\n\n}\n\nexport default SvgRing;","map":{"version":3,"sources":["C:/Users/Soda/Documents/HTML5/mandala-maker/src/Components/MandalaReact.js"],"names":["React","Component","gsap","svgGeneric","gsapExtension","pi","Math","PI","defaultRadius","SvgRing","render","console","log","props","state","pathArrLength","pathArr","length","ring","group","class","ringClass","appendChild","circle","r","radius","avgWidth","avgHeight","pathDataArr","forEach","e","bBox","getBBox","width","height","addToDefs","push","getAttribute","circumference","cuts","floor","totalCuts","i","pathData","partialPath","use","href","centerElement","angleRad","scale","moveToCircumferenceAtAngle","offset","offest","set","transformOrigin","rotation"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport * as svgGeneric from \"../js/svgGeneric\";\r\nimport * as gsapExtension from \"../js/gsapExtension\";\r\nconst pi = Math.PI;\r\nlet defaultRadius = 50;\r\n\r\n//creates a circle from an array of svg paths, returns <g class=\"ring\">\r\nclass SvgRing extends React.Component {\r\n  render() {\r\n    // super();\r\n    console.log(this.props + \"in MandalaReact\");\r\n    this.state = {\r\n      pathArrLength: this.props.pathArr.length,\r\n      ring: svgGeneric.group({ class: this.props.ringClass + \" ring\" }),\r\n    };\r\n    if (this.state.pathArrLength < 1)\r\n      this.state.ring.appendChild(\r\n        svgGeneric.circle({\r\n          r: this.props.radius ? this.props.radius : defaultRadius,\r\n          class: \"mandalaCircle\",\r\n        })\r\n      );\r\n    else {\r\n      let avgWidth = 0;\r\n      let avgHeight = 0;\r\n      let pathDataArr = [];\r\n\r\n      this.props.pathArr.forEach((e) => {\r\n        let bBox = e.getBBox();\r\n        //any elements passed in that are not in dom will be added to defs, as will any elements in the dom that have height == 0 and width == 0\r\n        if (!bBox.width && !bBox.height) {\r\n          svgGeneric.addToDefs(e);\r\n          bBox = e.getBBox();\r\n        }\r\n        avgWidth += bBox.width;\r\n        avgHeight += bBox.height;\r\n        pathDataArr.push([e.getAttribute(\"id\"), e.getAttribute(\"class\")]);\r\n      });\r\n\r\n      avgWidth /= this.state.pathArrLength;\r\n      avgHeight /= this.state.pathArrLength;\r\n\r\n      this.state = {\r\n        radius: this.props.radius ? this.props.radius : avgHeight,\r\n        circumference: this.state.radius * 2 * pi,\r\n        cuts:\r\n          !this.props.cuts || this.props.cuts < 1\r\n            ? Math.floor(\r\n                this.state.circumference / avgWidth / this.state.pathArrLength\r\n              )\r\n            : this.props.cuts,\r\n        totalCuts: this.state.cuts * this.state.pathArrLength,\r\n      };\r\n\r\n      for (let i = 1; i <= this.state.totalCuts; i++) {\r\n        let pathData = pathDataArr[i % this.state.pathArrLength];\r\n        let partialPath = svgGeneric.use({\r\n          href: `#${pathData[0]}`,\r\n          class: pathData[1],\r\n        });\r\n        //center\r\n        gsapExtension.centerElement(partialPath);\r\n        //move to circumference\r\n        let angleRad = (2 * pi * i) / this.state.totalCuts;\r\n        let scale = this.props.scale ? this.props.scale : 1;\r\n        gsapExtension.moveToCircumferenceAtAngle(\r\n          partialPath,\r\n          angleRad,\r\n          this.state.radius,\r\n          scale\r\n        );\r\n        if (this.props.offset && this.props.offest != 0)\r\n          gsap.set(this.state.ring, {\r\n            transformOrigin: \"center\",\r\n            rotation: this.props.offset,\r\n          });\r\n        this.state.ring.appendChild(partialPath);\r\n      }\r\n    }\r\n  // }\r\n\r\n  // render() {\r\n    return this.state.ring;\r\n  }\r\n}\r\nexport default SvgRing;\r\n"]},"metadata":{},"sourceType":"module"}
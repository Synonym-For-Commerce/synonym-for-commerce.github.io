{"ast":null,"code":"import { React, Component } from \"React\";\nimport * as svgGeneric from \"../js/svgGeneric\";\nimport gsap from \"gsap\";\nconst pi = Math.PI;\nlet defaultRadius = 50; //creates a circle from an array of svg paths, returns <g class=\"ring\">\n\nclass SvgRing extends React.Component() {\n  constructor() {\n    super();\n    this.state = {\n      pathArrLength: this.props.pathArr.length,\n      ring: svgGeneric.group({\n        class: this.props.ringClass + \" ring\"\n      })\n    };\n    if (this.state.pathArrLength < 1) this.state.ring.appendChild(svgGeneric.circle({\n      r: this.props.radius ? this.props.radius : defaultRadius,\n      class: mandalaCircle\n    }));else {\n      let avgWidth = 0;\n      let avgHeight = 0;\n      let pathDataArr = [];\n      this.props.pathArr.forEach(e => {\n        let bBox = e.getBBox(); //any elements passed in that are not in dom will be added to defs, as will any elements in the dom that have height == 0 and width == 0\n\n        if (!bBox.width && !bBox.height) {\n          svgGeneric.addToDefs(e);\n          bBox = e.getBBox();\n        }\n\n        avgWidth += bBox.width;\n        avgHeight += bBox.height;\n        pathDataArr.push([e.getAttribute(\"id\"), e.getAttribute(\"class\")]);\n      });\n      avgWidth /= len;\n      avgHeight /= len;\n      this.state = {\n        radius: this.props.radius ? this.props.radius : avgHeight,\n        circumference: radius * 2 * pi,\n        cuts: !this.props.cuts || this.props.cuts < 1 ? Math.floor(circumference / avgWidth / this.state.pathArrLength) : this.props.cuts,\n        totalCuts: cuts * this.state.pathArrLength\n      };\n\n      for (let i = 1; i <= totalCuts; i++) {\n        let pathData = pathDataArr[i % len];\n        let partialPath = svgGeneric.use({\n          href: `#${pathData[0]}`,\n          class: pathData[1]\n        }); //center\n\n        gsapCenterElement(partialPath); //move to circumference\n\n        let angleRad = 2 * pi * i / this.state.totalCuts;\n        let scale = params && params[\"scale\"] ? params.scale : 1;\n        gsapMoveToCircumferenceAtAngle(partialPath, angleRad, this.state.radius, scale);\n        if (this.props.offset && this.props.offest != 0) gsap.set(ring, {\n          transformOrigin: \"center\",\n          rotation: params.ringOffset\n        });\n        ring.appendChild(partialPath);\n      }\n    }\n  }\n\n  render() {\n    this.state.ring;\n  }\n\n}\n\nexport default MakeRing;","map":{"version":3,"sources":["C:/Users/Soda/Documents/HTML5/mandala-maker/src/Components/MandalaReact.js"],"names":["React","Component","svgGeneric","gsap","pi","Math","PI","defaultRadius","SvgRing","constructor","state","pathArrLength","props","pathArr","length","ring","group","class","ringClass","appendChild","circle","r","radius","mandalaCircle","avgWidth","avgHeight","pathDataArr","forEach","e","bBox","getBBox","width","height","addToDefs","push","getAttribute","len","circumference","cuts","floor","totalCuts","i","pathData","partialPath","use","href","gsapCenterElement","angleRad","scale","params","gsapMoveToCircumferenceAtAngle","offset","offest","set","transformOrigin","rotation","ringOffset","render","MakeRing"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,EAAE,GAAGC,IAAI,CAACC,EAAhB;AACA,IAAIC,aAAa,GAAG,EAApB,C,CAEA;;AACA,MAAMC,OAAN,SAAsBR,KAAK,CAACC,SAAN,EAAtB,CAAwC;AACtCQ,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,MADvB;AAEXC,MAAAA,IAAI,EAAEb,UAAU,CAACc,KAAX,CAAiB;AAAEC,QAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWM,SAAX,GAAuB;AAAhC,OAAjB;AAFK,KAAb;AAIA,QAAI,KAAKR,KAAL,CAAWC,aAAX,GAA2B,CAA/B,EACE,KAAKD,KAAL,CAAWK,IAAX,CAAgBI,WAAhB,CACEjB,UAAU,CAACkB,MAAX,CAAkB;AAChBC,MAAAA,CAAC,EAAE,KAAKT,KAAL,CAAWU,MAAX,GAAoB,KAAKV,KAAL,CAAWU,MAA/B,GAAwCf,aAD3B;AAEhBU,MAAAA,KAAK,EAAEM;AAFS,KAAlB,CADF,EADF,KAOK;AACH,UAAIC,QAAQ,GAAG,CAAf;AACA,UAAIC,SAAS,GAAG,CAAhB;AACA,UAAIC,WAAW,GAAG,EAAlB;AAEA,WAAKd,KAAL,CAAWC,OAAX,CAAmBc,OAAnB,CAA4BC,CAAD,IAAO;AAChC,YAAIC,IAAI,GAAGD,CAAC,CAACE,OAAF,EAAX,CADgC,CAEhC;;AACA,YAAI,CAACD,IAAI,CAACE,KAAN,IAAe,CAACF,IAAI,CAACG,MAAzB,EAAiC;AAC/B9B,UAAAA,UAAU,CAAC+B,SAAX,CAAqBL,CAArB;AACAC,UAAAA,IAAI,GAAGD,CAAC,CAACE,OAAF,EAAP;AACD;;AACDN,QAAAA,QAAQ,IAAIK,IAAI,CAACE,KAAjB;AACAN,QAAAA,SAAS,IAAII,IAAI,CAACG,MAAlB;AACAN,QAAAA,WAAW,CAACQ,IAAZ,CAAiB,CAACN,CAAC,CAACO,YAAF,CAAe,IAAf,CAAD,EAAuBP,CAAC,CAACO,YAAF,CAAe,OAAf,CAAvB,CAAjB;AACD,OAVD;AAYAX,MAAAA,QAAQ,IAAIY,GAAZ;AACAX,MAAAA,SAAS,IAAIW,GAAb;AAEA,WAAK1B,KAAL,GAAa;AACXY,QAAAA,MAAM,EAAE,KAAKV,KAAL,CAAWU,MAAX,GAAoB,KAAKV,KAAL,CAAWU,MAA/B,GAAwCG,SADrC;AAEXY,QAAAA,aAAa,EAAEf,MAAM,GAAG,CAAT,GAAalB,EAFjB;AAGXkC,QAAAA,IAAI,EACF,CAAC,KAAK1B,KAAL,CAAW0B,IAAZ,IAAoB,KAAK1B,KAAL,CAAW0B,IAAX,GAAkB,CAAtC,GACIjC,IAAI,CAACkC,KAAL,CAAWF,aAAa,GAAGb,QAAhB,GAA2B,KAAKd,KAAL,CAAWC,aAAjD,CADJ,GAEI,KAAKC,KAAL,CAAW0B,IANN;AAOXE,QAAAA,SAAS,EAAEF,IAAI,GAAG,KAAK5B,KAAL,CAAWC;AAPlB,OAAb;;AAUA,WAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,SAArB,EAAgCC,CAAC,EAAjC,EAAqC;AACnC,YAAIC,QAAQ,GAAGhB,WAAW,CAACe,CAAC,GAAGL,GAAL,CAA1B;AACA,YAAIO,WAAW,GAAGzC,UAAU,CAAC0C,GAAX,CAAe;AAC/BC,UAAAA,IAAI,EAAG,IAAGH,QAAQ,CAAC,CAAD,CAAI,EADS;AAE/BzB,UAAAA,KAAK,EAAEyB,QAAQ,CAAC,CAAD;AAFgB,SAAf,CAAlB,CAFmC,CAMnC;;AACAI,QAAAA,iBAAiB,CAACH,WAAD,CAAjB,CAPmC,CAQnC;;AACA,YAAII,QAAQ,GAAI,IAAI3C,EAAJ,GAASqC,CAAV,GAAe,KAAK/B,KAAL,CAAW8B,SAAzC;AACA,YAAIQ,KAAK,GAAGC,MAAM,IAAIA,MAAM,CAAC,OAAD,CAAhB,GAA4BA,MAAM,CAACD,KAAnC,GAA2C,CAAvD;AACAE,QAAAA,8BAA8B,CAC5BP,WAD4B,EAE5BI,QAF4B,EAG5B,KAAKrC,KAAL,CAAWY,MAHiB,EAI5B0B,KAJ4B,CAA9B;AAMA,YAAI,KAAKpC,KAAL,CAAWuC,MAAX,IAAqB,KAAKvC,KAAL,CAAWwC,MAAX,IAAqB,CAA9C,EACEjD,IAAI,CAACkD,GAAL,CAAStC,IAAT,EAAe;AACbuC,UAAAA,eAAe,EAAE,QADJ;AAEbC,UAAAA,QAAQ,EAAEN,MAAM,CAACO;AAFJ,SAAf;AAIFzC,QAAAA,IAAI,CAACI,WAAL,CAAiBwB,WAAjB;AACD;AACF;AACF;;AAEDc,EAAAA,MAAM,GAAG;AACP,SAAK/C,KAAL,CAAWK,IAAX;AACD;;AAzEqC;;AA2ExC,eAAe2C,QAAf","sourcesContent":["import { React, Component } from \"React\";\r\nimport * as svgGeneric from \"../js/svgGeneric\";\r\nimport gsap from \"gsap\";\r\nconst pi = Math.PI;\r\nlet defaultRadius = 50;\r\n\r\n//creates a circle from an array of svg paths, returns <g class=\"ring\">\r\nclass SvgRing extends React.Component() {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pathArrLength: this.props.pathArr.length,\r\n      ring: svgGeneric.group({ class: this.props.ringClass + \" ring\" }),\r\n    };\r\n    if (this.state.pathArrLength < 1)\r\n      this.state.ring.appendChild(\r\n        svgGeneric.circle({\r\n          r: this.props.radius ? this.props.radius : defaultRadius,\r\n          class: mandalaCircle,\r\n        })\r\n      );\r\n    else {\r\n      let avgWidth = 0;\r\n      let avgHeight = 0;\r\n      let pathDataArr = [];\r\n\r\n      this.props.pathArr.forEach((e) => {\r\n        let bBox = e.getBBox();\r\n        //any elements passed in that are not in dom will be added to defs, as will any elements in the dom that have height == 0 and width == 0\r\n        if (!bBox.width && !bBox.height) {\r\n          svgGeneric.addToDefs(e);\r\n          bBox = e.getBBox();\r\n        }\r\n        avgWidth += bBox.width;\r\n        avgHeight += bBox.height;\r\n        pathDataArr.push([e.getAttribute(\"id\"), e.getAttribute(\"class\")]);\r\n      });\r\n\r\n      avgWidth /= len;\r\n      avgHeight /= len;\r\n\r\n      this.state = {\r\n        radius: this.props.radius ? this.props.radius : avgHeight,\r\n        circumference: radius * 2 * pi,\r\n        cuts:\r\n          !this.props.cuts || this.props.cuts < 1\r\n            ? Math.floor(circumference / avgWidth / this.state.pathArrLength)\r\n            : this.props.cuts,\r\n        totalCuts: cuts * this.state.pathArrLength,\r\n      };\r\n\r\n      for (let i = 1; i <= totalCuts; i++) {\r\n        let pathData = pathDataArr[i % len];\r\n        let partialPath = svgGeneric.use({\r\n          href: `#${pathData[0]}`,\r\n          class: pathData[1],\r\n        });\r\n        //center\r\n        gsapCenterElement(partialPath);\r\n        //move to circumference\r\n        let angleRad = (2 * pi * i) / this.state.totalCuts;\r\n        let scale = params && params[\"scale\"] ? params.scale : 1;\r\n        gsapMoveToCircumferenceAtAngle(\r\n          partialPath,\r\n          angleRad,\r\n          this.state.radius,\r\n          scale\r\n        );\r\n        if (this.props.offset && this.props.offest != 0)\r\n          gsap.set(ring, {\r\n            transformOrigin: \"center\",\r\n            rotation: params.ringOffset,\r\n          });\r\n        ring.appendChild(partialPath);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.state.ring;\r\n  }\r\n}\r\nexport default MakeRing;\r\n"]},"metadata":{},"sourceType":"module"}
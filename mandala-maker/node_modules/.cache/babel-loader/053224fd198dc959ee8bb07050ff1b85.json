{"ast":null,"code":"// import React, { Component } from \"react\";\nimport gsap from\"gsap\";import*as svgGeneric from\"./svgGeneric\";var pi=Math.PI;var defaultRadius=10;// class mandala extends Component {\n//this file is dependent on GSAP core library and my svgGeneric library\n//the purpose of this file is to facilitate the creation of mandala type patterns from svg paths,\n//TODO: flatten the paths on each ring so there isnt one on top of the others.. but i dont wanna even think about the frigggin math involved in that nonsense, also involves switching betweeen <use> and <path>, not ideal\n//centering doesnt work in other browsers do a stupid fucking platform bullshit goddamit test thing\n//theres like, zero, exception handling in this bitch. passing anything other than the expected arrays or params into any of the functions will cause it to crap its pants\n//creates a circle from an array of svg paths, returns <g class=\"ring\">\nexport function makeRing(pathArr,params){var ring=params&&params[\"ringClass\"]?svgGeneric.group({class:params.ringClass+\" ring\"}):svgGeneric.group({class:\"ring\"});var len=pathArr.length;if(len<1){//FIXME: should probably have default value for undefined radius\nreturn ring.appendChild(svgGeneric.circle({r:params&&params[\"radius\"]?params.radius:defaultRadius,class:\"mandalaCircle\"}));}var avgWidth=0;var avgHeight=0;var pathDataArr=[];pathArr.forEach(function(e){//TODO: exception handeling for non svgelement input\nvar bBox=e.getBBox();//any elements passed in that are not in dom will be added to defs, as will any elements in the dom that have height == 0 and width == 0\nif(!bBox.width&&!bBox.height){svgGeneric.addToDefs(e);bBox=e.getBBox();}avgWidth+=bBox.width;avgHeight+=bBox.height;pathDataArr.push([e.getAttribute(\"id\"),e.getAttribute(\"class\")]);});avgWidth/=len;avgHeight/=len;var radius=params&&params[\"radius\"]?params.radius:avgHeight;var circumference=radius*2*pi;var cuts=!params||!params[\"cuts\"]||params.cuts<1?Math.floor(circumference/avgWidth/len):params.cuts;var totalCuts=cuts*len;for(var i=1;i<=totalCuts;i++){var pathData=pathDataArr[i%len];var partialPath=svgGeneric.use({href:\"#\".concat(pathData[0]),class:pathData[1]});//center\ngsapCenterElement(partialPath);//move to circumference\nvar angleRad=2*pi*i/totalCuts;var scale=params&&params[\"scale\"]?params.scale:1;gsapMoveToCircumferenceAtAngle(partialPath,angleRad,radius,scale);ring.appendChild(partialPath);}if(params&&params[\"offset\"])gsap.set(ring,{transformOrigin:\"center\",rotation:params.offset});return ring;}//centers an svg element\n//doesnt seem to work in firefox\n//uses bbox which requires the path\nfunction gsapCenterElement(elem){//requires the element to exist within the dom so bBox is not 0,\nsvgGeneric.addToDefs(elem);var bBox=elem.getBBox();gsap.set(elem,{x:\"-=\".concat(bBox.width/2+bBox.x,\"px\"),y:\"-=\".concat(bBox.height/2+bBox.y,\"px\")});}//moves an element to a some point in an imaginary circle surrounding the element\nfunction gsapMoveToCircumferenceAtAngle(elem,angleRad,radius,scale){gsap.set(elem,{transformOrigin:\"center\",x:\"+=\".concat(radius*Math.sin(angleRad),\"px\"),y:\"-=\".concat(radius*Math.cos(angleRad),\"px\"),rotation:\"\".concat(angleRad,\"rad\"),scale:scale});}//creates a series of rings using makeRing function\n//first param is an arra of arrays the inner arrays are to be comprised of svg paths\n//second param is an array or parameters relating to each ring; radius, cuts, ringClass\n//third param is params relating to the overall system of concentric rings; concentricSystem\nexport default function makeConcentricRings(pathArrArr,paramArr,params){var concentricSystem=params&&params[\"concentricSystem\"]?params.concentricSystem:svgGeneric.group({id:params.id});pathArrArr.forEach(function(elemArr,index){var ring=makeRing(elemArr,paramArr[index%paramArr.length]);concentricSystem.appendChild(ring);});return concentricSystem;}","map":{"version":3,"sources":["C:/Users/Soda/Documents/HTML5/mandala-maker/src/js/mandala.js"],"names":["gsap","svgGeneric","pi","Math","PI","defaultRadius","makeRing","pathArr","params","ring","group","class","ringClass","len","length","appendChild","circle","r","radius","avgWidth","avgHeight","pathDataArr","forEach","e","bBox","getBBox","width","height","addToDefs","push","getAttribute","circumference","cuts","floor","totalCuts","i","pathData","partialPath","use","href","gsapCenterElement","angleRad","scale","gsapMoveToCircumferenceAtAngle","set","transformOrigin","rotation","offset","elem","x","y","sin","cos","makeConcentricRings","pathArrArr","paramArr","concentricSystem","id","elemArr","index"],"mappings":"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","sourcesContent":["// import React, { Component } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport * as svgGeneric from \"./svgGeneric\";\r\nconst pi = Math.PI;\r\nlet defaultRadius = 10;\r\n\r\n// class mandala extends Component {\r\n//this file is dependent on GSAP core library and my svgGeneric library\r\n//the purpose of this file is to facilitate the creation of mandala type patterns from svg paths,\r\n//TODO: flatten the paths on each ring so there isnt one on top of the others.. but i dont wanna even think about the frigggin math involved in that nonsense, also involves switching betweeen <use> and <path>, not ideal\r\n//centering doesnt work in other browsers do a stupid fucking platform bullshit goddamit test thing\r\n//theres like, zero, exception handling in this bitch. passing anything other than the expected arrays or params into any of the functions will cause it to crap its pants\r\n\r\n//creates a circle from an array of svg paths, returns <g class=\"ring\">\r\nexport function makeRing(pathArr, params) {\r\n  const ring =\r\n    params && params[\"ringClass\"]\r\n      ? svgGeneric.group({ class: params.ringClass + \" ring\" })\r\n      : svgGeneric.group({ class: \"ring\" });\r\n  const len = pathArr.length;\r\n  if (len < 1) {\r\n    //FIXME: should probably have default value for undefined radius\r\n    return ring.appendChild(\r\n      svgGeneric.circle({ r: params && params[\"radius\"] ? params.radius : defaultRadius, class: \"mandalaCircle\" })\r\n    );\r\n  }\r\n  let avgWidth = 0;\r\n  let avgHeight = 0;\r\n  let pathDataArr = [];\r\n  pathArr.forEach((e) => {\r\n    //TODO: exception handeling for non svgelement input\r\n    let bBox = e.getBBox();\r\n    //any elements passed in that are not in dom will be added to defs, as will any elements in the dom that have height == 0 and width == 0\r\n    if (!bBox.width && !bBox.height) {\r\n      svgGeneric.addToDefs(e);\r\n      bBox = e.getBBox();\r\n    }\r\n    avgWidth += bBox.width;\r\n    avgHeight += bBox.height;\r\n    pathDataArr.push([e.getAttribute(\"id\"), e.getAttribute(\"class\")]);\r\n  });\r\n  avgWidth /= len;\r\n  avgHeight /= len;\r\n  let radius = params && params[\"radius\"] ? params.radius : avgHeight;\r\n  let circumference = radius * 2 * pi;\r\n  let cuts =\r\n    !params || !params[\"cuts\"] || params.cuts < 1\r\n      ? Math.floor(circumference / avgWidth / len)\r\n      : params.cuts;\r\n  let totalCuts = cuts * len;\r\n\r\n  for (let i = 1; i <= totalCuts; i++) {\r\n    let pathData = pathDataArr[i % len];\r\n    let partialPath = svgGeneric.use({\r\n      href: `#${pathData[0]}`,\r\n      class: pathData[1],\r\n    });\r\n\r\n    //center\r\n    gsapCenterElement(partialPath);\r\n    //move to circumference\r\n    var angleRad = (2 * pi * i) / totalCuts;\r\n    let scale = params && params[\"scale\"] ? params.scale : 1;\r\n    gsapMoveToCircumferenceAtAngle(partialPath, angleRad, radius, scale);\r\n    ring.appendChild(partialPath);\r\n  }\r\n  if (params && params[\"offset\"])\r\n    gsap.set(ring, {\r\n      transformOrigin: \"center\",\r\n      rotation: params.offset,\r\n    });\r\n  return ring;\r\n}\r\n\r\n//centers an svg element\r\n//doesnt seem to work in firefox\r\n//uses bbox which requires the path\r\nfunction gsapCenterElement(elem) {\r\n  //requires the element to exist within the dom so bBox is not 0,\r\n  svgGeneric.addToDefs(elem);\r\n  let bBox = elem.getBBox();\r\n  gsap.set(elem, {\r\n    x: `-=${bBox.width / 2 + bBox.x}px`,\r\n    y: `-=${bBox.height / 2 + bBox.y}px`,\r\n  });\r\n}\r\n\r\n//moves an element to a some point in an imaginary circle surrounding the element\r\nfunction gsapMoveToCircumferenceAtAngle(elem, angleRad, radius, scale) {\r\n  gsap.set(elem, {\r\n    transformOrigin: \"center\",\r\n    x: `+=${radius * Math.sin(angleRad)}px`,\r\n    y: `-=${radius * Math.cos(angleRad)}px`,\r\n    rotation: `${angleRad}rad`,\r\n    scale: scale,\r\n  });\r\n}\r\n//creates a series of rings using makeRing function\r\n//first param is an arra of arrays the inner arrays are to be comprised of svg paths\r\n//second param is an array or parameters relating to each ring; radius, cuts, ringClass\r\n//third param is params relating to the overall system of concentric rings; concentricSystem\r\nexport default function makeConcentricRings(pathArrArr, paramArr, params) {\r\n  let concentricSystem =\r\n    params && params[\"concentricSystem\"]\r\n      ? params.concentricSystem\r\n      : svgGeneric.group({ id: params.id });\r\n  pathArrArr.forEach((elemArr, index) => {\r\n    let ring = makeRing(elemArr, paramArr[index % paramArr.length]);\r\n    concentricSystem.appendChild(ring);\r\n  });\r\n  return concentricSystem;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
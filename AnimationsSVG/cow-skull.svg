<svg id="svgContainer" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2560 1440">
  <style>
    body {
      background-image: radial-gradient(var(--gray-dark), var(--purple-dark));
    }

    svg path {
      fill: white;
      stroke-width: 0.5%;
      stroke-linecap: round;
    }

    .thin {
      stroke-width: 0.2%;
    }

    #thickDetails,
    .thin {
      fill: var(--purple-pale);
    }

    #eyeSpiral {
      stroke: none;
    }

    #eyeBG {
      fill: #782345;
    }

    .hair {
      fill: black;
    }

    #eyeSpiral {
      fill: black;
    }

    #baseDetails {
      fill: var(--purple-pale);
    }

    #skullGradStop1 {
      stop-color: var(--purple-pale);
    }

    #hornRight,
    #teeth {
      fill: url("#skullGrad");
    }
  </style>

  <defs>
    <linearGradient id="skullGrad" x1="0%" y1="100%" x2="100%" y2="0%">
      <stop id="skullGradStop1" offset="0%" stop-color="#fffdd0" />
      <stop offset="45%" stop-color="#fff" />
      <stop offset="100%" stop-color="#fff" />
    </linearGradient>
    <radialGradient id="bgGrad" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
      <stop offset="0%" stop-color="#474647" />
      <stop offset="100%" stop-color="#242038" />
    </radialGradient>
    <g>
      <path id="eyeSpiral1" fill="none" stroke="black" stroke-width="1" d="M 1406.50,802.00
           C 1400.90,789.78 1388.09,780.05 1383.01,771.89
             1378.40,764.50 1331.33,763.33 1358.00,739.67
             1384.67,716.00 1385.60,758.92 1390.77,764.61
             1397.64,772.16 1412.95,781.55 1417.00,795.00
             1425.79,824.21 1420.91,862.36 1420.91,862.36
             1420.91,862.36 1430.22,837.48 1428.00,812.00
             1426.69,796.96 1421.70,779.18 1421.05,766.56
             1420.52,756.07 1350.00,716.67 1425.33,715.67
             1500.67,714.67 1433.90,750.10 1436.00,760.00
             1438.64,772.46 1441.60,799.25 1442.00,813.50
             1442.70,838.88 1424.33,864.67 1424.33,864.67
             1424.33,864.67 1453.89,835.13 1456.50,810.50
             1457.41,801.96 1446.83,797.74 1444.39,791.73
             1441.49,784.60 1427.00,760.33 1455.67,764.33
             1484.33,768.33 1477.30,769.75 1481.00,774.00
             1486.29,780.07 1473.97,799.52 1472.00,810.00
             1467.48,833.99 1428.00,867.62 1428.00,867.62
             1428.00,867.62 1465.53,846.01 1478.06,826.50
             1483.81,817.55 1485.56,808.69 1485.93,802.33
             1486.26,796.68 1470.17,760.33 1497.50,767.00
             1524.83,773.67 1516.32,762.51 1518.00,770.00
             1519.48,776.59 1507.82,824.75 1502.50,832.50
             1488.29,853.21 1430.38,870.25 1430.38,870.25
             1430.38,870.25 1507.07,854.46 1528.00,834.00
             1541.16,821.14 1527.10,797.37 1527.67,795.00
             1528.70,790.71 1518.00,755.67 1558.00,765.00
             1598.00,774.33 1562.34,800.85 1553.00,815.00
             1546.92,824.21 1547.45,841.03 1535.00,847.67
             1494.24,869.39 1431.00,874.73 1431.00,874.73
             1431.00,874.73 1487.72,890.23 1521.33,878.67
             1547.18,869.78 1564.12,816.88 1576.00,809.33
             1581.87,805.61 1608.00,780.33 1618.67,822.00
             1629.33,863.67 1591.71,845.41 1589.33,848.00
             1580.09,858.09 1551.89,884.48 1522.67,890.67
             1483.95,898.87 1431.73,879.82 1431.73,879.82
             1431.73,879.82 1477.92,905.92 1516.00,906.33
             1538.31,906.57 1583.73,868.93 1596.00,864.67
             1602.67,862.35 1615.67,843.00 1616.33,882.33
             1617.00,921.67 1577.28,905.04 1572.00,908.00
             1558.86,915.36 1532.37,926.99 1508.67,925.33
             1470.77,922.68 1429.82,884.18 1429.82,884.18
             1429.85,884.14 1463.40,937.34 1497.33,943.33
             1534.10,949.83 1579.65,913.31 1579.69,913.27
             1577.73,917.73 1620.25,891.75 1612.25,927.75
             1604.25,963.75 1557.60,953.39 1556.67,956.00
             1554.97,960.74 1509.14,971.70 1478.67,962.00
             1444.87,951.24 1427.09,887.36 1427.09,887.36
             1427.09,887.36 1419.85,950.76 1440.00,975.33
             1446.29,983.01 1494.27,984.39 1505.50,984.25
             1522.80,984.04 1543.25,993.50 1523.00,1014.25
             1502.75,1035.00 1478.67,1006.10 1465.25,1006.75
             1449.99,1007.48 1433.21,994.34 1427.33,985.67
             1409.21,958.93 1421.73,889.09 1421.73,889.09
             1421.73,889.09 1389.61,960.86 1396.33,985.33
             1399.50,996.84 1432.37,1011.94 1442.67,1017.33
             1455.53,1024.07 1494.00,1053.75 1448.25,1068.25
             1402.50,1082.75 1416.22,1037.81 1400.00,1031.33
             1388.31,1026.66 1385.49,1002.00 1382.00,990.67
             1373.88,964.29 1417.27,889.64 1417.27,889.64
             1417.27,889.64 1351.06,968.31 1348.33,999.33
             1347.26,1011.48 1368.35,1020.63 1376.67,1026.00
             1386.45,1032.31 1420.50,1069.50 1380.00,1074.75
             1339.50,1080.00 1339.38,1050.12 1329.33,1045.33
             1318.16,1040.01 1337.17,1012.17 1338.33,998.67
             1341.26,964.77 1412.64,888.73 1412.64,888.73
             1412.64,888.73 1364.15,926.92 1334.67,952.00
             1318.51,965.74 1298.50,982.75 1291.33,995.33
             1281.91,1011.87 1302.78,1023.97 1306.00,1032.67
             1307.77,1037.44 1336.75,1062.75 1306.00,1077.75
             1275.25,1092.75 1272.85,1029.78 1270.00,1024.00
             1264.97,1013.79 1299.28,955.87 1318.67,942.00
             1352.85,917.55 1408.64,887.00 1408.64,887.00
             1408.64,887.00 1289.32,935.92 1255.33,965.33
             1241.94,976.92 1255.73,1007.34 1252.67,1016.00
             1250.80,1021.29 1269.00,1073.50 1223.00,1059.50
             1177.00,1045.50 1208.32,999.07 1209.33,993.33
             1211.21,982.78 1230.25,965.95 1245.33,953.33
             1276.92,926.91 1406.00,882.45 1406.00,882.45
             1406.00,882.45 1362.60,885.56 1326.55,898.18
             1283.32,913.31 1235.82,948.10 1210.00,960.50
             1199.63,965.48 1175.50,1002.00 1164.00,972.25
             1152.50,942.50 1189.88,946.66 1200.67,940.67
             1225.99,926.61 1261.04,907.81 1304.50,892.00
             1340.23,879.00 1404.36,877.45 1404.36,877.45
             1404.36,877.45 1314.61,878.76 1278.00,887.50
             1231.86,898.52 1229.83,912.14 1209.20,917.01
             1203.99,918.24 1177.00,946.75 1174.75,921.00
             1172.50,895.25 1180.90,890.08 1186.00,887.50
             1205.57,877.62 1253.18,881.05 1299.50,872.50
             1332.84,866.35 1404.73,873.09 1404.73,873.09
             1404.73,873.09 1370.06,865.28 1334.18,864.36
             1291.09,863.27 1238.56,864.33 1217.51,862.27
             1210.72,861.61 1164.75,878.00 1177.25,846.00
             1189.75,814.00 1218.21,839.25 1224.00,838.50
             1246.00,835.67 1277.54,848.78 1320.50,852.50
             1355.11,855.50 1406.73,869.27 1406.73,869.27
             1406.73,869.27 1336.49,845.77 1296.00,836.50
             1286.24,834.26 1232.00,842.00 1243.33,823.67
             1254.67,805.33 1255.41,813.14 1265.00,814.00
             1281.52,815.47 1321.35,833.75 1345.50,839.00
             1378.59,846.20 1409.09,866.36 1409.09,866.36
             1409.09,866.36 1393.05,846.79 1362.91,832.73
             1347.09,825.35 1295.08,815.92 1280.50,810.50
             1267.87,805.80 1266.25,810.58 1277.67,785.67
             1289.08,760.75 1292.92,785.57 1306.00,789.00
             1321.25,793.00 1353.20,814.84 1369.00,823.00
             1398.60,838.28 1411.94,864.04 1412.45,863.91
             1412.45,863.91 1406.09,835.58 1381.50,816.50
             1370.85,808.23 1354.37,805.32 1344.02,799.79
             1331.69,793.19 1298.67,791.00 1319.33,772.67
             1340.00,754.33 1340.47,769.18 1349.50,773.00
             1363.44,778.90 1387.01,801.81 1395.50,812.00
             1416.59,837.32 1416.64,862.73 1416.64,862.73
             1416.64,862.73 1418.09,827.27 1406.50,802.00 Z" />
      <path id="eyeSpiral2" fill="none" stroke="black" stroke-width="1" d="M 1417.76,803.18
           C 1414.18,790.21 1403.10,778.56 1399.38,769.70
             1396.02,761.66 1349.74,752.99 1379.85,733.89
             1409.96,714.79 1404.02,757.31 1408.21,763.75
             1413.79,772.31 1427.40,784.02 1429.24,797.94
             1433.25,828.18 1422.33,865.07 1422.33,865.07
             1422.33,865.07 1435.50,841.99 1437.38,816.49
             1438.49,801.43 1435.12,800.06 1436.50,787.50
             1437.65,777.06 1383.98,709.44 1458.50,720.50
             1533.02,731.56 1453.11,756.32 1453.59,766.43
             1454.21,779.16 1452.85,806.07 1450.96,820.20
             1447.60,845.37 1425.34,867.89 1425.34,867.89
             1425.34,867.89 1459.24,843.46 1465.75,819.56
             1468.02,811.27 1458.25,805.42 1456.80,799.10
             1455.08,791.59 1444.66,765.32 1472.32,773.86
             1499.97,782.39 1492.80,782.66 1495.78,787.45
             1500.03,794.29 1484.76,811.52 1481.14,821.55
             1472.84,844.50 1428.49,871.39 1428.49,871.39
             1428.49,871.39 1468.99,856.06 1484.48,838.81
             1491.58,830.89 1494.73,822.42 1496.11,816.20
             1497.34,810.67 1496.08,746.55 1522.00,757.50
             1547.92,768.45 1545.04,754.34 1545.50,762.00
             1545.91,768.75 1514.14,841.83 1507.64,848.64
             1490.30,866.80 1430.41,874.37 1430.41,874.37
             1430.41,874.37 1508.64,871.04 1532.58,854.19
             1547.62,843.61 1542.56,804.25 1543.50,802.00
             1545.20,797.93 1546.51,762.89 1584.50,778.50
             1622.49,794.11 1571.77,826.96 1560.29,839.44
             1552.82,847.56 1550.65,864.25 1537.30,868.81
             1493.59,883.73 1430.31,878.88 1430.31,878.88
             1430.31,878.88 1483.83,903.26 1518.85,897.22
             1545.78,892.58 1570.97,843.07 1583.90,837.52
             1590.29,834.78 1620.13,814.01 1623.99,856.85
             1627.86,899.69 1593.64,875.64 1590.88,877.82
             1580.14,886.30 1548.09,907.84 1518.25,909.28
             1478.72,911.18 1430.21,884.03 1430.21,884.03
             1430.21,884.03 1471.63,917.18 1509.16,923.68
             1531.14,927.48 1582.00,897.58 1594.80,895.34
             1601.75,894.12 1617.67,877.10 1612.04,916.03
             1606.41,954.97 1569.86,932.20 1564.17,934.28
             1550.02,939.45 1522.01,946.69 1498.88,941.26
             1461.90,932.58 1427.63,888.03 1427.63,888.03
             1427.67,888.00 1452.28,945.87 1484.82,957.22
             1520.07,969.51 1570.88,940.75 1570.92,940.71
             1568.27,944.80 1614.40,925.96 1600.75,960.21
             1587.09,994.47 1542.70,976.78 1541.36,979.21
             1538.93,983.62 1491.94,987.10 1463.41,972.66
             1431.76,956.63 1424.43,890.73 1424.43,890.73
             1424.43,890.73 1407.14,952.16 1423.11,979.64
             1428.09,988.22 1475.23,997.25 1486.34,998.91
             1503.45,1001.47 1522.12,1014.08 1498.81,1031.33
             1475.51,1048.57 1461.85,1023.01 1448.50,1021.50
             1433.32,1019.78 1413.36,997.31 1408.95,987.81
             1395.34,958.52 1418.86,891.58 1418.86,891.58
             1418.86,891.58 1375.68,957.29 1378.40,982.52
             1379.68,994.39 1409.72,1014.55 1419.02,1021.52
             1430.64,1030.23 1463.87,1065.68 1416.39,1072.68
             1368.91,1079.67 1390.97,1048.48 1376.00,1039.50
             1365.20,1033.02 1365.03,997.24 1363.40,985.50
             1359.61,958.16 1414.38,891.41 1414.38,891.41
             1414.38,891.41 1336.44,958.48 1328.78,988.67
             1325.78,1000.48 1345.13,1012.89 1352.48,1019.52
             1361.13,1027.32 1388.80,1069.47 1347.98,1068.18
             1307.16,1066.88 1317.15,1052.33 1308.00,1046.00
             1297.82,1038.96 1315.71,999.55 1319.02,986.41
             1327.32,953.42 1409.94,889.77 1409.94,889.77
             1409.94,889.77 1355.97,919.71 1322.86,939.76
             1304.72,950.74 1282.24,964.32 1273.15,975.60
             1261.21,990.42 1279.87,1005.70 1281.66,1014.80
             1282.64,1019.80 1307.20,1049.41 1274.45,1059.30
             1241.70,1069.19 1249.40,1006.65 1247.51,1000.49
             1244.18,989.61 1287.31,937.92 1308.66,927.33
             1346.31,908.66 1406.27,887.42 1406.27,887.42
             1406.27,887.42 1280.67,916.63 1242.41,940.23
             1227.34,949.53 1236.09,981.76 1231.68,989.82
             1228.99,994.74 1238.61,1049.19 1195.44,1028.01
             1152.27,1006.84 1190.61,966.01 1192.53,960.51
             1196.06,950.40 1217.56,936.83 1234.46,926.79
             1269.87,905.75 1404.40,882.51 1404.40,882.51
             1404.40,882.51 1361.05,878.64 1323.45,885.33
             1278.36,893.36 1225.90,920.10 1198.44,928.21
             1187.41,931.47 1157.75,963.66 1151.15,932.45
             1144.56,901.25 1180.79,911.33 1192.40,907.14
             1219.64,897.31 1257.25,884.37 1302.68,875.70
             1340.03,868.58 1403.58,877.32 1403.58,877.32
             1403.58,877.32 1314.78,864.25 1277.24,867.02
             1229.93,870.52 1225.75,883.64 1204.61,885.15
             1199.26,885.54 1168.06,909.36 1169.96,883.58
             1171.86,857.80 1180.97,854.04 1186.42,852.31
             1207.32,845.69 1253.77,856.69 1300.86,855.66
             1334.75,854.91 1404.64,873.07 1404.64,873.07
             1404.64,873.07 1371.67,859.81 1336.40,853.17
             1294.04,845.20 1242.01,837.84 1221.56,832.44
             1214.96,830.70 1166.96,839.53 1184.42,809.95
             1201.88,780.36 1225.93,809.83 1231.77,810.02
             1253.94,810.74 1282.98,828.73 1324.79,839.27
             1358.47,847.77 1407.22,869.62 1407.22,869.62
             1407.22,869.62 1341.65,835.19 1303.16,819.56
             1293.89,815.79 1239.11,814.75 1253.23,798.47
             1267.35,782.18 1266.83,790.01 1276.16,792.39
             1292.23,796.49 1328.63,820.89 1351.63,829.94
             1383.14,842.34 1410.02,867.13 1410.02,867.13
             1410.02,867.13 1397.32,845.24 1369.81,826.54
             1355.37,816.72 1305.54,799.10 1292.02,791.42
             1280.30,784.75 1277.94,789.22 1293.19,766.45
             1308.45,743.68 1308.27,768.80 1320.63,774.27
             1335.04,780.65 1363.09,807.33 1377.38,817.91
             1404.15,837.72 1413.21,865.29 1413.73,865.24
             1413.73,865.24 1411.98,836.26 1390.76,813.49
             1381.57,803.63 1365.77,798.12 1356.43,791.00
             1345.31,782.52 1313.07,775.07 1336.40,760.28
             1359.74,745.49 1357.83,760.22 1366.13,765.43
             1378.95,773.48 1398.55,799.87 1405.30,811.29
             1422.07,839.66 1418.05,864.74 1418.05,864.74
             1418.05,864.74 1425.15,829.97 1417.76,803.18 Z" />
      <path id="eyeSpiral3" fill="none" stroke="black" stroke-width="1" d="M 1430.66,804.16
           C 1429.21,790.79 1420.13,777.52 1417.88,768.17
             1415.85,759.70 1371.56,743.73 1404.34,729.70
             1437.12,715.67 1424.44,756.69 1427.55,763.72
             1431.68,773.05 1443.24,786.79 1442.84,800.84
             1441.95,831.33 1425.26,865.99 1425.26,865.99
             1425.26,865.99 1441.96,845.32 1447.90,820.44
             1451.41,805.75 1448.30,803.86 1451.67,791.69
             1454.48,781.57 1412.33,706.22 1484.12,729.08
             1555.91,751.93 1473.06,763.57 1471.92,773.63
             1470.49,786.29 1464.84,812.64 1460.71,826.29
             1453.36,850.59 1427.78,869.25 1427.78,869.25
             1427.78,869.25 1465.15,850.57 1475.41,828.02
             1478.97,820.20 1475.92,799.98 1475.50,793.50
             1475.00,785.82 1477.07,755.65 1503.00,768.50
             1528.93,781.35 1508.02,795.93 1510.19,801.13
             1513.29,808.57 1495.46,823.13 1490.28,832.44
             1478.41,853.77 1430.33,873.22 1430.33,873.22
             1430.33,873.22 1472.76,864.57 1490.82,850.02
             1499.10,843.34 1503.55,835.48 1505.92,829.57
             1508.01,824.31 1534.17,738.04 1558.00,753.00
             1581.83,767.96 1564.12,776.33 1563.35,783.97
             1562.67,790.70 1519.61,857.75 1512.11,863.43
             1492.08,878.58 1431.75,876.46 1431.75,876.46
             1431.75,876.46 1509.50,885.70 1535.83,872.91
             1552.38,864.86 1561.21,812.57 1562.50,810.50
             1564.83,806.76 1577.50,776.51 1612.50,798.00
             1647.50,819.49 1578.88,852.30 1565.55,862.78
             1556.87,869.60 1552.06,885.72 1538.15,888.09
             1492.62,895.82 1430.93,880.90 1430.93,880.90
             1430.93,880.90 1479.85,913.53 1515.39,913.18
             1542.72,912.91 1575.51,868.08 1589.16,864.67
             1595.91,862.99 1628.69,847.26 1625.64,890.17
             1622.60,933.07 1592.67,903.86 1589.60,905.57
             1577.64,912.22 1542.55,928.35 1512.87,924.99
             1473.54,920.54 1430.01,885.96 1430.01,885.96
             1430.01,885.96 1465.59,925.33 1501.59,937.75
             1522.68,945.02 1577.67,923.65 1590.66,923.49
             1597.72,923.40 1616.16,909.14 1604.37,946.67
             1592.57,984.20 1560.14,955.88 1554.20,957.02
             1539.40,959.85 1510.59,962.52 1488.63,953.46
             1453.52,938.97 1426.82,889.50 1426.82,889.50
             1426.86,889.47 1441.89,950.54 1472.19,966.95
             1505.02,984.73 1559.78,964.48 1559.82,964.45
             1556.56,968.06 1605.11,956.84 1586.14,988.47
             1567.18,1020.10 1526.20,995.53 1524.48,997.72
             1521.38,1001.68 1474.43,997.60 1448.58,978.77
             1419.91,957.88 1423.23,891.66 1423.23,891.66
             1423.23,891.66 1396.33,949.52 1407.68,979.20
             1411.23,988.47 1456.31,1004.94 1467.01,1008.35
             1483.49,1013.62 1499.91,1029.06 1474.14,1042.35
             1448.37,1055.64 1438.99,1028.22 1426.05,1024.59
             1411.34,1020.47 1395.24,995.08 1392.40,985.00
             1383.66,953.91 1417.59,891.60 1417.59,891.60
             1417.59,891.60 1364.45,949.55 1363.09,974.89
             1362.46,986.81 1388.88,1011.52 1396.94,1019.89
             1407.02,1030.35 1434.14,1070.66 1386.16,1069.96
             1338.17,1069.27 1367.34,1054.77 1354.00,1043.50
             1344.38,1035.38 1347.54,987.28 1347.81,975.42
             1348.44,947.83 1413.20,890.71 1413.20,890.71
             1413.20,890.71 1325.52,944.44 1313.13,973.01
             1308.28,984.20 1325.39,999.54 1331.59,1007.26
             1338.87,1016.34 1359.43,1062.38 1319.35,1054.57
             1279.26,1046.76 1293.02,1053.22 1285.00,1045.50
             1276.08,1036.92 1298.48,981.66 1303.85,969.22
             1317.33,937.99 1409.08,888.39 1409.08,888.39
             1409.08,888.39 1351.02,909.30 1315.12,923.78
             1295.45,931.72 1269.78,952.82 1259.00,962.50
             1244.84,975.22 1261.19,1014.73 1261.50,1024.00
             1261.67,1029.09 1258.41,1046.98 1224.50,1051.50
             1190.59,1056.02 1218.87,1000.88 1218.00,994.50
             1216.46,983.23 1280.32,916.28 1303.10,909.24
             1343.25,896.84 1405.83,885.48 1405.83,885.48
             1405.83,885.48 1277.17,894.20 1235.63,911.37
             1219.27,918.14 1222.74,951.35 1217.10,958.60
             1213.65,963.03 1214.43,1018.31 1175.21,990.50
             1135.99,962.68 1180.37,928.52 1183.14,923.40
             1188.25,913.99 1211.64,904.03 1229.94,896.83
             1268.26,881.74 1404.77,880.34 1404.77,880.34
             1404.77,880.34 1362.61,869.57 1324.42,870.16
             1278.62,870.86 1222.56,888.86 1194.15,892.46
             1182.74,893.91 1148.31,920.94 1146.79,889.08
             1145.28,857.22 1179.44,872.97 1191.56,870.70
             1220.03,865.35 1259.23,858.60 1305.45,857.33
             1343.46,856.28 1404.80,875.08 1404.80,875.08
             1404.80,875.08 1319.23,847.95 1281.73,844.68
             1234.47,840.56 1228.24,852.84 1207.13,850.95
             1201.79,850.47 1167.18,868.99 1173.19,843.85
             1179.19,818.71 1188.79,816.45 1194.44,815.62
             1216.13,812.43 1260.22,830.72 1306.87,837.25
             1340.44,841.94 1406.52,871.05 1406.52,871.05
             1406.52,871.05 1376.10,852.69 1342.34,840.48
             1301.81,825.83 1251.63,810.24 1232.31,801.64
             1226.07,798.86 1177.28,799.89 1199.25,773.48
             1221.22,747.07 1240.25,780.01 1245.98,781.13
             1267.75,785.40 1293.53,807.80 1333.11,824.90
             1365.00,838.69 1409.62,868.06 1409.62,868.06
             1409.62,868.06 1350.41,823.58 1314.92,801.98
             1306.37,796.78 1252.46,786.98 1269.01,773.17
             1285.55,759.35 1283.79,767.00 1292.62,770.84
             1307.83,777.46 1339.85,807.38 1361.10,819.99
             1390.22,837.28 1412.79,866.05 1412.79,866.05
             1412.79,866.05 1403.75,842.41 1379.60,819.54
             1366.92,807.54 1320.55,782.17 1308.43,772.42
             1297.93,763.97 1294.88,768.00 1313.59,747.96
             1332.29,727.93 1328.09,752.69 1339.42,760.08
             1352.62,768.69 1376.03,799.51 1388.45,812.24
             1411.70,836.09 1416.22,864.74 1416.75,864.78
             1416.75,864.78 1419.66,835.90 1402.36,810.02
             1394.87,798.81 1380.16,790.85 1372.08,782.32
             1362.46,772.17 1331.83,759.66 1357.23,748.79
             1382.63,737.93 1378.38,752.16 1385.74,758.64
             1397.11,768.64 1412.23,797.82 1417.07,810.17
             1429.07,840.86 1421.09,864.98 1421.09,864.98
             1421.09,864.98 1433.67,831.79 1430.66,804.16 Z" />
      <path id="eyeSpiralRev" fill="none" stroke="black" stroke-width="1" d="M 1374.00,774.33
           C 1356.51,757.21 1373.67,716.00 1427.67,723.33
             1481.67,730.67 1338.73,806.73 1414.50,899.25
             1410.18,782.00 1434.67,784.67 1463.67,770.00
             1492.67,755.33 1487.66,772.89 1517.33,765.33
             1547.01,757.78 1532.57,784.95 1527.33,808.67
             1517.24,854.33 1436.55,809.27 1417.00,904.50
             1469.45,832.91 1519.70,897.03 1542.37,854.70
             1558.47,824.65 1583.62,785.59 1601.67,822.00
             1619.71,858.41 1579.87,885.77 1569.02,893.68
             1531.45,921.06 1481.82,866.55 1413.50,908.75
             1470.55,892.91 1478.63,957.96 1524.24,940.23
             1554.60,928.43 1593.48,928.40 1568.00,957.33
             1542.52,986.26 1518.01,969.88 1497.15,968.47
             1451.64,965.39 1481.09,943.27 1409.50,912.50
             1461.45,959.27 1405.00,974.32 1444.67,983.33
             1469.88,989.06 1460.22,1019.13 1427.00,1028.33
             1393.78,1037.54 1371.56,1021.80 1367.02,1005.36
             1359.90,979.58 1453.45,983.45 1405.00,911.25
             1422.18,977.82 1334.87,974.77 1337.94,1003.44
             1340.05,1023.24 1341.67,1043.33 1311.00,1043.33
             1280.33,1043.33 1273.40,1018.07 1275.88,998.88
             1281.46,955.59 1422.18,992.36 1401.75,907.25
             1378.73,991.09 1271.65,923.73 1251.16,971.88
             1241.42,994.77 1211.67,997.71 1198.33,980.00
             1185.00,962.29 1198.67,948.32 1214.54,937.03
             1265.46,900.83 1378.67,993.67 1399.75,902.50
             1363.00,970.33 1284.80,879.89 1229.76,906.02
             1212.60,914.17 1177.00,948.33 1165.00,919.33
             1153.00,890.33 1204.02,880.46 1222.12,873.85
             1282.38,851.86 1323.00,947.33 1403.75,897.75
             1275.67,913.00 1300.00,846.00 1285.76,838.21
             1271.52,830.42 1252.67,814.00 1273.67,793.33
             1294.67,772.67 1314.88,773.50 1333.33,779.00
             1371.90,790.49 1256.18,905.09 1409.25,896.00
             1325.67,833.00 1400.15,799.93 1374.00,774.33 Z" />
    </g>
    <path id="hair1" class="hair" fill="none" stroke="black" stroke-width="1" d="M 19.57,-15.99
           C 39.13,-15.41 39.13,12.21 28.19,18.53
             24.60,20.61 28.27,51.83 28.49,91.03
             28.61,112.39 23.42,137.78 23.59,161.52
             24.05,226.69 32.38,1068.71 32.38,1068.71
             32.38,1068.71 23.40,224.29 21.29,158.93
             20.52,134.91 25.34,110.90 24.16,89.59
             22.06,51.32 18.53,22.71 15.54,20.83
             6.33,15.08 0.00,-16.57 19.57,-15.99 Z" />
    <path id="hair2" class="hair" fill="none" stroke="black" stroke-width="1" d="M 19.57,-15.99
           C 39.13,-15.41 37.94,14.01 27.00,20.33
             23.41,22.42 28.16,51.54 28.38,90.75
             28.50,112.11 19.83,137.26 20.00,161.00
             20.07,170.40 28.28,195.36 28.75,232.25
             29.19,266.31 24.66,311.69 25.00,361.25
             25.43,423.24 24.92,495.66 25.62,568.25
             26.50,657.78 31.40,748.18 32.50,828.25
             34.38,964.77 8.75,1068.38 8.75,1068.38
             8.75,1068.38 33.55,965.38 31.12,829.00
             29.70,748.90 24.83,657.89 23.62,568.38
             22.63,494.97 23.06,422.55 22.38,360.00
             21.84,311.58 26.88,266.96 26.25,233.38
             25.55,195.89 17.31,169.85 17.00,160.33
             16.23,136.32 25.34,110.90 24.16,89.59
             22.06,51.32 18.99,17.88 16.00,16.00
             6.79,10.25 0.00,-16.57 19.57,-15.99 Z" />
    <path id="hair3" class="hair" fill="none" stroke="black" stroke-width="1" d="M 19.57,-15.99
           C 39.13,-15.41 39.13,12.21 28.19,18.53
             24.60,20.61 21.53,52.29 21.75,91.50
             21.87,112.86 30.58,133.01 30.75,156.75
             30.83,168.42 23.13,209.67 23.25,262.12
             23.45,350.97 28.19,482.09 29.75,614.88
             32.41,841.46 31.38,1055.12 31.38,1055.12
             31.38,1055.12 30.80,841.14 27.12,614.62
             24.94,479.87 20.29,346.36 19.50,259.00
             19.07,211.35 26.73,171.80 26.38,160.75
             25.60,136.74 15.80,112.19 14.62,90.88
             12.52,52.60 18.37,21.13 15.38,19.25
             6.16,13.50 0.00,-16.57 19.57,-15.99 Z" />
    <path id="hair4" class="hair" fill="none" stroke="black" stroke-width="1" d="M 19.57,-15.99
           C 39.13,-15.41 38.37,13.61 27.44,19.94
             23.84,22.02 25.06,51.67 25.28,90.88
             25.36,104.26 19.80,119.17 17.50,134.28
             16.13,143.28 20.69,152.51 20.75,161.38
             20.12,174.12 19.51,216.36 19.88,275.16
             20.15,319.63 24.25,373.43 24.00,432.62
             22.86,699.31 19.76,1063.80 20.75,1063.62
             19.63,1063.69 22.21,700.12 22.72,432.91
             22.83,373.83 18.09,319.68 17.69,275.00
             17.14,214.69 17.38,173.57 17.78,160.69
             17.50,152.05 12.19,142.40 13.41,133.59
             15.56,117.92 21.79,103.96 21.03,90.31
             18.93,52.03 18.53,22.71 15.54,20.83
             6.33,15.08 0.00,-16.57 19.57,-15.99 Z" />
    <path id="hair5" class="hair" fill="none" stroke="black" stroke-width="1" d="M 19.57,-15.99
           C 39.13,-15.41 36.66,12.93 25.72,19.25
             22.13,21.34 16.59,41.26 16.81,80.47
             16.88,92.19 18.05,108.66 17.62,125.03
             17.27,138.49 15.30,151.88 15.38,162.59
             15.42,168.50 19.25,179.47 19.53,196.91
             19.67,205.52 16.02,217.13 16.19,228.12
             16.64,257.31 27.43,292.93 28.19,335.09
             29.24,393.68 24.37,462.94 24.97,534.22
             25.40,585.91 27.62,638.64 28.25,690.34
             28.61,719.84 21.93,750.96 22.25,779.06
             22.98,841.99 14.73,900.63 16.53,947.78
             19.36,1021.80 14.66,1067.38 14.66,1067.38
             14.66,1067.38 18.25,1021.91 14.69,947.25
             12.43,899.90 20.61,840.40 19.53,777.53
             19.06,749.78 26.44,719.82 25.94,690.72
             25.04,638.57 23.06,585.88 22.34,533.69
             21.37,462.91 25.92,393.61 24.50,335.28
             23.47,292.84 12.39,257.00 11.69,227.56
             11.43,216.75 14.85,206.46 14.62,197.91
             14.16,179.74 10.82,167.41 10.62,161.34
             10.25,149.67 12.67,136.93 12.62,125.25
             12.57,112.90 10.04,101.64 9.44,90.69
             7.34,52.41 13.09,21.25 10.09,19.38
             0.88,13.62 0.00,-16.57 19.57,-15.99 Z" />
    <path id="cowSkullOutline" fill="none" stroke="black" stroke-width="1" d="M 2317.65,136.12
           C 2317.65,136.12 2250.88,226.92 2171.85,313.49
             2141.37,346.87 2097.92,378.26 2070.13,402.68
             2050.75,419.70 2035.51,439.18 2020.53,446.27
             2000.72,455.64 1984.58,467.90 1968.25,476.16
             1952.23,484.27 1935.91,488.37 1925.16,495.87
             1895.89,516.31 1883.79,535.48 1858.19,558.50
             1852.49,563.63 1842.36,569.22 1830.30,575.04
             1818.74,580.62 1805.48,586.48 1788.54,589.07
             1773.34,591.39 1760.05,596.93 1743.45,599.42
             1722.82,602.52 1698.78,602.32 1679.64,602.09
             1663.48,601.90 1649.17,596.47 1636.22,594.08
             1627.96,592.54 1619.67,592.60 1614.85,589.07
             1609.68,585.28 1608.16,577.79 1604.83,573.03
             1594.92,558.94 1591.65,542.85 1590.13,537.46
             1586.97,526.28 1579.61,521.06 1571.43,519.13
             1567.62,511.97 1564.27,506.03 1562.07,502.89
             1552.72,489.53 1585.45,456.12 1601.15,443.09
             1616.85,430.06 1718.40,376.62 1801.57,363.59
             1884.74,350.57 1987.96,219.29 1982.95,179.21
             1932.85,221.30 1882.74,271.40 1825.62,260.38
             1802.61,255.94 1740.44,252.36 1707.37,252.36
             1674.30,252.36 1647.25,271.40 1590.13,305.47
             1546.41,331.55 1489.24,345.88 1476.93,347.57
             1458.28,355.04 1410.00,374.45 1398.73,390.65
             1382.69,413.70 1373.67,437.75 1337.60,460.80
             1301.52,483.85 1241.40,496.87 1241.40,496.87
             1241.40,496.87 1221.35,502.89 1194.30,476.83
             1167.24,450.78 1091.08,528.94 1110.12,520.92
             1129.16,512.91 1122.15,527.94 1160.23,520.92
             1198.31,513.91 1138.18,550.99 1138.18,550.99
             1138.18,550.99 1122.15,549.99 1105.11,563.01
             1088.07,576.04 1088.07,584.06 1052.00,584.06
             1015.92,584.06 1024.94,581.05 1000.89,596.08
             976.84,611.11 962.81,611.11 953.79,618.13
             944.77,625.14 885.98,660.89 913.71,659.21
             921.63,658.73 919.21,672.86 919.05,676.92
             918.66,687.06 905.21,692.96 900.68,694.62
             894.34,696.96 878.31,702.98 841.89,718.67
             838.73,720.03 834.81,721.92 830.34,724.19
             825.04,726.38 819.74,728.92 814.50,731.87
             808.30,735.35 800.15,740.32 790.72,746.26
             742.30,774.75 675.19,818.32 628.65,854.77
             612.13,866.06 601.30,873.41 600.55,873.66
             597.55,874.67 528.90,939.80 528.90,939.80
             528.90,939.80 421.18,1023.98 414.66,1035.00
             408.15,1046.03 374.08,1074.08 381.09,1080.60
             382.60,1080.26 385.09,1079.20 388.44,1077.53
             387.44,1078.80 387.32,1079.64 388.36,1079.85
             390.80,1080.35 400.24,1078.86 412.16,1072.33
             416.12,1070.16 421.29,1066.45 425.69,1063.81
             430.08,1061.19 434.59,1058.40 439.07,1055.60
             429.92,1067.56 423.76,1076.53 422.01,1080.77
             413.33,1101.81 393.95,1111.83 375.25,1127.53
             358.22,1141.56 317.13,1162.60 299.09,1176.30
             296.41,1178.33 287.50,1181.75 282.39,1184.99
             272.13,1191.46 262.92,1202.70 249.65,1210.70
             225.11,1225.50 199.88,1228.08 200.54,1235.42
             201.22,1242.77 216.92,1240.76 230.61,1240.43
             244.31,1240.10 264.35,1230.74 271.36,1222.40
             278.38,1214.05 287.40,1201.02 299.42,1200.35
             311.45,1199.68 321.47,1200.02 332.49,1198.35
             343.51,1196.67 368.57,1182.31 371.57,1181.31
             372.17,1181.11 387.16,1172.90 407.31,1161.81
             405.34,1163.26 403.57,1164.58 402.31,1165.61
             386.94,1177.97 306.77,1226.40 288.73,1237.10
             270.69,1247.78 216.92,1251.46 200.54,1252.46
             207.90,1261.81 230.61,1266.16 240.63,1261.15
             250.65,1256.14 284.06,1259.14 293.41,1261.81
             302.76,1264.48 315.46,1254.13 321.14,1244.77
             326.81,1235.42 334.83,1230.41 346.19,1232.09
             357.54,1233.75 368.90,1225.40 388.28,1213.05
             407.65,1200.68 444.10,1184.36 485.14,1162.60
             502.35,1153.49 518.15,1142.30 524.56,1140.22
             546.27,1133.21 559.30,1120.85 578.34,1133.88
             597.38,1146.91 609.40,1150.24 615.41,1160.94
             621.43,1171.62 639.46,1187.99 645.48,1201.02
             647.42,1205.23 650.23,1207.40 653.45,1208.67
             653.75,1219.21 654.50,1235.96 656.35,1248.09
             657.69,1256.81 660.60,1261.44 662.54,1262.48
             668.72,1265.79 669.35,1265.16 672.87,1262.81
             676.39,1260.48 685.50,1266.97 688.24,1266.82
             690.97,1266.67 690.06,1262.00 691.24,1261.15
             692.43,1260.29 697.35,1262.60 700.26,1262.81
             703.18,1263.03 704.09,1257.56 704.09,1257.56
             704.09,1257.56 704.82,1252.72 711.93,1259.56
             713.17,1260.77 711.99,1263.79 713.02,1264.66
             715.57,1266.83 716.93,1264.69 718.66,1265.03
             723.52,1265.99 726.44,1264.48 729.23,1262.66
             733.42,1259.92 750.73,1263.45 755.38,1263.15
             760.03,1262.84 759.39,1259.14 759.39,1259.14
             760.72,1256.13 759.13,1267.85 773.33,1280.70
             775.32,1282.50 776.89,1283.93 778.43,1283.79
             780.24,1283.64 781.93,1281.68 783.53,1281.07
             786.11,1280.07 788.89,1280.65 790.27,1279.61
             796.08,1275.24 791.78,1269.10 796.13,1271.17
             800.47,1273.23 803.66,1276.93 809.04,1273.23
             814.41,1269.52 813.53,1281.07 817.84,1285.53
             822.16,1289.99 822.76,1288.65 827.20,1285.86
             831.63,1283.07 843.23,1283.52 843.23,1283.52
             843.23,1283.52 856.32,1280.80 867.16,1282.52
             871.49,1283.21 873.87,1289.45 877.36,1289.45
             879.45,1289.45 880.20,1287.08 881.55,1285.80
             882.68,1284.73 884.54,1284.71 884.98,1284.53
             887.30,1283.58 883.81,1279.26 884.47,1277.42
             884.95,1276.06 889.46,1277.01 891.21,1276.69
             894.14,1276.17 899.28,1282.22 900.01,1281.19
             901.77,1278.69 908.40,1277.60 912.38,1281.52
             916.35,1285.44 921.67,1281.97 924.37,1278.33
             927.07,1274.69 926.01,1274.14 932.75,1274.50
             939.49,1274.87 939.67,1276.93 945.78,1278.18
             951.88,1279.43 957.95,1277.42 962.48,1273.50
             967.00,1269.58 971.50,1265.82 976.17,1269.16
             980.85,1272.50 981.76,1277.06 984.86,1275.51
             987.95,1273.95 985.71,1275.54 989.20,1271.83
             991.10,1269.81 991.05,1246.76 993.24,1223.85
             993.83,1217.71 997.19,1211.26 998.34,1205.45
             998.92,1202.51 999.05,1199.75 999.04,1197.24
             1000.14,1197.46 1001.26,1197.57 1002.41,1197.59
             999.72,1207.83 996.67,1224.16 998.71,1236.06
             1001.94,1255.07 1010.73,1266.13 1013.92,1266.49
             1017.11,1266.85 1016.07,1264.42 1019.60,1263.81
             1023.12,1263.21 1023.61,1266.70 1029.86,1264.12
             1036.12,1261.54 1040.62,1257.56 1044.98,1256.47
             1049.35,1255.37 1059.37,1256.47 1063.02,1253.46
             1066.67,1250.45 1064.67,1248.57 1069.03,1248.78
             1073.40,1249.00 1078.50,1244.02 1081.06,1247.78
             1083.62,1251.55 1088.84,1251.01 1093.42,1250.45
             1095.47,1250.21 1099.44,1242.25 1102.01,1232.06
             1105.18,1219.51 1106.52,1203.89 1103.11,1198.68
             1100.34,1194.47 1099.85,1186.65 1100.15,1179.27
             1103.74,1179.82 1106.63,1180.12 1107.45,1179.64
             1114.80,1175.30 1107.18,1152.61 1112.13,1134.21
             1112.80,1131.73 1122.90,1120.35 1123.82,1117.85
             1125.94,1112.01 1128.66,1102.47 1137.51,1094.13
             1142.22,1089.69 1150.05,1088.80 1156.29,1085.48
             1156.74,1087.72 1157.19,1090.01 1157.55,1092.45
             1159.30,1104.33 1160.62,1117.44 1165.24,1123.86
             1171.37,1132.38 1180.21,1134.50 1182.94,1133.21
             1185.86,1131.83 1180.16,1124.25 1177.59,1107.15
             1176.12,1097.33 1175.41,1084.86 1175.67,1072.44
             1190.43,1062.87 1202.16,1057.29 1202.99,1065.74
             1203.59,1071.99 1208.42,1080.39 1215.67,1085.11
             1219.14,1087.36 1224.50,1086.37 1228.70,1088.11
             1235.86,1091.08 1243.40,1094.80 1250.41,1094.46
             1259.12,1097.75 1266.83,1102.75 1271.46,1104.82
             1278.14,1107.79 1289.88,1110.71 1301.85,1113.17
             1313.55,1117.85 1332.07,1118.36 1337.27,1116.50
             1346.62,1113.17 1361.65,1120.51 1372.34,1124.86
             1383.02,1129.20 1390.71,1122.52 1397.39,1126.52
             1404.07,1130.53 1419.77,1132.88 1425.78,1136.89
             1428.98,1139.01 1437.42,1141.35 1445.49,1141.90
             1452.62,1142.38 1459.32,1141.21 1463.86,1140.89
             1473.55,1140.22 1484.91,1132.88 1491.25,1123.52
             1497.60,1114.17 1516.64,1116.84 1523.66,1118.18
             1530.67,1119.51 1540.69,1120.18 1546.71,1124.86
             1552.72,1129.53 1564.40,1117.51 1565.75,1116.84
             1566.48,1116.47 1572.52,1116.12 1577.77,1111.49
             1582.08,1107.69 1583.77,1102.48 1586.79,1099.47
             1593.46,1092.79 1592.13,1092.45 1599.48,1101.47
             1606.83,1110.49 1608.84,1127.87 1608.84,1127.87
             1608.84,1127.87 1611.50,1148.91 1598.47,1152.58
             1590.74,1154.76 1586.99,1163.56 1583.11,1168.95
             1580.46,1172.63 1577.00,1173.20 1575.10,1174.97
             1570.42,1179.31 1568.41,1192.00 1580.44,1191.66
             1592.46,1191.33 1602.82,1189.00 1610.50,1178.63
             1613.49,1174.49 1624.03,1169.53 1629.54,1160.60
             1633.01,1154.98 1633.47,1148.27 1635.89,1142.23
             1639.54,1133.12 1644.52,1125.14 1646.24,1121.51
             1647.09,1119.74 1648.08,1117.73 1649.13,1115.63
             1654.86,1114.21 1662.14,1111.52 1670.63,1106.48
             1674.74,1104.05 1679.36,1103.46 1683.65,1100.14
             1694.93,1091.42 1688.66,1060.73 1688.66,1037.01
             1688.66,1013.29 1693.27,1004.42 1700.03,982.56
             1702.58,974.26 1716.68,965.76 1722.84,954.75
             1737.35,949.56 1751.66,941.55 1750.46,911.07
             1749.86,895.76 1756.03,870.45 1768.32,843.77
             1776.63,841.53 1782.53,839.59 1782.53,839.59
             1782.53,839.59 1789.82,835.47 1800.07,829.07
             1802.70,827.43 1804.43,825.44 1807.58,823.56
             1812.31,820.73 1820.77,818.39 1825.62,815.04
             1833.45,809.63 1831.96,802.84 1842.16,797.00
             1856.39,788.86 1878.42,784.82 1893.78,775.98
             1932.51,753.71 1971.00,731.39 1989.96,719.84
             2009.08,708.21 2031.47,688.47 2044.08,665.73
             2061.86,633.65 2069.04,594.16 2097.19,550.49
             2118.84,516.90 2133.22,486.20 2150.80,472.82
             2207.42,429.73 2228.46,382.63 2228.46,382.63
             2228.46,382.63 2239.86,357.22 2257.53,321.51
             2262.61,311.23 2270.23,301.90 2275.06,290.44
             2279.39,280.16 2282.67,269.18 2286.09,257.87
             2289.70,245.92 2293.43,233.65 2297.11,222.80
             2303.90,202.79 2311.40,185.97 2314.65,170.69
             2318.72,151.48 2317.65,136.12 2317.65,136.12 Z
           M 1476.93,347.57
           C 1484.81,344.41 1487.92,343.18 1479.90,345.56
             1473.55,347.44 1473.16,348.09 1476.93,347.57 Z" />
  </defs>
  <g id="hairs"></g>
  <rect id="eyeBG" fill="none" stroke="black" stroke-width="1" x="1131" y="704" width="540" height="350" />
  <path id="eyeSpiral" fill="none" stroke="black" stroke-width="1" d="M 1407.94,790.09
           C 1390.45,772.97 1373.67,716.00 1427.67,723.33
             1481.67,730.67 1475.02,883.20 1414.50,899.25
             1489.67,890.62 1502.89,851.51 1497.35,823.72
             1493.90,806.41 1487.66,772.89 1517.33,765.33
             1547.01,757.78 1546.81,793.99 1541.57,817.70
             1531.48,863.37 1491.37,925.56 1417.00,904.50
             1477.81,939.58 1519.70,897.03 1542.37,854.70
             1558.47,824.65 1583.62,785.59 1601.67,822.00
             1619.71,858.41 1579.87,885.77 1569.02,893.68
             1531.45,921.06 1442.99,968.11 1413.50,908.75
             1417.70,966.39 1478.63,957.96 1524.24,940.23
             1554.60,928.43 1593.48,928.40 1568.00,957.33
             1542.52,986.26 1518.01,969.88 1497.15,968.47
             1451.64,965.39 1385.84,952.61 1409.50,912.50
             1362.42,954.99 1405.00,974.32 1444.67,983.33
             1469.88,989.06 1460.22,1019.13 1427.00,1028.33
             1393.78,1037.54 1371.56,1021.80 1367.02,1005.36
             1359.90,979.58 1362.57,941.17 1405.00,911.25
             1344.08,935.20 1334.87,974.77 1337.94,1003.44
             1340.05,1023.24 1341.67,1043.33 1311.00,1043.33
             1280.33,1043.33 1273.40,1018.07 1275.88,998.88
             1281.46,955.59 1310.65,889.12 1401.75,907.25
             1316.68,855.40 1271.65,923.73 1251.16,971.88
             1241.42,994.77 1211.67,997.71 1198.33,980.00
             1185.00,962.29 1198.67,948.32 1214.54,937.03
             1265.46,900.83 1381.83,837.70 1399.75,902.50
             1401.27,826.27 1284.80,879.89 1229.76,906.02
             1212.60,914.17 1177.00,948.33 1165.00,919.33
             1153.00,890.33 1204.02,880.46 1222.12,873.85
             1282.38,851.86 1410.67,820.85 1403.75,897.75
             1433.14,836.12 1349.14,832.25 1285.76,838.21
             1248.86,841.68 1252.67,814.00 1273.67,793.33
             1294.67,772.67 1347.44,790.67 1365.89,796.16
             1404.45,807.65 1448.48,837.16 1409.25,896.00
             1456.58,856.16 1434.09,815.69 1407.94,790.09 Z" />
  <path id="baseDetails" fill="none" stroke="black" stroke-width="1" d="M 1670.33,1106.33
           C 1674.44,1103.90 1679.05,1103.31 1683.33,1100.00
             1694.58,1091.30 1688.33,1060.67 1688.33,1037.00
             1688.33,1013.33 1692.93,1004.48 1699.67,982.67
             1703.27,970.98 1729.78,958.91 1724.67,940.00
             1679.06,939.78 1613.82,929.06 1594.67,955.33
             1592.42,958.89 1548.76,974.29 1497.15,991.73
             1479.48,997.71 1465.69,1015.19 1447.50,1021.25
             1431.72,1026.50 1418.92,1029.24 1403.25,1030.75
             1399.71,1031.09 1391.24,1034.93 1387.25,1035.00
             1379.61,1035.13 1371.84,1034.20 1366.50,1036.00
             1329.46,1048.51 1332.82,1046.19 1332.67,1049.33
             1334.37,1058.97 1371.67,1078.61 1425.33,1077.33
             1502.84,1075.49 1605.15,1050.30 1605.33,1058.67
             1606.07,1091.56 1634.67,1117.26 1634.67,1117.00
             1634.67,1116.74 1648.55,1119.26 1670.33,1106.33 Z
           M 1180.67,1037.00
           C 1175.45,1056.05 1175.34,1087.03 1178.33,1107.00
             1180.89,1124.06 1186.58,1131.62 1183.67,1133.00
             1180.94,1134.29 1172.12,1132.17 1166.00,1123.67
             1161.39,1117.26 1160.08,1104.18 1158.33,1092.33
             1157.02,1083.43 1154.45,1076.73 1155.67,1065.67
             1155.67,1065.67 1180.67,1037.00 1180.67,1037.00 Z" />
  <path id="teeth" fill="none" stroke="black" stroke-width="1" d="M 700.00,1187.33
           C 706.18,1195.27 705.82,1257.09 705.82,1257.09
             705.82,1257.09 704.91,1262.55 702.00,1262.33
             699.09,1262.12 694.18,1259.82 693.00,1260.67
             691.82,1261.52 692.73,1266.18 690.00,1266.33
             687.27,1266.48 678.18,1260.00 674.67,1262.33
             671.15,1264.67 670.52,1265.30 664.36,1262.00
             662.42,1260.96 659.52,1256.34 658.18,1247.64
             655.29,1228.74 655.09,1198.36 655.09,1198.36
             655.09,1198.36 700.00,1187.33 700.00,1187.33 Z
           M 739.00,1184.33
           C 739.00,1184.33 754.00,1209.87 760.55,1231.82
             763.92,1243.11 762.33,1255.66 761.00,1258.67
             761.00,1258.67 761.64,1262.36 757.00,1262.67
             752.36,1262.97 735.09,1259.45 730.91,1262.18
             728.12,1264.00 725.21,1265.50 720.36,1264.55
             718.63,1264.21 717.28,1266.34 714.73,1264.18
             713.70,1263.31 714.88,1260.29 713.64,1259.09
             700.58,1246.52 712.00,1193.33 712.00,1193.33
             712.00,1193.33 739.00,1184.33 739.00,1184.33 Z
           M 774.36,1214.91
           C 781.49,1200.06 794.67,1192.33 794.67,1192.33
             794.67,1192.33 858.00,1167.82 865.67,1169.67
             868.89,1170.44 887.92,1192.91 894.73,1215.45
             904.14,1246.60 903.09,1278.18 901.33,1280.67
             900.60,1281.70 895.47,1275.66 892.55,1276.18
             890.80,1276.50 886.30,1275.55 885.82,1276.91
             885.16,1278.75 888.65,1283.06 886.33,1284.00
             885.89,1284.18 884.04,1284.20 882.91,1285.27
             881.56,1286.55 880.81,1288.91 878.73,1288.91
             875.24,1288.91 872.87,1282.69 868.55,1282.00
             857.73,1280.28 844.67,1283.00 844.67,1283.00
             844.67,1283.00 833.09,1282.55 828.67,1285.33
             824.24,1288.12 823.64,1289.45 819.33,1285.00
             815.03,1280.55 815.91,1269.03 810.55,1272.73
             805.18,1276.42 802.00,1272.73 797.67,1270.67
             793.33,1268.61 797.62,1274.73 791.82,1279.09
             790.44,1280.13 787.67,1279.55 785.09,1280.55
             783.50,1281.16 781.81,1283.12 780.00,1283.27
             778.47,1283.41 776.90,1281.98 774.91,1280.18
             760.74,1267.36 764.31,1235.85 774.36,1214.91 Z
           M 997.82,1176.18
           C 997.82,1176.18 1000.15,1185.74 1000.00,1188.91
             999.83,1192.65 1000.76,1198.46 999.45,1205.09
             998.31,1210.89 994.95,1217.32 994.36,1223.45
             992.18,1246.31 992.23,1269.32 990.33,1271.33
             986.85,1275.03 989.09,1273.45 986.00,1275.00
             982.91,1276.55 982.00,1272.00 977.33,1268.67
             972.67,1265.33 968.18,1269.09 963.67,1273.00
             959.15,1276.91 953.09,1278.91 947.00,1277.67
             940.91,1276.42 940.73,1274.36 934.00,1274.00
             927.27,1273.64 928.33,1274.18 925.64,1277.82
             922.94,1281.45 917.64,1284.91 913.67,1281.00
             909.70,1277.09 894.73,1226.36 900.00,1210.00
             905.27,1193.64 930.33,1170.00 930.33,1170.00
             930.33,1170.00 997.82,1176.18 997.82,1176.18 Z
           M 1103.00,1161.33
           C 1103.00,1161.33 1097.82,1188.91 1104.00,1198.33
             1107.41,1203.53 1106.07,1219.12 1102.91,1231.64
             1100.34,1241.81 1096.38,1249.76 1094.33,1250.00
             1089.76,1250.55 1084.55,1251.09 1082.00,1247.33
             1079.45,1243.58 1074.36,1248.55 1070.00,1248.33
             1065.64,1248.12 1067.64,1250.00 1064.00,1253.00
             1060.36,1256.00 1050.36,1254.91 1046.00,1256.00
             1041.64,1257.09 1037.15,1261.06 1030.91,1263.64
             1024.67,1266.21 1024.18,1262.73 1020.67,1263.33
             1017.15,1263.94 1018.18,1266.36 1015.00,1266.00
             1011.82,1265.64 1003.05,1254.61 999.82,1235.64
             997.26,1220.63 1002.80,1198.41 1005.45,1190.55
             1021.09,1167.45 1103.00,1161.33 1103.00,1161.33 Z" />
  <path id="toothDetails" class="thin" fill="none" stroke="black" stroke-width="1" d="M 973.50,1259.12
           C 973.50,1259.12 969.44,1254.69 967.12,1247.00
             966.24,1244.07 967.27,1239.28 966.44,1236.13
             965.87,1233.97 965.34,1231.82 964.88,1229.75
             963.09,1221.78 963.50,1214.38 963.50,1214.38M 943.25,1262.12
           C 943.25,1262.12 946.79,1257.03 947.50,1250.12
             948.01,1245.17 945.75,1237.75 945.75,1237.75
             945.75,1237.75 944.09,1234.65 943.88,1231.25
             943.55,1226.09 944.62,1219.88 944.62,1219.88M 836.00,1278.50
           C 836.32,1278.05 837.98,1271.98 840.88,1266.75
             843.55,1261.92 845.12,1261.50 847.50,1257.88
             849.88,1254.25 847.92,1240.75 845.75,1228.00
             843.74,1216.23 839.12,1208.75 839.12,1208.75M 816.88,1270.88
           C 816.25,1267.62 814.62,1257.12 814.88,1256.12
             815.12,1255.12 813.38,1245.38 814.00,1242.88
             814.62,1240.38 813.50,1234.75 811.25,1230.62
             809.00,1226.50 806.38,1219.88 806.88,1218.62M 1088.91,1193.09
           C 1089.64,1192.55 1088.00,1185.82 1088.00,1185.82M 1040.55,1242.55
           C 1032.98,1239.78 1033.74,1220.83 1037.09,1207.64
             1039.46,1198.31 1044.00,1193.09 1044.00,1193.09M 1086.91,1236.18
           C 1086.91,1236.18 1093.45,1215.27 1091.09,1205.64M 1027.09,1249.82
           C 1027.09,1249.82 1028.91,1250.00 1029.82,1247.09
             1030.73,1244.18 1025.82,1211.09 1031.82,1207.82M 1017.45,1233.09
           C 1017.45,1233.09 1017.07,1232.21 1016.38,1231.38
             1015.94,1230.85 1015.02,1230.93 1015.09,1229.45
             1015.15,1228.29 1016.07,1227.08 1016.50,1226.00
             1017.47,1223.54 1018.36,1221.64 1018.36,1221.64" />
  <path id="hornRight" fill="none" stroke="black" stroke-width="1" d="M 1982.00,181.00
           C 1987.00,221.00 1884.00,352.00 1801.00,365.00
             1718.00,378.00 1616.67,431.33 1601.00,444.33
             1585.33,457.33 1552.67,490.67 1562.00,504.00
             1571.33,517.33 1601.00,580.00 1601.00,580.00
             1601.00,580.00 1071.00,705.00 1071.00,705.00
             1071.00,705.00 961.00,740.00 961.00,740.00
             961.00,740.00 1040.00,897.00 689.00,1007.00
             689.00,1007.00 377.00,1180.00 374.00,1181.00
             371.00,1182.00 346.00,1196.33 335.00,1198.00
             324.00,1199.67 314.00,1199.33 302.00,1200.00
             290.00,1200.67 281.00,1213.67 274.00,1222.00
             267.00,1230.33 247.00,1239.67 233.33,1240.00
             219.67,1240.33 204.00,1242.33 203.33,1235.00
             202.67,1227.67 227.84,1225.10 252.33,1210.33
             265.57,1202.35 274.77,1191.13 285.00,1184.67
             290.10,1181.44 298.99,1178.03 301.67,1176.00
             319.67,1162.33 360.67,1141.33 377.67,1127.33
             396.33,1111.67 415.67,1101.67 424.33,1080.67
             433.00,1059.67 548.67,924.00 612.67,869.67
             676.67,815.33 807.00,735.00 843.33,719.33
             879.67,703.67 895.67,697.67 902.00,695.33
             906.52,693.67 919.94,687.79 920.33,677.67
             920.49,673.62 922.90,659.52 915.00,660.00
             887.33,661.67 946.00,626.00 955.00,619.00
             964.00,612.00 978.00,612.00 1002.00,597.00
             1026.00,582.00 1017.00,585.00 1053.00,585.00
             1089.00,585.00 1089.00,577.00 1106.00,564.00
             1123.00,551.00 1139.00,552.00 1139.00,552.00
             1139.00,552.00 1199.00,515.00 1161.00,522.00
             1123.00,529.00 1130.00,514.00 1111.00,522.00
             1092.00,530.00 1168.00,452.00 1195.00,478.00
             1222.00,504.00 1242.00,498.00 1242.00,498.00
             1242.00,498.00 1302.00,485.00 1338.00,462.00
             1374.00,439.00 1383.00,415.00 1399.00,392.00
             1415.00,369.00 1507.00,339.00 1480.00,347.00
             1453.00,355.00 1533.00,341.00 1590.00,307.00
             1647.00,273.00 1674.00,254.00 1707.00,254.00
             1740.00,254.00 1802.04,257.57 1825.00,262.00
             1882.00,273.00 1932.00,223.00 1982.00,181.00 Z
           M 1535.33,457.33
           C 1535.33,457.33 1556.00,483.33 1558.33,499.33" />
  <path id="cheekLeft" fill="none" stroke="black" stroke-width="1" d="M 1582.18,903.45
           C 1593.26,888.74 1611.19,875.49 1634.67,856.00
             1704.10,798.37 1809.65,735.93 1839.33,756.00
             1780.67,794.00 1748.67,877.33 1750.00,911.33
             1751.33,945.33 1733.33,951.33 1717.33,956.67
             1701.33,962.00 1680.67,988.00 1671.33,1028.67
             1667.95,1043.41 1671.21,1059.77 1665.33,1078.00
             1660.02,1094.50 1650.95,1110.90 1646.00,1121.33
             1644.28,1124.95 1639.31,1132.91 1635.67,1142.00
             1633.25,1148.03 1632.79,1154.73 1629.33,1160.33
             1623.83,1169.25 1613.31,1174.19 1610.33,1178.33
             1602.67,1188.67 1592.33,1191.00 1580.33,1191.33
             1568.33,1191.67 1570.33,1179.00 1575.00,1174.67
             1576.90,1172.91 1580.35,1172.34 1583.00,1168.67
             1586.87,1163.29 1590.61,1154.51 1598.33,1152.33
             1611.33,1148.67 1608.67,1127.67 1608.67,1127.67
             1608.67,1127.67 1606.67,1110.33 1599.33,1101.33
             1592.00,1092.33 1593.33,1092.67 1586.67,1099.33
             1583.66,1102.34 1581.97,1107.54 1577.67,1111.33
             1572.43,1115.95 1566.40,1116.30 1565.67,1116.67
             1564.33,1117.33 1552.67,1129.33 1546.67,1124.67
             1540.67,1120.00 1530.67,1119.33 1523.67,1118.00
             1516.67,1116.67 1497.67,1114.00 1491.33,1123.33
             1485.00,1132.67 1473.67,1140.00 1464.00,1140.67
             1459.47,1140.98 1452.78,1142.15 1445.67,1141.67
             1437.61,1141.12 1429.19,1138.79 1426.00,1136.67
             1420.00,1132.67 1404.33,1130.33 1397.67,1126.33
             1391.00,1122.33 1383.33,1129.00 1372.67,1124.67
             1362.00,1120.33 1347.00,1113.00 1337.67,1116.33
             1332.48,1118.18 1314.00,1117.67 1302.33,1113.00
             1290.38,1110.55 1278.67,1107.63 1272.00,1104.67
             1267.38,1102.61 1259.69,1097.62 1251.00,1094.33
             1244.00,1094.67 1236.48,1090.96 1229.33,1088.00
             1225.14,1086.26 1219.79,1087.25 1216.33,1085.00
             1209.09,1080.29 1204.27,1071.91 1203.67,1065.67
             1202.55,1054.14 1181.08,1068.77 1159.33,1084.00
             1152.87,1088.52 1143.62,1089.02 1138.33,1094.00
             1129.50,1102.33 1126.79,1111.85 1124.67,1117.67
             1123.75,1120.17 1113.67,1131.52 1113.00,1134.00
             1108.07,1152.36 1115.67,1175.00 1108.33,1179.33
             1106.29,1180.54 1091.24,1176.89 1084.33,1176.33
             1076.82,1175.73 1077.20,1178.10 1069.00,1177.00
             1057.60,1175.47 1049.80,1173.38 1042.67,1178.00
             1038.17,1180.91 1031.36,1181.72 1028.00,1183.67
             1018.66,1189.09 1022.00,1187.67 1016.67,1192.67
             1011.33,1197.67 999.00,1199.67 993.00,1193.00
             987.00,1186.33 981.67,1182.33 973.67,1183.67
             965.67,1185.00 970.00,1192.33 961.33,1196.33
             952.67,1200.33 950.33,1207.00 940.33,1203.67
             930.33,1200.33 934.00,1196.67 926.67,1191.00
             919.33,1185.33 910.33,1179.00 892.67,1178.00
             875.00,1177.00 853.67,1184.67 841.67,1196.67
             829.67,1208.67 823.67,1198.67 815.67,1204.33
             807.67,1210.00 790.33,1211.00 781.33,1207.33
             772.33,1203.67 758.33,1201.67 738.67,1207.00
             719.00,1212.33 722.33,1213.67 711.00,1217.00
             699.67,1220.33 685.67,1220.67 676.67,1214.00
             667.67,1207.33 653.33,1213.67 647.33,1200.67
             641.33,1187.67 623.33,1171.33 617.33,1160.67
             611.33,1150.00 599.33,1146.67 580.33,1133.67
             561.33,1120.67 548.33,1133.00 526.67,1140.00
             520.27,1142.07 504.50,1153.24 487.33,1162.33
             446.37,1184.04 410.00,1200.33 390.67,1212.67
             371.33,1225.00 360.00,1233.33 348.67,1231.67
             337.33,1230.00 329.33,1235.00 323.67,1244.33
             318.00,1253.67 305.33,1264.00 296.00,1261.33
             286.67,1258.67 253.33,1255.67 243.33,1260.67
             233.33,1265.67 210.67,1261.33 203.33,1252.00
             219.67,1251.00 273.33,1247.33 291.33,1236.67
             309.33,1226.00 389.33,1177.67 404.67,1165.33
             420.00,1153.00 491.67,1106.00 514.67,1088.00
             537.67,1070.00 577.00,1034.67 600.67,1024.00
             624.33,1013.33 681.00,984.67 729.33,979.33
             777.67,974.00 824.67,940.00 844.67,927.33
             864.67,914.67 930.33,860.00 940.67,840.00
             951.00,820.00 980.00,766.67 980.00,766.67
             980.00,766.67 1034.67,731.33 1034.67,731.33
             1034.67,731.33 1346.00,767.33 1346.00,767.33
             1346.00,767.33 1324.65,781.56 1308.38,791.88
             1305.33,793.80 1301.29,793.40 1298.88,795.12
             1294.33,798.37 1293.11,801.81 1292.25,803.25
             1288.50,809.54 1285.50,812.75 1282.00,814.67
             1278.50,816.58 1276.50,818.50 1273.12,817.50
             1269.75,816.50 1269.42,813.75 1264.62,816.62
             1259.83,819.50 1258.00,832.00 1258.00,832.00
             1258.00,832.00 1253.33,840.67 1235.33,840.00
             1217.33,839.33 1198.00,873.33 1191.33,887.33
             1184.67,901.33 1198.67,908.00 1200.67,917.33
             1202.67,926.67 1200.67,930.00 1190.00,935.33
             1179.33,940.67 1185.33,953.33 1190.00,958.00
             1194.67,962.67 1216.67,1004.00 1234.00,1012.00
             1241.71,1015.56 1250.62,1019.58 1260.00,1024.67
             1271.70,1031.01 1283.86,1038.22 1292.00,1039.33
             1300.51,1040.49 1323.87,1040.35 1344.67,1038.00
             1359.72,1036.30 1372.66,1031.93 1381.33,1033.33
             1390.71,1034.85 1400.67,1029.60 1411.33,1027.33
             1424.18,1024.60 1437.44,1024.31 1444.00,1020.67
             1450.11,1017.27 1458.90,1012.86 1467.33,1007.33
             1475.46,1002.01 1483.18,995.59 1492.67,991.33
             1512.00,982.67 1538.00,966.67 1548.67,962.00
             1559.33,957.33 1565.76,940.00 1569.33,930.00
             1572.91,920.00 1580.36,919.09 1582.18,903.45 Z
M 1406.75,1033.75
C 1397.23,1036.27 1391.50,1038.08 1388.00,1038.00
1377.25,1037.75 1352.75,1038.25 1356.75,1044.25
1357.95,1046.05 1363.86,1046.31 1369.75,1048.50
1383.49,1053.62 1396.08,1058.42 1403.75,1063.25
1405.62,1064.43 1411.55,1066.46 1418.50,1066.00
1425.78,1065.52 1434.24,1062.50 1443.50,1061.75
1461.73,1060.27 1480.24,1059.75 1484.67,1058.67
1488.39,1057.75 1500.15,1056.63 1507.25,1052.25
1517.00,1046.23 1512.00,1043.08 1522.00,1036.67
1529.03,1032.16 1542.09,1017.79 1556.25,1008.25
1562.23,1004.22 1581.70,997.11 1586.75,995.25
1586.62,992.55 1567.45,1001.06 1558.00,1001.25
1546.44,1001.49 1531.89,998.73 1524.50,998.00
1518.13,997.37 1512.86,991.52 1511.25,992.00
1506.25,993.50 1508.98,992.00 1497.25,997.50
1491.72,1000.09 1487.62,1005.12 1480.75,1008.25
1469.83,1013.22 1459.21,1021.63 1447.25,1026.50
1440.17,1029.38 1431.62,1029.26 1425.00,1031.25
          1418.57,1033.18 1411.98,1032.36 1406.75,1033.75 Z" />
  <path id="hornLeft" fill="none" stroke="black" stroke-width="1" d="M 1590.00,538.50
           C 1591.52,543.88 1594.78,559.94 1604.67,574.00
             1608.00,578.75 1609.51,586.22 1614.67,590.00
             1619.48,593.53 1627.75,593.47 1636.00,595.00
             1648.92,597.39 1663.20,602.81 1679.33,603.00
             1698.43,603.22 1722.42,603.42 1743.00,600.33
             1759.57,597.85 1772.83,592.32 1788.00,590.00
             1804.90,587.42 1818.13,581.57 1829.67,576.00
             1841.70,570.19 1851.81,564.62 1857.50,559.50
             1883.05,536.53 1895.12,517.40 1924.33,497.00
             1935.06,489.51 1951.34,485.42 1967.33,477.33
             1983.63,469.09 1999.73,456.85 2019.50,447.50
             2034.45,440.43 2049.66,420.99 2069.00,404.00
             2096.73,379.63 2140.09,348.31 2170.50,315.00
             2249.37,228.61 2316.00,138.00 2316.00,138.00
             2316.00,138.00 2317.07,153.33 2313.00,172.50
             2309.76,187.75 2302.28,204.53 2295.50,224.50
             2291.83,235.33 2288.11,247.57 2284.50,259.50
             2281.09,270.78 2277.82,281.74 2273.50,292.00
             2268.68,303.43 2261.07,312.75 2256.00,323.00
             2238.37,358.64 2227.00,384.00 2227.00,384.00
             2227.00,384.00 2206.00,431.00 2149.50,474.00
             2131.96,487.35 2117.61,517.98 2096.00,551.50
             2067.91,595.08 2060.74,634.49 2043.00,666.50
             2030.42,689.19 2008.08,708.89 1989.00,720.50
             1970.07,732.02 1931.67,754.30 1893.02,776.52
             1877.69,785.34 1855.71,789.37 1841.50,797.50
             1831.33,803.32 1832.81,810.10 1825.00,815.50
             1820.16,818.84 1811.72,821.18 1807.00,824.00
             1803.85,825.88 1802.13,827.86 1799.50,829.50
             1789.27,835.89 1782.00,840.00 1782.00,840.00
             1782.00,840.00 1748.66,850.97 1728.50,851.00
             1712.63,851.02 1711.26,839.20 1697.50,844.50
             1683.15,850.03 1683.98,861.55 1678.00,876.50
             1670.16,896.11 1659.05,902.26 1645.50,900.50
             1626.22,897.99 1602.40,884.43 1579.50,913.50
             1579.50,913.50 1578.67,906.07 1582.50,892.50
             1584.79,884.38 1588.90,875.30 1590.50,865.00
             1591.63,857.68 1590.71,848.99 1590.50,843.00
             1589.50,814.50 1601.00,815.00 1585.00,811.50
             1569.00,808.00 1582.00,794.50 1571.50,795.00
             1561.00,795.50 1556.50,789.00 1556.50,789.00
             1556.50,789.00 1558.00,775.00 1538.50,775.00
             1519.00,775.00 1511.50,785.50 1503.50,789.00
             1495.50,792.50 1494.50,797.00 1494.00,796.00
             1493.50,795.00 1485.50,793.00 1485.50,793.00
             1485.50,793.00 1479.00,776.50 1470.50,778.50
             1462.00,780.50 1451.50,786.50 1441.00,781.50
             1430.50,776.50 1436.00,770.00 1430.00,764.50
             1424.00,759.00 1422.00,762.50 1415.00,757.50
             1408.00,752.50 1418.00,751.00 1420.50,742.00
             1423.00,733.00 1374.00,754.50 1355.50,777.00
             1337.00,799.50 1340.00,788.50 1326.50,789.00
             1313.00,789.50 1315.00,798.50 1300.00,793.50
             1285.00,788.50 1260.00,774.25 1256.00,769.00
             1252.00,763.75 1245.00,761.75 1235.75,767.50
             1226.50,773.25 1219.75,770.00 1214.50,767.00
             1213.72,766.56 1210.98,770.77 1203.00,770.75
             1199.60,770.74 1195.65,769.24 1191.25,769.25
             1188.17,769.25 1184.74,772.98 1181.25,773.00
             1174.43,773.04 1167.24,769.00 1159.25,769.00
             1146.17,769.00 1134.05,769.66 1120.75,770.00
             1096.76,770.62 1072.03,771.11 1052.75,771.25
             1032.93,771.39 1017.17,768.32 1010.50,772.00
             1003.01,776.14 985.47,784.47 973.50,793.75
             958.72,805.22 956.75,811.50 946.50,818.50
             942.72,821.08 942.05,830.18 928.75,838.50
             905.96,852.75 888.75,862.25 871.00,867.00
             881.50,848.25 927.50,752.00 928.00,738.50
             931.50,732.50 1024.50,700.00 1049.50,690.50
             1061.07,686.10 1061.89,679.08 1072.00,671.75
             1076.95,668.16 1086.63,665.83 1093.25,662.50
             1102.33,657.93 1108.39,652.66 1113.75,650.25
             1131.00,642.50 1149.23,636.98 1163.25,636.25
             1177.27,635.52 1180.00,636.50 1190.25,638.50
             1194.53,639.33 1202.48,634.81 1211.75,629.00
             1224.69,620.89 1228.25,620.00 1239.00,610.50
             1245.93,604.38 1261.25,610.41 1270.00,616.50
             1274.83,619.86 1273.41,624.25 1277.50,624.25
             1289.00,624.25 1313.50,610.00 1326.00,599.00
             1332.47,593.31 1337.85,587.12 1339.25,590.25
             1340.56,593.17 1337.98,605.19 1341.00,607.00
             1347.25,610.75 1356.00,598.25 1361.25,590.25
             1366.50,582.25 1377.50,571.25 1384.00,569.50
             1387.78,568.48 1396.56,565.65 1398.50,570.00
             1399.89,573.13 1394.64,583.09 1396.00,585.50
             1399.25,591.25 1403.75,580.00 1406.75,576.00
             1409.75,572.00 1419.00,569.25 1425.50,569.75
             1432.00,570.25 1441.00,572.00 1445.00,563.00
             1447.18,558.09 1447.62,551.96 1449.75,552.00
             1451.52,552.03 1454.95,557.54 1457.00,560.50
             1461.50,567.00 1474.25,552.75 1483.75,544.75
             1493.25,536.75 1500.50,538.00 1505.50,542.00
             1510.50,546.00 1519.25,545.50 1522.75,536.50
             1524.20,532.76 1525.93,529.64 1528.75,527.50
             1532.72,524.49 1539.05,524.48 1546.50,522.00
             1559.25,517.75 1583.50,515.50 1590.00,538.50 Z" />
  <path id="nasalRight" fill="none" stroke="black" stroke-width="1" d="M 929.50,737.25
           C 922.00,757.75 673.00,896.00 673.00,896.00
             673.79,896.02 407.01,1075.09 383.50,1080.50
             376.50,1074.00 410.50,1046.00 417.00,1035.00
             423.50,1024.00 531.00,940.00 531.00,940.00
             531.00,940.00 599.50,875.00 602.50,874.00
             605.50,873.00 768.00,759.50 816.00,732.50
             864.00,705.50 916.50,711.25 929.50,737.25 Z" />
  <path id="nasalLeft" fill="none" stroke="black" stroke-width="1" d="M 939.75,762.75
           C 939.00,769.50 932.75,791.75 930.00,799.00
             927.25,806.25 917.00,817.00 909.50,828.00
             902.00,839.00 865.00,878.00 850.00,888.75
             835.00,899.50 727.75,957.75 705.00,957.50
             693.42,957.37 670.86,959.85 646.50,965.75
             623.00,971.44 597.81,980.46 580.50,985.25
             545.25,995.00 490.00,1023.75 490.00,1023.75
             490.00,1023.75 456.44,1046.73 428.00,1063.75
             423.61,1066.38 418.45,1070.08 414.50,1072.25
             402.61,1078.77 393.19,1080.25 390.75,1079.75
             382.25,1078.00 450.25,1036.25 450.25,1036.25
             450.25,1036.25 503.00,987.50 503.00,987.50
             503.00,987.50 573.00,942.00 573.00,942.00
             573.00,942.00 715.00,850.75 715.00,850.75
             715.00,850.75 832.75,791.00 845.50,784.00
             858.25,777.00 915.75,745.75 918.75,740.00
             921.75,734.25 929.25,727.25 932.25,736.00
             935.25,744.75 940.50,756.00 939.75,762.75 Z" />
  <path id="thinDetails" class="thin" fill="none" stroke="black" stroke-width="1" d="M 1621.75,825.25
           C 1630.50,819.25 1628.42,806.94 1626.00,784.25
             1625.39,778.50 1627.65,772.95 1625.75,767.00
             1623.23,759.12 1616.07,751.18 1611.00,744.00
             1582.50,694.75 1619.75,677.50 1636.00,682.75
             1641.88,684.65 1645.71,695.12 1654.75,702.00
             1658.91,705.16 1658.08,714.73 1662.50,717.50
             1667.35,720.55 1671.80,719.52 1676.75,720.50
             1684.55,722.05 1696.25,731.00 1696.25,731.00M 1285.00,567.00
           C 1285.00,567.00 1272.59,572.25 1255.64,574.00
             1244.63,575.14 1231.76,572.10 1218.91,574.36
             1189.19,579.59 1160.00,589.00 1160.00,589.00
             1160.00,589.00 1173.82,583.69 1178.73,582.36
             1202.08,576.05 1258.55,562.36 1258.55,562.36
             1258.55,562.36 1255.11,561.88 1250.91,562.91
             1230.51,567.91 1171.67,583.67 1171.67,583.67
             1171.67,583.67 1205.34,574.06 1228.91,564.73
             1235.42,562.15 1239.47,557.75 1243.45,555.27
             1247.69,552.64 1251.06,554.91 1252.36,551.82
             1253.67,548.73 1254.33,541.33 1255.00,537.67
             1252.33,543.33 1241.20,544.55 1240.33,545.00
             1231.77,549.43 1198.33,567.00 1198.33,567.00M 1480.12,656.12
           C 1484.14,656.15 1485.47,658.86 1488.12,661.62
             1490.38,663.97 1494.21,666.24 1494.91,668.18
             1498.32,677.61 1491.93,689.92 1490.38,690.50
             1488.82,691.08 1490.12,670.78 1488.50,676.00
             1487.84,678.12 1487.92,683.99 1486.50,688.00
             1484.43,693.84 1480.20,698.99 1478.91,699.64
             1477.76,700.21 1471.03,701.67 1463.50,699.62
             1456.73,697.79 1449.28,692.44 1445.25,692.88
             1436.73,693.80 1430.24,687.11 1429.88,686.75
             1429.51,686.39 1425.75,684.62 1422.55,683.45
             1419.34,682.28 1407.53,681.89 1399.45,685.82
             1391.38,689.75 1357.50,705.88 1355.09,706.00
             1352.68,706.12 1381.75,692.12 1379.62,689.62
             1377.50,687.12 1329.88,711.25 1330.25,707.50
             1330.51,704.95 1361.41,692.62 1382.12,685.62
             1391.87,682.33 1395.62,681.38 1400.50,681.00
             1405.38,680.62 1418.50,673.88 1426.25,672.12
             1434.00,670.38 1442.00,674.50 1453.38,668.12
             1459.66,664.61 1470.99,656.06 1480.12,656.12 Z
           M 1533.33,453.67
           C 1534.67,426.67 1624.00,351.33 1672.33,365.67M 1882.00,566.00
           C 1882.00,566.00 1873.40,576.52 1856.00,586.00
             1838.33,595.63 1811.72,604.32 1793.33,616.33
             1768.72,632.42 1755.00,649.00 1755.00,649.00" />
  <path id="thickDetails" fill="none" stroke="black" stroke-width="1" d="M 1000.50,1102.50
           C 980.00,1105.00 971.99,1147.73 928.50,1154.50
             905.10,1158.14 867.14,1123.03 850.00,1126.00M 735.50,1075.00
           C 782.50,1074.50 792.50,1096.50 778.00,1105.00
             763.50,1113.50 756.00,1112.00 741.50,1120.00
             727.00,1128.00 697.00,1130.50 682.00,1124.00
             674.63,1120.81 669.80,1115.72 659.00,1113.00
             647.80,1110.18 635.51,1110.89 621.00,1117.00M 1479.50,669.50
           C 1476.72,663.93 1471.57,665.56 1467.00,667.00
             1455.97,670.47 1444.96,685.76 1454.50,690.00
             1468.00,696.00 1489.00,688.50 1479.50,669.50 Z
           M 1264.50,558.50
           C 1245.00,548.00 1273.00,516.50 1286.00,527.00
             1299.00,537.50 1284.00,569.00 1264.50,558.50 Z
           M 1201.67,1057.67
           C 1196.81,1044.85 1188.69,1024.38 1173.33,1010.33
             1165.91,1003.55 1154.41,1001.06 1145.33,996.33
             1126.80,986.68 1102.58,986.27 1087.67,986.00M 1512.00,1055.00
           C 1519.12,1053.88 1524.63,1055.63 1540.72,1056.42
             1546.67,1056.72 1554.08,1053.18 1560.50,1053.50
             1566.07,1053.78 1572.30,1055.67 1577.50,1056.25
             1585.57,1057.15 1592.19,1060.63 1597.50,1061.25
             1603.55,1061.96 1607.75,1059.75 1607.75,1059.75" />

  <script>
    //<![CDATA[ 
  (function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /*!
   * GSAP 3.4.2
   * https://greensock.com
   *
   * @license Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
      _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
      _bigNum = 1e8,
      _tinyNum = 1 / _bigNum,
      _2PI = Math.PI * 2,
      _HALF_PI = _2PI / 4,
      _gsID = 0,
      _sqrt = Math.sqrt,
      _cos = Math.cos,
      _sin = Math.sin,
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
      _isArray = Array.isArray,
      _strictNumExp = /(?:-?\.?\d|\.)+/gi,
      _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g,
      _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
      _complexStringNumExp = /[-+=.]*\d+(?:\.|e-|e)*\d*/gi,
      _parenthesesExp = /\(([^()]+)\)/i,
      _relExp = /[+-]=-?[\.\d]+/,
      _delimitedValueExp = /[#\-+.]*\b[a-z\d-=+%.]+/gi,
      _globalTimeline,
      _win,
      _coreInitted,
      _doc,
      _globals = {},
      _installScope = {},
      _coreReady,
      _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
      _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
      _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
      _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
      _emptyFunc = function _emptyFunc() {
    return 0;
  },
      _reservedProps = {},
      _lazyTweens = [],
      _lazyLookup = {},
      _lastRenderedFrame,
      _plugins = {},
      _effects = {},
      _nextGCFrame = 30,
      _harnessPlugins = [],
      _callbackNames = "",
      _harness = function _harness(targets) {
    var target = targets[0],
        harnessPlugin,
        i;

    if (!_isObject(target) && !_isFunction(target)) {
      targets = [targets];
    }

    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      i = _harnessPlugins.length;

      while (i-- && !_harnessPlugins[i].targetTest(target)) {}

      harnessPlugin = _harnessPlugins[i];
    }

    i = targets.length;

    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }

    return targets;
  },
      _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
      _getProperty = function _getProperty(target, property) {
    var currentValue = target[property];
    return _isFunction(currentValue) ? target[property]() : _isUndefined(currentValue) && target.getAttribute(property) || currentValue;
  },
      _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
      _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    var l = toFind.length,
        i = 0;

    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

    return i < l;
  },
      _parseVars = function _parseVars(params, type, parent) {
    var isLegacy = _isNumber(params[1]),
        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
        vars = params[varsIndex],
        irVars;

    if (isLegacy) {
      vars.duration = params[1];
    }

    vars.parent = parent;

    if (type) {
      irVars = vars;

      while (parent && !("immediateRender" in irVars)) {
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }

      vars.immediateRender = _isNotFalse(irVars.immediateRender);

      if (type < 2) {
        vars.runBackwards = 1;
      } else {
        vars.startAt = params[varsIndex - 1];
      }
    }

    return vars;
  },
      _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
        a = _lazyTweens.slice(0),
        i,
        tween;

    _lazyLookup = {};
    _lazyTweens.length = 0;

    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && _lazyRender();
    animation.render(time, suppressEvents, force);
    _lazyTweens.length && _lazyRender();
  },
      _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : value;
  },
      _passThrough = function _passThrough(p) {
    return p;
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
      _setKeyframeDefaults = function _setKeyframeDefaults(obj, defaults) {
    for (var p in defaults) {
      if (!(p in obj) && p !== "duration" && p !== "ease") {
        obj[p] = defaults[p];
      }
    }
  },
      _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }

    return base;
  },
      _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p];
    }

    return base;
  },
      _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
        p;

    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }

    return copy;
  },
      _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
        func = vars.keyframes ? _setKeyframeDefaults : _setDefaults;

    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }

    return vars;
  },
      _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
        match = i === a2.length;

    while (match && i-- && a1[i] === a2[i]) {}

    return i < 0;
  },
      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = parent[lastProp],
        t;

    if (sortBy) {
      t = child[sortBy];

      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }

    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }

    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }

    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = child._prev,
        next = child._next;

    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }

    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }

    child._next = child._prev = child.parent = null;
  },
      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
    child._act = 0;
  },
      _uncache = function _uncache(animation) {
    var a = animation;

    while (a) {
      a._dirty = 1;
      a = a.parent;
    }

    return animation;
  },
      _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;

    while (parent && parent.parent) {
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }

    return animation;
  },
      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
      _animationCycle = function _animationCycle(tTime, cycleDuration) {
    return (tTime /= cycleDuration) && ~~tTime === tTime ? ~~tTime - 1 : ~~tTime;
  },
      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
      _setEnd = function _setEnd(animation) {
    return animation._end = _round(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
      _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    var parent = animation._dp;

    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _round(animation._dp._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

      _setEnd(animation);

      parent._dirty || _uncache(parent);
    }

    return animation;
  },
      _postAddChecks = function _postAddChecks(timeline, child) {
    var t;

    if (child._time || child._initted && !child._dur) {
      t = _parentToChildTotalTime(timeline.rawTime(), child);

      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    }

    if (_uncache(timeline)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      if (timeline._dur < timeline.duration()) {
        t = timeline;

        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime);
          t = t._dp;
        }
      }

      timeline._zTime = -_tinyNum;
    }
  },
      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _round(position + child._delay);
    child._end = _round(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

    timeline._recent = child;
    skipChecks || _postAddChecks(timeline, child);
    return timeline;
  },
      _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
      _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
    _initTween(tween, totalTime);

    if (!tween._initted) {
      return 1;
    }

    if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);

      tween._lazy = [totalTime, suppressEvents];
      return 1;
    }
  },
      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
        ratio = totalTime < 0 || !totalTime && prevRatio && !tween._start && tween._zTime > _tinyNum && !tween._dp._lock || tween._ts < 0 || tween._dp._ts < 0 ? 0 : 1,
        repeatDelay = tween._rDelay,
        tTime = 0,
        pt,
        iteration,
        prevIteration;

    if (repeatDelay && tween._repeat) {
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      prevIteration = _animationCycle(tween._tTime, repeatDelay);

      if (iteration !== prevIteration) {
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }

    if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {
      return;
    }

    if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);
      suppressEvents || (suppressEvents = totalTime && !prevIteration);
      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      suppressEvents || _callback(tween, "onStart");
      pt = tween._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);

        if (!suppressEvents) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;

    if (time > prevTime) {
      child = animation._first;

      while (child && child._start <= time) {
        if (!child._dur && child.data === "isPause" && child._start > prevTime) {
          return child;
        }

        child = child._next;
      }
    } else {
      child = animation._last;

      while (child && child._start >= time) {
        if (!child._dur && child.data === "isPause" && child._start < prevTime) {
          return child;
        }

        child = child._prev;
      }
    }
  },
      _setDuration = function _setDuration(animation, duration, skipUncache) {
    var repeat = animation._repeat,
        dur = _round(duration) || 0;
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _round(dur * (repeat + 1) + animation._rDelay * repeat);

    if (animation._time > dur) {
      animation._time = dur;
      animation._tTime = Math.min(animation._tTime, animation._tDur);
    }

    !skipUncache && _uncache(animation.parent);
    animation.parent && _setEnd(animation);
    return animation;
  },
      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
      _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc
  },
      _parsePosition = function _parsePosition(animation, position) {
    var labels = animation.labels,
        recent = animation._recent || _zeroPosition,
        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
        i,
        offset;

    if (_isString(position) && (isNaN(position) || position in labels)) {
      i = position.charAt(0);

      if (i === "<" || i === ">") {
        return (i === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0);
      }

      i = position.indexOf("=");

      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }

      offset = +(position.charAt(i - 1) + position.substr(i + 1));
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1)) + offset : clippedDuration + offset;
    }

    return position == null ? clippedDuration : +position;
  },
      _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
      _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
      getUnit = function getUnit(value) {
    return (value + "").substr((parseFloat(value) + "").length);
  },
      clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
      _slice = [].slice,
      _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
      _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }

    return ar.forEach(function (value) {
      var _accumulator;

      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
      toArray = function toArray(value, leaveStrings) {
    return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call(_doc.querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
      shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
      distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }

    var vars = _isObject(v) ? v : {
      each: v
    },
        ease = _parseEase(vars.ease),
        from = vars.from || 0,
        base = parseFloat(vars.base) || 0,
        cache = {},
        isDecimal = from > 0 && from < 1,
        ratios = isNaN(from) || isDecimal,
        axis = vars.axis,
        ratioX = from,
        ratioY = from;

    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }

    return function (i, target, a) {
      var l = (a || vars).length,
          distances = cache[l],
          originX,
          originY,
          x,
          y,
          d,
          j,
          max,
          min,
          wrapAt;

      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

        if (!wrapAt) {
          max = -_bigNum;

          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

          wrapAt--;
        }

        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;

        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }

        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0;
        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }

      l = (distances[i] - distances.min) / distances.max || 0;
      return _round(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;
    };
  },
      _roundModifier = function _roundModifier(v) {
    var p = v < 1 ? Math.pow(10, (v + "").length - 2) : 1;
    return function (raw) {
      return Math.floor(Math.round(parseFloat(raw) / v) * v * p) / p + (_isNumber(raw) ? 0 : getUnit(raw));
    };
  },
      snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
        radius,
        is2D;

    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;

      if (snapTo.values) {
        snapTo = toArray(snapTo.values);

        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius;
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }

    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
          y = parseFloat(is2D ? raw.y : 0),
          min = _bigNum,
          closest = 0,
          i = snapTo.length,
          dx,
          dy;

      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }

        if (dx < min) {
          min = dx;
          closest = i;
        }
      }

      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
      random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min + Math.random() * (max - min)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
      pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }

    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
      unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
      normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
      _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
      wrap = function wrap(min, max, value) {
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
      wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
        total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
      _replaceRandom = function _replaceRandom(value) {
    var prev = 0,
        s = "",
        i,
        nums,
        end,
        isArray;

    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }

    return s + value.substr(prev, value.length - prev);
  },
      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
        outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
      interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };

    if (!func) {
      var isString = _isString(start),
          master = {},
          p,
          i,
          interpolators,
          l,
          il;

      progress === true && (mutate = 1) && (progress = null);

      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;

        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i]));
        }

        l--;

        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };

        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }

      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }

        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }

    return _conditionalReturn(progress, func);
  },
      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    var labels = timeline.labels,
        min = _bigNum,
        p,
        distance,
        label;

    for (p in labels) {
      distance = labels[p] - fromTime;

      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }

    return label;
  },
      _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
        callback = v[type],
        params,
        scope;

    if (!callback) {
      return;
    }

    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender();
    return params ? callback.apply(scope, params) : callback.call(scope);
  },
      _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);

    if (animation.progress() < 1) {
      _callback(animation, "onInterrupt");
    }

    return animation;
  },
      _quickTween,
      _createPlugin = function _createPlugin(config) {
    config = !config.name && config["default"] || config;

    var name = config.name,
        isFunc = _isFunction(config),
        Plugin = name && !isFunc && config.init ? function () {
      this._props = [];
    } : config,
        instanceDefaults = {
      init: _emptyFunc,
      render: _renderPropTweens,
      add: _addPropTween,
      kill: _killPropTweensOf,
      modifier: _addPluginModifier,
      rawVars: 0
    },
        statics = {
      targetTest: 0,
      get: 0,
      getSetter: _getSetter,
      aliases: {},
      register: 0
    };

    _wake();

    if (config !== Plugin) {
      if (_plugins[name]) {
        return;
      }

      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));

      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));

      _plugins[Plugin.prop = name] = Plugin;

      if (config.targetTest) {
        _harnessPlugins.push(Plugin);

        _reservedProps[name] = 1;
      }

      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin";
    }

    _addGlobal(name, Plugin);

    if (config.register) {
      config.register(gsap, Plugin, PropTween);
    }
  },
      _255 = 255,
      _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
      _hue = function _hue(h, m1, m2) {
    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
      splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
        r,
        g,
        b,
        h,
        s,
        l,
        max,
        min,
        d,
        wasHSL;

    if (!a) {
      if (v.substr(-1) === ",") {
        v = v.substr(0, v.length - 1);
      }

      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length === 4) {
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b;
        }

        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);

        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;

          if (a.length > 3) {
            a[3] *= 1;
          }

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }

      a = a.map(Number);
    }

    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;

      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }

      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }

    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
      _colorOrderData = function _colorOrderData(v) {
    var values = [],
        c = [],
        i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
      _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
        colors = (s + result).match(_colorExp),
        type = toHSL ? "hsla(" : "rgba(",
        i = 0,
        c,
        shell,
        d,
        l;

    if (!colors) {
      return s;
    }

    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });

    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;

      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }

    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }

    return result + shell[l];
  },
      _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b",
        p;

    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }

    return new RegExp(s + ")", "gi");
  }(),
      _hslExp = /hsl[a]?\(/,
      _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
        toHSL;
    _colorExp.lastIndex = 0;

    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));
      return true;
    }
  },
      _tickerActive,
      _ticker = function () {
    var _getTime = Date.now,
        _lagThreshold = 500,
        _adjustedLag = 33,
        _startTime = _getTime(),
        _lastUpdate = _startTime,
        _gap = 1 / 240,
        _nextTime = _gap,
        _listeners = [],
        _id,
        _req,
        _raf,
        _self,
        _tick = function _tick(v) {
      var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch;

      if (elapsed > _lagThreshold) {
        _startTime += elapsed - _adjustedLag;
      }

      _lastUpdate += elapsed;
      _self.time = (_lastUpdate - _startTime) / 1000;
      overlap = _self.time - _nextTime;

      if (overlap > 0 || manual) {
        _self.frame++;
        _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
        dispatch = 1;
      }

      manual || (_id = _req(_tick));
      dispatch && _listeners.forEach(function (l) {
        return l(_self.time, elapsed, _self.frame, v);
      });
    };

    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

            _raf = _win.requestAnimationFrame;
          }

          _id && _self.sleep();

          _req = _raf || function (f) {
            return setTimeout(f, (_nextTime - _self.time) * 1000 + 1 | 0);
          };

          _tickerActive = 1;

          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || 1 / _tinyNum;
        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
      },
      fps: function fps(_fps) {
        _gap = 1 / (_fps || 240);
        _nextTime = _self.time + _gap;
      },
      add: function add(callback) {
        _listeners.indexOf(callback) < 0 && _listeners.push(callback);

        _wake();
      },
      remove: function remove(callback) {
        var i;
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1);
      },
      _listeners: _listeners
    };
    return _self;
  }(),
      _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
      _easeMap = {},
      _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
      _quotesExp = /["']/g,
      _parseObjectInString = function _parseObjectInString(value) {
    var obj = {},
        split = value.substr(1, value.length - 3).split(":"),
        key = split[0],
        i = 1,
        l = split.length,
        index,
        val,
        parsedVal;

    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }

    return obj;
  },
      _configEaseFromString = function _configEaseFromString(name) {
    var split = (name + "").split("("),
        ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _parenthesesExp.exec(name)[1].split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
      _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
        ease;

    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }

      child = child._next;
    }
  },
      _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }

    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }

    var ease = {
      easeIn: easeIn,
      easeOut: easeOut,
      easeInOut: easeInOut
    },
        lowercaseName;

    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });

    return ease;
  },
      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
      _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
        easeOut = function easeOut(p) {
      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    p2 = _2PI / p2;

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };

    return ease;
  },
      _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }

    var easeOut = function easeOut(p) {
      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };

    return ease;
  };

  _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
    var power = i < 5 ? i + 1 : i;

    _insertEase(name + ",Power" + (power - 1), i ? function (p) {
      return Math.pow(p, power);
    } : function (p) {
      return p;
    }, function (p) {
      return 1 - Math.pow(1 - p, power);
    }, function (p) {
      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
    });
  });

  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

  _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

  (function (n, c) {
    var n1 = 1 / c,
        n2 = 2 * n1,
        n3 = 2.5 * n1,
        easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };

    _insertEase("Bounce", function (p) {
      return 1 - easeOut(1 - p);
    }, easeOut);
  })(7.5625, 2.75);

  _insertEase("Expo", function (p) {
    return p ? Math.pow(2, 10 * (p - 1)) : 0;
  });

  _insertEase("Circ", function (p) {
    return -(_sqrt(1 - p * p) - 1);
  });

  _insertEase("Sine", function (p) {
    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
  });

  _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
    config: function config(steps, immediateStart) {
      if (steps === void 0) {
        steps = 1;
      }

      var p1 = 1 / steps,
          p2 = steps + (immediateStart ? 0 : 1),
          p3 = immediateStart ? 1 : 0,
          max = 1 - _tinyNum;
      return function (p) {
        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
      };
    }
  };
  _defaults.ease = _easeMap["quad.out"];

  _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
    return _callbackNames += name + "," + name + "Params,";
  });

  var GSCache = function GSCache(target, harness) {
    this.id = _gsID++;
    target._gsap = this;
    this.target = target;
    this.harness = harness;
    this.get = harness ? harness.get : _getProperty;
    this.set = harness ? harness.getSetter : _getSetter;
  };
  var Animation = function () {
    function Animation(vars, time) {
      var parent = vars.parent || _globalTimeline;
      this.vars = vars;
      this._delay = +vars.delay || 0;

      if (this._repeat = vars.repeat || 0) {
        this._rDelay = vars.repeatDelay || 0;
        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
      }

      this._ts = 1;

      _setDuration(this, +vars.duration, 1);

      this.data = vars.data;
      _tickerActive || _ticker.wake();
      parent && _addToTimeline(parent, this, time || time === 0 ? time : parent._time, 1);
      vars.reversed && this.reverse();
      vars.paused && this.paused(true);
    }

    var _proto = Animation.prototype;

    _proto.delay = function delay(value) {
      if (value || value === 0) {
        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
        this._delay = value;
        return this;
      }

      return this._delay;
    };

    _proto.duration = function duration(value) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    };

    _proto.totalDuration = function totalDuration(value) {
      if (!arguments.length) {
        return this._tDur;
      }

      this._dirty = 0;
      var t = this._time / this._dur || 0;

      _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));

      return this._tTime ? _alignPlayhead(this, t * value + _elapsedCycleDuration(this)) : this;
    };

    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
      _wake();

      if (!arguments.length) {
        return this._tTime;
      }

      var parent = this._dp;

      if (parent && parent.smoothChildTiming && this._ts) {
        _alignPlayhead(this, _totalTime);

        while (parent.parent) {
          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
            parent.totalTime(parent._tTime, true);
          }

          parent = parent.parent;
        }

        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
          _addToTimeline(this._dp, this, this._start - this._delay);
        }
      }

      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted) {
        this._ts || (this._pTime = _totalTime);

        _lazySafeRender(this, _totalTime, suppressEvents);
      }

      return this;
    };

    _proto.time = function time(value, suppressEvents) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % this._dur || (value ? this._dur : 0), suppressEvents) : this._time;
    };

    _proto.totalProgress = function totalProgress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    };

    _proto.progress = function progress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    };

    _proto.iteration = function iteration(value, suppressEvents) {
      var cycleDuration = this.duration() + this._rDelay;

      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
    };

    _proto.timeScale = function timeScale(value) {
      if (!arguments.length) {
        return this._rts === -_tinyNum ? 0 : this._rts;
      }

      if (this._rts === value) {
        return this;
      }

      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;
      this._rts = +value || 0;
      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;
      return _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));
    };

    _proto.paused = function paused(value) {
      if (!arguments.length) {
        return this._ps;
      }

      if (this._ps !== value) {
        this._ps = value;

        if (value) {
          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());
          this._ts = this._act = 0;
        } else {
          _wake();

          this._ts = this._rts;
          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && (this._tTime -= _tinyNum) && Math.abs(this._zTime) !== _tinyNum);
        }
      }

      return this;
    };

    _proto.startTime = function startTime(value) {
      if (arguments.length) {
        this._start = value;
        var parent = this.parent || this._dp;
        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
        return this;
      }

      return this._start;
    };

    _proto.endTime = function endTime(includeRepeats) {
      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts);
    };

    _proto.rawTime = function rawTime(wrapRepeats) {
      var parent = this.parent || this._dp;
      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    };

    _proto.globalTime = function globalTime(rawTime) {
      var animation = this,
          time = arguments.length ? rawTime : animation.rawTime();

      while (animation) {
        time = animation._start + time / (animation._ts || 1);
        animation = animation._dp;
      }

      return time;
    };

    _proto.repeat = function repeat(value) {
      if (arguments.length) {
        this._repeat = value;
        return _onUpdateTotalDuration(this);
      }

      return this._repeat;
    };

    _proto.repeatDelay = function repeatDelay(value) {
      if (arguments.length) {
        this._rDelay = value;
        return _onUpdateTotalDuration(this);
      }

      return this._rDelay;
    };

    _proto.yoyo = function yoyo(value) {
      if (arguments.length) {
        this._yoyo = value;
        return this;
      }

      return this._yoyo;
    };

    _proto.seek = function seek(position, suppressEvents) {
      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
    };

    _proto.restart = function restart(includeDelay, suppressEvents) {
      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    };

    _proto.play = function play(from, suppressEvents) {
      if (from != null) {
        this.seek(from, suppressEvents);
      }

      return this.reversed(false).paused(false);
    };

    _proto.reverse = function reverse(from, suppressEvents) {
      if (from != null) {
        this.seek(from || this.totalDuration(), suppressEvents);
      }

      return this.reversed(true).paused(false);
    };

    _proto.pause = function pause(atTime, suppressEvents) {
      if (atTime != null) {
        this.seek(atTime, suppressEvents);
      }

      return this.paused(true);
    };

    _proto.resume = function resume() {
      return this.paused(false);
    };

    _proto.reversed = function reversed(value) {
      if (arguments.length) {
        if (!!value !== this.reversed()) {
          this.timeScale(-this._rts || (value ? -_tinyNum : 0));
        }

        return this;
      }

      return this._rts < 0;
    };

    _proto.invalidate = function invalidate() {
      this._initted = 0;
      this._zTime = -_tinyNum;
      return this;
    };

    _proto.isActive = function isActive() {
      var parent = this.parent || this._dp,
          start = this._start,
          rawTime;
      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
    };

    _proto.eventCallback = function eventCallback(type, callback, params) {
      var vars = this.vars;

      if (arguments.length > 1) {
        if (!callback) {
          delete vars[type];
        } else {
          vars[type] = callback;

          if (params) {
            vars[type + "Params"] = params;
          }

          if (type === "onUpdate") {
            this._onUpdate = callback;
          }
        }

        return this;
      }

      return vars[type];
    };

    _proto.then = function then(onFulfilled) {
      var self = this;
      return new Promise(function (resolve) {
        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
            _resolve = function _resolve() {
          var _then = self.then;
          self.then = null;
          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };

        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
          _resolve();
        } else {
          self._prom = _resolve;
        }
      });
    };

    _proto.kill = function kill() {
      _interrupt(this);
    };

    return Animation;
  }();

  _setDefaults(Animation.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -_tinyNum,
    _prom: 0,
    _ps: false,
    _rts: 1
  });

  var Timeline = function (_Animation) {
    _inheritsLoose(Timeline, _Animation);

    function Timeline(vars, time) {
      var _this;

      if (vars === void 0) {
        vars = {};
      }

      _this = _Animation.call(this, vars, time) || this;
      _this.labels = {};
      _this.smoothChildTiming = !!vars.smoothChildTiming;
      _this.autoRemoveChildren = !!vars.autoRemoveChildren;
      _this._sort = _isNotFalse(vars.sortChildren);
      _this.parent && _postAddChecks(_this.parent, _assertThisInitialized(_this));
      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
      return _this;
    }

    var _proto2 = Timeline.prototype;

    _proto2.to = function to(targets, vars, position) {
      new Tween(targets, _parseVars(arguments, 0, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));
      return this;
    };

    _proto2.from = function from(targets, vars, position) {
      new Tween(targets, _parseVars(arguments, 1, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));
      return this;
    };

    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
      new Tween(targets, _parseVars(arguments, 2, this), _parsePosition(this, _isNumber(fromVars) ? arguments[4] : position));
      return this;
    };

    _proto2.set = function set(targets, vars, position) {
      vars.duration = 0;
      vars.parent = this;
      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
      vars.immediateRender = !!vars.immediateRender;
      new Tween(targets, vars, _parsePosition(this, position), 1);
      return this;
    };

    _proto2.call = function call(callback, params, position) {
      return _addToTimeline(this, Tween.delayedCall(0, callback, params), _parsePosition(this, position));
    };

    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.duration = duration;
      vars.stagger = vars.stagger || stagger;
      vars.onComplete = onCompleteAll;
      vars.onCompleteParams = onCompleteAllParams;
      vars.parent = this;
      new Tween(targets, vars, _parsePosition(this, position));
      return this;
    };

    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.runBackwards = 1;
      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
      toVars.startAt = fromVars;
      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._dirty ? this.totalDuration() : this._tDur,
          dur = this._dur,
          tTime = this !== _globalTimeline && totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
          time,
          child,
          next,
          iteration,
          cycleDuration,
          prevPaused,
          pauseTween,
          timeScale,
          prevStart,
          prevIteration,
          yoyo,
          isYoyo;

      if (tTime !== this._tTime || force || crossingStart) {
        if (prevTime !== this._time && dur) {
          tTime += this._time - prevTime;
          totalTime += this._time - prevTime;
        }

        time = tTime;
        prevStart = this._start;
        timeScale = this._ts;
        prevPaused = !timeScale;

        if (crossingStart) {
          dur || (prevTime = this._zTime);
          (totalTime || !suppressEvents) && (this._zTime = totalTime);
        }

        if (this._repeat) {
          yoyo = this._yoyo;
          cycleDuration = dur + this._rDelay;
          time = _round(tTime % cycleDuration);

          if (time > dur || tDur === tTime) {
            time = dur;
          }

          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);
          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration);

          if (yoyo && iteration & 1) {
            time = dur - time;
            isYoyo = 1;
          }

          if (iteration !== prevIteration && !this._lock) {
            var rewinding = yoyo && prevIteration & 1,
                doesWrap = rewinding === (yoyo && iteration & 1);

            if (iteration < prevIteration) {
              rewinding = !rewinding;
            }

            prevTime = rewinding ? 0 : dur;
            this._lock = 1;
            this.render(prevTime || (isYoyo ? 0 : _round(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;

            if (!suppressEvents && this.parent) {
              _callback(this, "onRepeat");
            }

            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

            if (prevTime !== this._time || prevPaused !== !this._ts) {
              return this;
            }

            if (doesWrap) {
              this._lock = 2;
              prevTime = rewinding ? dur + 0.0001 : -0.0001;
              this.render(prevTime, true);
              this.vars.repeatRefresh && !isYoyo && this.invalidate();
            }

            this._lock = 0;

            if (!this._ts && !prevPaused) {
              return this;
            }

            _propagateYoyoEase(this, isYoyo);
          }
        }

        if (this._hasPause && !this._forcing && this._lock < 2) {
          pauseTween = _findNextPauseTween(this, _round(prevTime), _round(time));

          if (pauseTween) {
            tTime -= time - (time = pauseTween._start);
          }
        }

        this._tTime = tTime;
        this._time = time;
        this._act = !timeScale;

        if (!this._initted) {
          this._onUpdate = this.vars.onUpdate;
          this._initted = 1;
          this._zTime = totalTime;
        }

        if (!prevTime && time && !suppressEvents) {
          _callback(this, "onStart");
        }

        if (time >= prevTime && totalTime >= 0) {
          child = this._first;

          while (child) {
            next = child._next;

            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = -_tinyNum);
                break;
              }
            }

            child = next;
          }
        } else {
          child = this._last;
          var adjustedTime = totalTime < 0 ? totalTime : time;

          while (child) {
            next = child._prev;

            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);
                break;
              }
            }

            child = next;
          }
        }

        if (pauseTween && !suppressEvents) {
          this.pause();
          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

          if (this._ts) {
            this._start = prevStart;

            _setEnd(this);

            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
        if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto2.add = function add(child, position) {
      var _this2 = this;

      if (!_isNumber(position)) {
        position = _parsePosition(this, position);
      }

      if (!(child instanceof Animation)) {
        if (_isArray(child)) {
          child.forEach(function (obj) {
            return _this2.add(obj, position);
          });
          return _uncache(this);
        }

        if (_isString(child)) {
          return this.addLabel(child, position);
        }

        if (_isFunction(child)) {
          child = Tween.delayedCall(0, child);
        } else {
          return this;
        }
      }

      return this !== child ? _addToTimeline(this, child, position) : this;
    };

    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
      if (nested === void 0) {
        nested = true;
      }

      if (tweens === void 0) {
        tweens = true;
      }

      if (timelines === void 0) {
        timelines = true;
      }

      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = -_bigNum;
      }

      var a = [],
          child = this._first;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          if (child instanceof Tween) {
            tweens && a.push(child);
          } else {
            timelines && a.push(child);
            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
          }
        }

        child = child._next;
      }

      return a;
    };

    _proto2.getById = function getById(id) {
      var animations = this.getChildren(1, 1, 1),
          i = animations.length;

      while (i--) {
        if (animations[i].vars.id === id) {
          return animations[i];
        }
      }
    };

    _proto2.remove = function remove(child) {
      if (_isString(child)) {
        return this.removeLabel(child);
      }

      if (_isFunction(child)) {
        return this.killTweensOf(child);
      }

      _removeLinkedListItem(this, child);

      if (child === this._recent) {
        this._recent = this._last;
      }

      return _uncache(this);
    };

    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
      if (!arguments.length) {
        return this._tTime;
      }

      this._forcing = 1;

      if (!this._dp && this._ts) {
        this._start = _round(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
      }

      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

      this._forcing = 0;
      return this;
    };

    _proto2.addLabel = function addLabel(label, position) {
      this.labels[label] = _parsePosition(this, position);
      return this;
    };

    _proto2.removeLabel = function removeLabel(label) {
      delete this.labels[label];
      return this;
    };

    _proto2.addPause = function addPause(position, callback, params) {
      var t = Tween.delayedCall(0, callback || _emptyFunc, params);
      t.data = "isPause";
      this._hasPause = 1;
      return _addToTimeline(this, t, _parsePosition(this, position));
    };

    _proto2.removePause = function removePause(position) {
      var child = this._first;
      position = _parsePosition(this, position);

      while (child) {
        if (child._start === position && child.data === "isPause") {
          _removeFromParent(child);
        }

        child = child._next;
      }
    };

    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      var tweens = this.getTweensOf(targets, onlyActive),
          i = tweens.length;

      while (i--) {
        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
      }

      return this;
    };

    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
      var a = [],
          parsedTargets = toArray(targets),
          child = this._first,
          isGlobalTime = _isNumber(onlyActive),
          children;

      while (child) {
        if (child instanceof Tween) {
          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
            a.push(child);
          }
        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
          a.push.apply(a, children);
        }

        child = child._next;
      }

      return a;
    };

    _proto2.tweenTo = function tweenTo(position, vars) {
      vars = vars || {};

      var tl = this,
          endTime = _parsePosition(tl, position),
          _vars = vars,
          startAt = _vars.startAt,
          _onStart = _vars.onStart,
          onStartParams = _vars.onStartParams,
          tween = Tween.to(tl, _setDefaults(vars, {
        ease: "none",
        lazy: false,
        time: endTime,
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
          var duration = vars.duration || Math.abs((endTime - tl._time) / tl.timeScale());
          tween._dur !== duration && _setDuration(tween, duration).render(tween._time, true, true);
          _onStart && _onStart.apply(tween, onStartParams || []);
        }
      }));

      return tween;
    };

    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
      return this.tweenTo(toPosition, _setDefaults({
        startAt: {
          time: _parsePosition(this, fromPosition)
        }
      }, vars));
    };

    _proto2.recent = function recent() {
      return this._recent;
    };

    _proto2.nextLabel = function nextLabel(afterTime) {
      if (afterTime === void 0) {
        afterTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, afterTime));
    };

    _proto2.previousLabel = function previousLabel(beforeTime) {
      if (beforeTime === void 0) {
        beforeTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
    };

    _proto2.currentLabel = function currentLabel(value) {
      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
    };

    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = 0;
      }

      var child = this._first,
          labels = this.labels,
          p;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          child._start += amount;
        }

        child = child._next;
      }

      if (adjustLabels) {
        for (p in labels) {
          if (labels[p] >= ignoreBeforeTime) {
            labels[p] += amount;
          }
        }
      }

      return _uncache(this);
    };

    _proto2.invalidate = function invalidate() {
      var child = this._first;
      this._lock = 0;

      while (child) {
        child.invalidate();
        child = child._next;
      }

      return _Animation.prototype.invalidate.call(this);
    };

    _proto2.clear = function clear(includeLabels) {
      if (includeLabels === void 0) {
        includeLabels = true;
      }

      var child = this._first,
          next;

      while (child) {
        next = child._next;
        this.remove(child);
        child = next;
      }

      this._time = this._tTime = this._pTime = 0;

      if (includeLabels) {
        this.labels = {};
      }

      return _uncache(this);
    };

    _proto2.totalDuration = function totalDuration(value) {
      var max = 0,
          self = this,
          child = self._last,
          prevStart = _bigNum,
          prev,
          end,
          start,
          parent;

      if (arguments.length) {
        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
      }

      if (self._dirty) {
        parent = self.parent;

        while (child) {
          prev = child._prev;
          child._dirty && child.totalDuration();
          start = child._start;

          if (start > prevStart && self._sort && child._ts && !self._lock) {
            self._lock = 1;
            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
          } else {
            prevStart = start;
          }

          if (start < 0 && child._ts) {
            max -= start;

            if (!parent && !self._dp || parent && parent.smoothChildTiming) {
              self._start += start / self._ts;
              self._time -= start;
              self._tTime -= start;
            }

            self.shiftChildren(-start, false, -1e999);
            prevStart = 0;
          }

          end = _setEnd(child);

          if (end > max && child._ts) {
            max = end;
          }

          child = prev;
        }

        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1);

        self._dirty = 0;
      }

      return self._tDur;
    };

    Timeline.updateRoot = function updateRoot(time) {
      if (_globalTimeline._ts) {
        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

        _lastRenderedFrame = _ticker.frame;
      }

      if (_ticker.frame >= _nextGCFrame) {
        _nextGCFrame += _config.autoSleep || 120;
        var child = _globalTimeline._first;
        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }

          child || _ticker.sleep();
        }
      }
    };

    return Timeline;
  }(Animation);

  _setDefaults(Timeline.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
  });

  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
        index = 0,
        matchIndex = 0,
        result,
        startNums,
        color,
        endNum,
        chunk,
        startNum,
        hasRandom,
        a;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop);
      start = a[0];
      end = a[1];
    }

    startNums = start.match(_complexStringNumExp) || [];

    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }

      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0;
        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          s: startNum,
          c: endNum.charAt(1) === "=" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === "-" ? -1 : 1) : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : "";
    pt.fp = funcParam;

    if (_relExp.test(end) || hasRandom) {
      pt.e = 0;
    }

    this._pt = pt;
    return pt;
  },
      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
        parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
        pt;

    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (end.charAt(1) === "=") {
        end = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === "-" ? -1 : 1) + (getUnit(parsedStart) || 0);
      }
    }

    if (parsedStart !== end) {
      if (!isNaN(parsedStart * end)) {
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }

      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
      _processVars = function _processVars(vars, index, target, targets, tween) {
    if (_isFunction(vars)) {
      vars = _parseFuncOrString(vars, tween, index, target, targets);
    }

    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }

    var copy = {},
        p;

    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }

    return copy;
  },
      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;

    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];
        i = plugin._props.length;

        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }

    return plugin;
  },
      _overwritingTween,
      _initTween = function _initTween(tween, time) {
    var vars = tween.vars,
        ease = vars.ease,
        startAt = vars.startAt,
        immediateRender = vars.immediateRender,
        lazy = vars.lazy,
        onUpdate = vars.onUpdate,
        onUpdateParams = vars.onUpdateParams,
        callbackScope = vars.callbackScope,
        runBackwards = vars.runBackwards,
        yoyoEase = vars.yoyoEase,
        keyframes = vars.keyframes,
        autoRevert = vars.autoRevert,
        dur = tween._dur,
        prevStartAt = tween._startAt,
        targets = tween._targets,
        parent = tween.parent,
        fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,
        autoOverwrite = tween._overwrite === "auto",
        tl = tween.timeline,
        cleanVars,
        i,
        p,
        pt,
        target,
        hasPriority,
        gsData,
        harness,
        plugin,
        ptLookup,
        index,
        harnessVars,
        overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

    if (yoyoEase && tween._yoyo && !tween._repeat) {
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }

    if (!tl) {
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop];
      cleanVars = _copyExcluding(vars, _reservedProps);
      prevStartAt && prevStartAt.render(-1, true).kill();

      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt)));

        if (immediateRender) {
          if (time > 0) {
            !autoRevert && (tween._startAt = 0);
          } else if (dur && !(time < 0 && prevStartAt)) {
            tween._zTime = time;
            return;
          }
        }
      } else if (runBackwards && dur) {
        if (prevStartAt) {
          !autoRevert && (tween._startAt = 0);
        } else {
          time && (immediateRender = false);
          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            lazy: immediateRender && _isNotFalse(lazy),
            immediateRender: immediateRender,
            stagger: 0,
            parent: parent
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars);

          _removeFromParent(tween._startAt = Tween.set(targets, p));

          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum);
          } else if (!time) {
            return;
          }
        }
      }

      tween._pt = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;

      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyRender();
        index = fullTargets === targets ? i : fullTargets.indexOf(target);

        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });

          plugin.priority && (hasPriority = 1);
        }

        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }

        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;

          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(0));

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }

        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }

      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween);
    }

    tween._from = !tl && !!vars.runBackwards;
    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten;
  },
      _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
        propertyAliases = harness && harness.aliases,
        copy,
        p,
        i,
        aliases;

    if (!propertyAliases) {
      return vars;
    }

    copy = _merge({}, vars);

    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;

        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }

    return copy;
  },
      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
      _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",
      _staggerPropsToSkip = (_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger").split(",");

  var Tween = function (_Animation2) {
    _inheritsLoose(Tween, _Animation2);

    function Tween(targets, vars, time, skipInherit) {
      var _this3;

      if (typeof vars === "number") {
        time.duration = vars;
        vars = time;
        time = null;
      }

      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars), time) || this;
      var _this3$vars = _this3.vars,
          duration = _this3$vars.duration,
          delay = _this3$vars.delay,
          immediateRender = _this3$vars.immediateRender,
          stagger = _this3$vars.stagger,
          overwrite = _this3$vars.overwrite,
          keyframes = _this3$vars.keyframes,
          defaults = _this3$vars.defaults,
          scrollTrigger = _this3$vars.scrollTrigger,
          yoyoEase = _this3$vars.yoyoEase,
          parent = _this3.parent,
          parsedTargets = (_isArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
          tl,
          i,
          copy,
          l,
          p,
          curTarget,
          staggerFunc,
          staggerVarsToMerge;
      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
      _this3._ptLookup = [];
      _this3._overwrite = overwrite;

      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        vars = _this3.vars;
        tl = _this3.timeline = new Timeline({
          data: "nested",
          defaults: defaults || {}
        });
        tl.kill();
        tl.parent = _assertThisInitialized(_this3);

        if (keyframes) {
          _setDefaults(tl.vars.defaults, {
            ease: "none"
          });

          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
        } else {
          l = parsedTargets.length;
          staggerFunc = stagger ? distribute(stagger) : _emptyFunc;

          if (_isObject(stagger)) {
            for (p in stagger) {
              if (~_staggerTweenProps.indexOf(p)) {
                staggerVarsToMerge || (staggerVarsToMerge = {});
                staggerVarsToMerge[p] = stagger[p];
              }
            }
          }

          for (i = 0; i < l; i++) {
            copy = {};

            for (p in vars) {
              if (_staggerPropsToSkip.indexOf(p) < 0) {
                copy[p] = vars[p];
              }
            }

            copy.stagger = 0;
            yoyoEase && (copy.yoyoEase = yoyoEase);
            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
            curTarget = parsedTargets[i];
            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

            if (!stagger && l === 1 && copy.delay) {
              _this3._delay = delay = copy.delay;
              _this3._start += delay;
              copy.delay = 0;
            }

            tl.to(curTarget, copy, staggerFunc(i, curTarget, parsedTargets));
          }

          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;
        }

        duration || _this3.duration(duration = tl.duration());
      } else {
        _this3.timeline = 0;
      }

      if (overwrite === true) {
        _overwritingTween = _assertThisInitialized(_this3);

        _globalTimeline.killTweensOf(parsedTargets);

        _overwritingTween = 0;
      }

      parent && _postAddChecks(parent, _assertThisInitialized(_this3));

      if (immediateRender || !duration && !keyframes && _this3._start === _round(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
        _this3._tTime = -_tinyNum;

        _this3.render(Math.max(0, -delay));
      }

      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
      return _this3;
    }

    var _proto3 = Tween.prototype;

    _proto3.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._tDur,
          dur = this._dur,
          tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          time,
          pt,
          iteration,
          cycleDuration,
          prevIteration,
          isYoyo,
          ratio,
          timeline,
          yoyoEase;

      if (!dur) {
        _renderZeroDurationTween(this, totalTime, suppressEvents, force);
      } else if (tTime !== this._tTime || !totalTime || force || this._startAt && this._zTime < 0 !== totalTime < 0) {
        time = tTime;
        timeline = this.timeline;

        if (this._repeat) {
          cycleDuration = dur + this._rDelay;
          time = _round(tTime % cycleDuration);

          if (time > dur || tDur === tTime) {
            time = dur;
          }

          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          isYoyo = this._yoyo && iteration & 1;

          if (isYoyo) {
            yoyoEase = this._yEase;
            time = dur - time;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);

          if (time === prevTime && !force && this._initted) {
            return this;
          }

          if (iteration !== prevIteration) {
            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);

            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
              this._lock = force = 1;
              this.render(_round(cycleDuration * iteration), true).invalidate()._lock = 0;
            }
          }
        }

        if (!this._initted) {
          if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {
            this._tTime = 0;
            return this;
          }

          if (dur !== this._dur) {
            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._tTime = tTime;
        this._time = time;

        if (!this._act && this._ts) {
          this._act = 1;
          this._lazy = 0;
        }

        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

        if (this._from) {
          this.ratio = ratio = 1 - ratio;
        }

        time && !prevTime && !suppressEvents && _callback(this, "onStart");
        pt = this._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * ratio, suppressEvents, force) || this._startAt && (this._zTime = totalTime);

        if (this._onUpdate && !suppressEvents) {
          if (totalTime < 0 && this._startAt) {
            this._startAt.render(totalTime, true, force);
          }

          _callback(this, "onUpdate");
        }

        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
          totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);
          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto3.targets = function targets() {
      return this._targets;
    };

    _proto3.invalidate = function invalidate() {
      this._pt = this._op = this._startAt = this._onUpdate = this._act = this._lazy = 0;
      this._ptLookup = [];
      this.timeline && this.timeline.invalidate();
      return _Animation2.prototype.invalidate.call(this);
    };

    _proto3.kill = function kill(targets, vars) {
      if (vars === void 0) {
        vars = "all";
      }

      if (!targets && (!vars || vars === "all")) {
        this._lazy = 0;

        if (this.parent) {
          return _interrupt(this);
        }
      }

      if (this.timeline) {
        var tDur = this.timeline.totalDuration();
        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);
        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur);
        return this;
      }

      var parsedTargets = this._targets,
          killingTargets = targets ? toArray(targets) : parsedTargets,
          propTweenLookup = this._ptLookup,
          firstPT = this._pt,
          overwrittenProps,
          curLookup,
          curOverwriteProps,
          props,
          p,
          pt,
          i;

      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
        vars === "all" && (this._pt = 0);
        return _interrupt(this);
      }

      overwrittenProps = this._op = this._op || [];

      if (vars !== "all") {
        if (_isString(vars)) {
          p = {};

          _forEachName(vars, function (name) {
            return p[name] = 1;
          });

          vars = p;
        }

        vars = _addAliasesToVars(parsedTargets, vars);
      }

      i = parsedTargets.length;

      while (i--) {
        if (~killingTargets.indexOf(parsedTargets[i])) {
          curLookup = propTweenLookup[i];

          if (vars === "all") {
            overwrittenProps[i] = vars;
            props = curLookup;
            curOverwriteProps = {};
          } else {
            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
            props = vars;
          }

          for (p in props) {
            pt = curLookup && curLookup[p];

            if (pt) {
              if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                _removeLinkedListItem(this, pt, "_pt");
              }

              delete curLookup[p];
            }

            if (curOverwriteProps !== "all") {
              curOverwriteProps[p] = 1;
            }
          }
        }
      }

      this._initted && !this._pt && firstPT && _interrupt(this);
      return this;
    };

    Tween.to = function to(targets, vars) {
      return new Tween(targets, vars, arguments[2]);
    };

    Tween.from = function from(targets, vars) {
      return new Tween(targets, _parseVars(arguments, 1));
    };

    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
      return new Tween(callback, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: delay,
        onComplete: callback,
        onReverseComplete: callback,
        onCompleteParams: params,
        onReverseCompleteParams: params,
        callbackScope: scope
      });
    };

    Tween.fromTo = function fromTo(targets, fromVars, toVars) {
      return new Tween(targets, _parseVars(arguments, 2));
    };

    Tween.set = function set(targets, vars) {
      vars.duration = 0;
      vars.repeatDelay || (vars.repeat = 0);
      return new Tween(targets, vars);
    };

    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      return _globalTimeline.killTweensOf(targets, props, onlyActive);
    };

    return Tween;
  }(Animation);

  _setDefaults(Tween.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
  });

  _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
    Tween[name] = function () {
      var tl = new Timeline(),
          params = _slice.call(arguments, 0);

      params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
      return tl[name].apply(tl, params);
    };
  });

  var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
      _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
      _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
      _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
      _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000, data);
  },
      _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
      _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
        s = "";

    if (!ratio && data.b) {
      s = data.b;
    } else if (ratio === 1 && data.e) {
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;
        pt = pt._next;
      }

      s += data.c;
    }

    data.set(data.t, data.p, s, data);
  },
      _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
        next;

    while (pt) {
      next = pt._next;

      if (pt.p === property) {
        pt.modifier(modifier, tween, target);
      }

      pt = next;
    }
  },
      _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
        hasNonDependentRemaining,
        next;

    while (pt) {
      next = pt._next;

      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }

      pt = next;
    }

    return !hasNonDependentRemaining;
  },
      _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
        next,
        pt2,
        first,
        last;

    while (pt) {
      next = pt._next;
      pt2 = first;

      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }

      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }

      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }

      pt = next;
    }

    parent._pt = first;
  };

  var PropTween = function () {
    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
      this.t = target;
      this.s = start;
      this.c = change;
      this.p = prop;
      this.r = renderer || _renderPlain;
      this.d = data || this;
      this.set = setter || _setterPlain;
      this.pr = priority || 0;
      this._next = next;

      if (next) {
        next._prev = this;
      }
    }

    var _proto4 = PropTween.prototype;

    _proto4.modifier = function modifier(func, tween, target) {
      this.mSet = this.mSet || this.set;
      this.set = _setterWithModifier;
      this.m = func;
      this.mt = target;
      this.tween = tween;
    };

    return PropTween;
  }();

  _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
    return _reservedProps[name] = 1;
  });

  _globals.TweenMax = _globals.TweenLite = Tween;
  _globals.TimelineLite = _globals.TimelineMax = Timeline;
  _globalTimeline = new Timeline({
    sortChildren: false,
    defaults: _defaults,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
  });
  _config.stringFilter = _colorStringFilter;
  var _gsap = {
    registerPlugin: function registerPlugin() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      args.forEach(function (config) {
        return _createPlugin(config);
      });
    },
    timeline: function timeline(vars) {
      return new Timeline(vars);
    },
    getTweensOf: function getTweensOf(targets, onlyActive) {
      return _globalTimeline.getTweensOf(targets, onlyActive);
    },
    getProperty: function getProperty(target, property, unit, uncache) {
      if (_isString(target)) {
        target = toArray(target)[0];
      }

      var getter = _getCache(target || {}).get,
          format = unit ? _passThrough : _numericIfPossible;

      if (unit === "native") {
        unit = "";
      }

      return !target ? target : !property ? function (property, unit, uncache) {
        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    },
    quickSetter: function quickSetter(target, property, unit) {
      target = toArray(target);

      if (target.length > 1) {
        var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
            l = setters.length;
        return function (value) {
          var i = l;

          while (i--) {
            setters[i](value);
          }
        };
      }

      target = target[0] || {};

      var Plugin = _plugins[property],
          cache = _getCache(target),
          p = cache.harness && (cache.harness.aliases || {})[property] || property,
          setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);

      return Plugin ? setter : function (value) {
        return setter(target, p, unit ? value + unit : value, cache, 1);
      };
    },
    isTweening: function isTweening(targets) {
      return _globalTimeline.getTweensOf(targets, true).length > 0;
    },
    defaults: function defaults(value) {
      if (value && value.ease) {
        value.ease = _parseEase(value.ease, _defaults.ease);
      }

      return _mergeDeep(_defaults, value || {});
    },
    config: function config(value) {
      return _mergeDeep(_config, value || {});
    },
    registerEffect: function registerEffect(_ref) {
      var name = _ref.name,
          effect = _ref.effect,
          plugins = _ref.plugins,
          defaults = _ref.defaults,
          extendTimeline = _ref.extendTimeline;
      (plugins || "").split(",").forEach(function (pluginName) {
        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
      });

      _effects[name] = function (targets, vars, tl) {
        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
      };

      if (extendTimeline) {
        Timeline.prototype[name] = function (targets, vars, position) {
          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
        };
      }
    },
    registerEase: function registerEase(name, ease) {
      _easeMap[name] = _parseEase(ease);
    },
    parseEase: function parseEase(ease, defaultEase) {
      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
    },
    getById: function getById(id) {
      return _globalTimeline.getById(id);
    },
    exportRoot: function exportRoot(vars, includeDelayedCalls) {
      if (vars === void 0) {
        vars = {};
      }

      var tl = new Timeline(vars),
          child,
          next;
      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

      _globalTimeline.remove(tl);

      tl._dp = 0;
      tl._time = tl._tTime = _globalTimeline._time;
      child = _globalTimeline._first;

      while (child) {
        next = child._next;

        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
          _addToTimeline(tl, child, child._start - child._delay);
        }

        child = next;
      }

      _addToTimeline(_globalTimeline, tl, 0);

      return tl;
    },
    utils: {
      wrap: wrap,
      wrapYoyo: wrapYoyo,
      distribute: distribute,
      random: random,
      snap: snap,
      normalize: normalize,
      getUnit: getUnit,
      clamp: clamp,
      splitColor: splitColor,
      toArray: toArray,
      mapRange: mapRange,
      pipe: pipe,
      unitize: unitize,
      interpolate: interpolate,
      shuffle: shuffle
    },
    install: _install,
    effects: _effects,
    ticker: _ticker,
    updateRoot: Timeline.updateRoot,
    plugins: _plugins,
    globalTimeline: _globalTimeline,
    core: {
      PropTween: PropTween,
      globals: _addGlobal,
      Tween: Tween,
      Timeline: Timeline,
      Animation: Animation,
      getCache: _getCache,
      _removeLinkedListItem: _removeLinkedListItem
    }
  };

  _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
    return _gsap[name] = Tween[name];
  });

  _ticker.add(Timeline.updateRoot);

  _quickTween = _gsap.to({}, {
    duration: 0
  });

  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;

    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }

    return pt;
  },
      _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
        p,
        i,
        pt;

    for (p in modifiers) {
      i = targets.length;

      while (i--) {
        pt = tween._ptLookup[i][p];

        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            pt = _getPluginPropTween(pt, p);
          }

          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;

          if (_isString(vars)) {
            temp = {};

            _forEachName(vars, function (name) {
              return temp[name] = 1;
            });

            vars = temp;
          }

          if (modifier) {
            temp = {};

            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }

            vars = temp;
          }

          _addModifiers(tween, vars);
        };
      }
    };
  };

  var gsap = _gsap.registerPlugin({
    name: "attr",
    init: function init(target, vars, tween, index, targets) {
      var p, pt;

      for (p in vars) {
        pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);
        pt && (pt.op = p);

        this._props.push(p);
      }
    }
  }, {
    name: "endArray",
    init: function init(target, value) {
      var i = value.length;

      while (i--) {
        this.add(target, i, target[i] || 0, value[i]);
      }
    }
  }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap;
  Tween.version = Timeline.version = gsap.version = "3.4.2";
  _coreReady = 1;

  if (_windowExists()) {
    _wake();
  }

  var Power0 = _easeMap.Power0,
      Power1 = _easeMap.Power1,
      Power2 = _easeMap.Power2,
      Power3 = _easeMap.Power3,
      Power4 = _easeMap.Power4,
      Linear = _easeMap.Linear,
      Quad = _easeMap.Quad,
      Cubic = _easeMap.Cubic,
      Quart = _easeMap.Quart,
      Quint = _easeMap.Quint,
      Strong = _easeMap.Strong,
      Elastic = _easeMap.Elastic,
      Back = _easeMap.Back,
      SteppedEase = _easeMap.SteppedEase,
      Bounce = _easeMap.Bounce,
      Sine = _easeMap.Sine,
      Expo = _easeMap.Expo,
      Circ = _easeMap.Circ;

  var _win$1,
      _doc$1,
      _docElement,
      _pluginInitted,
      _tempDiv,
      _tempDivStyler,
      _recentSetterPlugin,
      _windowExists$1 = function _windowExists() {
    return typeof window !== "undefined";
  },
      _transformProps = {},
      _RAD2DEG = 180 / Math.PI,
      _DEG2RAD = Math.PI / 180,
      _atan2 = Math.atan2,
      _bigNum$1 = 1e8,
      _capsExp = /([A-Z])/g,
      _horizontalExp = /(?:left|right|width|margin|padding|x)/i,
      _complexExp = /[\s,\(]\S/,
      _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
      _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
      _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
      _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
      _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
      _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
      _transformProp = "transform",
      _transformOriginProp = _transformProp + "Origin",
      _supports3D,
      _createElement = function _createElement(type, ns) {
    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$1.createElement(type);
    return e.style ? e : _doc$1.createElement(type);
  },
      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || "";
  },
      _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
        s = e.style,
        i = 5;

    if (property in s && !preferPrefix) {
      return property;
    }

    property = property.charAt(0).toUpperCase() + property.substr(1);

    while (i-- && !(_prefixes[i] + property in s)) {}

    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
      _initCore = function _initCore() {
    if (_windowExists$1() && window.document) {
      _win$1 = window;
      _doc$1 = _win$1.document;
      _docElement = _doc$1.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0";
      _supports3D = !!_checkPropPrefix("perspective");
      _pluginInitted = 1;
    }
  },
      _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
        oldParent = this.parentNode,
        oldSibling = this.nextSibling,
        oldCSS = this.style.cssText,
        bbox;

    _docElement.appendChild(svg);

    svg.appendChild(this);
    this.style.display = "block";

    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox;
        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }

    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }

    _docElement.removeChild(svg);

    this.style.cssText = oldCSS;
    return bbox;
  },
      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;

    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
      _getBBox = function _getBBox(target) {
    var bounds;

    try {
      bounds = target.getBBox();
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }

    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
      _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
      _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;

      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }

      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          property = "-" + property;
        }

        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        style.removeAttribute(property);
      }
    }
  },
      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;

    plugin._props.push(property);

    return pt;
  },
      _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
      _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
        curUnit = (value + "").trim().substr((curValue + "").length) || "px",
        style = _tempDiv.style,
        horizontal = _horizontalExp.test(property),
        isRootSVG = target.tagName.toLowerCase() === "svg",
        measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
        amount = 100,
        toPixels = unit === "px",
        toPercent = unit === "%",
        px,
        parent,
        cache,
        isSVG;

    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }

    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);

    if (toPercent && (_transformProps[property] || ~property.indexOf("adius"))) {
      return _round(curValue / (isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty]) * amount);
    }

    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }

    if (!parent || parent === _doc$1 || !parent.appendChild) {
      parent = _doc$1.body;
    }

    cache = parent._gsap;

    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {
      return _round(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static");
      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";

      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }

    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
      _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();

    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];

      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }

    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];

      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0);
      }
    }

    return unit && !~(value + "").indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    if (!start || start === "none") {
      var p = _checkPropPrefix(prop, target, 1),
          s = p && _getComputedProperty(target, p, 1);

      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor");
      }
    }

    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
        index = 0,
        matchIndex = 0,
        a,
        result,
        startValues,
        startNum,
        color,
        startValue,
        endValue,
        endNum,
        chunk,
        endUnit,
        startUnit,
        relative,
        endValues;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }

    a = [start, end];

    _colorStringFilter(a);

    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];

    if (endValues.length) {
      while (result = _numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }

        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          relative = endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

          if (relative) {
            endValue = endValue.substr(2);
          }

          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;

          if (!endUnit) {
            endUnit = endUnit || _config.units[prop] || startUnit;

            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }

          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          }

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            s: startNum,
            c: relative ? relative * endNum : endNum - startNum,
            m: color && color < 4 ? Math.round : 0
          };
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : "";
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }

    if (_relExp.test(end)) {
      pt.e = 0;
    }

    this._pt = pt;
    return pt;
  },
      _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
        x = split[0],
        y = split[1] || "50%";

    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      value = x;
      x = y;
      y = value;
    }

    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
      _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
          style = target.style,
          props = data.u,
          cache = target._gsap,
          prop,
          clearTransforms,
          i;

      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;

        while (--i > -1) {
          prop = props[i];

          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }

          _removeProperty(target, prop);
        }
      }

      if (clearTransforms) {
        _removeProperty(target, _transformProp);

        if (cache) {
          cache.svg && target.removeAttribute("transform");

          _parseTransform(target, 1);

          cache.uncache = 1;
        }
      }
    }
  },
      _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;

        plugin._props.push(property);

        return 1;
      }
    }
  },
      _identity2DMatrix = [1, 0, 0, 1, 0, 0],
      _rotationalProperties = {},
      _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);

    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
  },
      _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
        style = target.style,
        matrix = _getComputedTransformMatrixAsArray(target),
        parent,
        nextSibling,
        temp,
        addedToDOM;

    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix;
      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;

      if (!parent || !target.offsetParent) {
        addedToDOM = 1;
        nextSibling = target.nextSibling;

        _docElement.appendChild(target);
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");

      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }

    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
        matrix = matrixArray || _getMatrix(target, true),
        xOriginOld = cache.xOrigin || 0,
        yOriginOld = cache.yOrigin || 0,
        xOffsetOld = cache.xOffset || 0,
        yOffsetOld = cache.yOffset || 0,
        a = matrix[0],
        b = matrix[1],
        c = matrix[2],
        d = matrix[3],
        tx = matrix[4],
        ty = matrix[5],
        originSplit = origin.split(" "),
        xOrigin = parseFloat(originSplit[0]) || 0,
        yOrigin = parseFloat(originSplit[1]) || 0,
        bounds,
        determinant,
        x,
        y;

    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }

    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }

    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px";

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }

    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
      _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);

    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }

    var style = target.style,
        invertedScaleX = cache.scaleX < 0,
        px = "px",
        deg = "deg",
        origin = _getComputedProperty(target, _transformOriginProp) || "0",
        x,
        y,
        z,
        scaleX,
        scaleY,
        rotation,
        rotationX,
        rotationY,
        skewX,
        skewY,
        perspective,
        xOrigin,
        yOrigin,
        matrix,
        angle,
        cos,
        sin,
        a,
        b,
        c,
        d,
        a12,
        a22,
        t1,
        t2,
        t3,
        a13,
        a23,
        a33,
        a42,
        a43,
        a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    matrix = _getMatrix(target, cache.svg);

    if (cache.svg) {
      t1 = !cache.uncache && target.getAttribute("data-svg-origin");

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }

    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;

    if (matrix !== _identity2DMatrix) {
      a = matrix[0];
      b = matrix[1];
      c = matrix[2];
      d = matrix[3];
      x = a12 = matrix[4];
      y = a22 = matrix[5];

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;
        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.cos(skewX * _DEG2RAD));

        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        }
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        }

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        }

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }

        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }

        scaleX = _round(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }

      if (cache.svg) {
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }

    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }

    cache.x = ((cache.xPercent = x && Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0) ? 0 : x) + px;
    cache.y = ((cache.yPercent = y && Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0) ? 0 : y) + px;
    cache.z = z + px;
    cache.scaleX = _round(scaleX);
    cache.scaleY = _round(scaleY);
    cache.rotation = _round(rotation) + deg;
    cache.rotationX = _round(rotationX) + deg;
    cache.rotationY = _round(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;

    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }

    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
      _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
      _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;

    _renderCSSTransforms(ratio, cache);
  },
      _zeroDeg = "0deg",
      _zeroPx = "0px",
      _endParenthesis = ") ",
      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
        xPercent = _ref.xPercent,
        yPercent = _ref.yPercent,
        x = _ref.x,
        y = _ref.y,
        z = _ref.z,
        rotation = _ref.rotation,
        rotationY = _ref.rotationY,
        rotationX = _ref.rotationX,
        skewX = _ref.skewX,
        skewY = _ref.skewY,
        scaleX = _ref.scaleX,
        scaleY = _ref.scaleY,
        transformPerspective = _ref.transformPerspective,
        force3D = _ref.force3D,
        target = _ref.target,
        zOrigin = _ref.zOrigin,
        transforms = "",
        use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true;

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
          a13 = Math.sin(angle),
          a33 = Math.cos(angle),
          cos;

      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }

    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }

    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }

    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }

    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }

    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }

    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }

    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }

    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }

    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
        xPercent = _ref2.xPercent,
        yPercent = _ref2.yPercent,
        x = _ref2.x,
        y = _ref2.y,
        rotation = _ref2.rotation,
        skewX = _ref2.skewX,
        skewY = _ref2.skewY,
        scaleX = _ref2.scaleX,
        scaleY = _ref2.scaleY,
        target = _ref2.target,
        xOrigin = _ref2.xOrigin,
        yOrigin = _ref2.yOrigin,
        xOffset = _ref2.xOffset,
        yOffset = _ref2.yOffset,
        forceCSS = _ref2.forceCSS,
        tx = parseFloat(x),
        ty = parseFloat(y),
        a11,
        a21,
        a12,
        a22,
        temp;

    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);

    if (skewY) {
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }

    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;

      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;

        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }

      a11 = _round(a11);
      a21 = _round(a21);
      a12 = _round(a12);
      a22 = _round(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }

    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }

    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }

    if (xPercent || yPercent) {
      temp = target.getBBox();
      tx = _round(tx + xPercent / 100 * temp.width);
      ty = _round(ty + yPercent / 100 * temp.height);
    }

    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);

    if (forceCSS) {
      target.style[_transformProp] = temp;
    }
  },
      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {
    var cap = 360,
        isString = _isString(endValue),
        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
        change = relative ? endNum * relative : endNum - startNum,
        finalValue = startNum + change + "deg",
        direction,
        pt;

    if (isString) {
      direction = endValue.split("_")[1];

      if (direction === "short") {
        change %= cap;

        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }

      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      }
    }

    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";

    plugin._props.push(property);

    return pt;
  },
      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    var style = _tempDivStyler.style,
        startCache = target._gsap,
        exclude = "perspective,force3D,transformOrigin,svgOrigin",
        endCache,
        p,
        startValue,
        endValue,
        startNum,
        endNum,
        startUnit,
        endUnit;
    style.cssText = getComputedStyle(target).cssText + ";position:absolute;display:block;";
    style[_transformProp] = transforms;

    _doc$1.body.appendChild(_tempDivStyler);

    endCache = _parseTransform(_tempDivStyler, 1);

    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];

      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween(plugin._pt, startCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;

        plugin._props.push(p);
      }
    }

    _doc$1.body.removeChild(_tempDivStyler);
  };

  _forEachName("padding,margin,Width,Radius", function (name, index) {
    var t = "Top",
        r = "Right",
        b = "Bottom",
        l = "Left",
        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });

    _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
      var a, vars;

      if (arguments.length < 4) {
        a = props.map(function (prop) {
          return _get(plugin, prop, property);
        });
        vars = a.join(" ");
        return vars.split(a[0]).length === 5 ? a[0] : vars;
      }

      a = (endValue + "").split(" ");
      vars = {};
      props.forEach(function (prop, i) {
        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
      });
      plugin.init(target, vars, tween);
    };
  });

  var CSSPlugin = {
    name: "css",
    register: _initCore,
    targetTest: function targetTest(target) {
      return target.style && target.nodeType;
    },
    init: function init(target, vars, tween, index, targets) {
      var props = this._props,
          style = target.style,
          startValue,
          endValue,
          endNum,
          startNum,
          type,
          specialProp,
          p,
          startUnit,
          endUnit,
          relative,
          isTransformRelated,
          transformPropTween,
          cache,
          smooth,
          hasPriority;

      if (!_pluginInitted) {
        _initCore();
      }

      for (p in vars) {
        if (p === "autoRound") {
          continue;
        }

        endValue = vars[p];

        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
          continue;
        }

        type = typeof endValue;
        specialProp = _specialProps[p];

        if (type === "function") {
          endValue = endValue.call(tween, index, target, targets);
          type = typeof endValue;
        }

        if (type === "string" && ~endValue.indexOf("random(")) {
          endValue = _replaceRandom(endValue);
        }

        if (specialProp) {
          if (specialProp(this, target, p, endValue, tween)) {
            hasPriority = 1;
          }
        } else if (p.substr(0, 2) === "--") {
          this.add(style, "setProperty", getComputedStyle(target).getPropertyValue(p) + "", endValue + "", index, targets, 0, 0, p);
        } else {
          startValue = _get(target, p);
          startNum = parseFloat(startValue);
          relative = type === "string" && endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

          if (relative) {
            endValue = endValue.substr(2);
          }

          endNum = parseFloat(endValue);

          if (p in _propertyAliases) {
            if (p === "autoAlpha") {
              if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                startNum = 0;
              }

              _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
            }

            if (p !== "scale" && p !== "transform") {
              p = _propertyAliases[p];

              if (~p.indexOf(",")) {
                p = p.split(",")[0];
              }
            }
          }

          isTransformRelated = p in _transformProps;

          if (isTransformRelated) {
            if (!transformPropTween) {
              cache = target._gsap;
              cache.renderTransform || _parseTransform(target);
              smooth = vars.smoothOrigin !== false && cache.smooth;
              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);
              transformPropTween.dep = 1;
            }

            if (p === "scale") {
              this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, relative ? relative * endNum : endNum - cache.scaleY);
              props.push("scaleY", p);
              p += "X";
            } else if (p === "transformOrigin") {
              endValue = _convertKeywordsToPercentages(endValue);

              if (cache.svg) {
                _applySVGOrigin(target, endValue, 0, smooth, 0, this);
              } else {
                endUnit = parseFloat(endValue.split(" ")[2]) || 0;

                if (endUnit !== cache.zOrigin) {
                  _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
                }

                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
              }

              continue;
            } else if (p === "svgOrigin") {
              _applySVGOrigin(target, endValue, 1, smooth, 0, this);

              continue;
            } else if (p in _rotationalProperties) {
              _addRotationalPropTween(this, cache, p, startNum, endValue, relative);

              continue;
            } else if (p === "smoothOrigin") {
              _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

              continue;
            } else if (p === "force3D") {
              cache[p] = endValue;
              continue;
            } else if (p === "transform") {
              _addRawTransformPTs(this, endValue, target);

              continue;
            }
          } else if (!(p in style)) {
            p = _checkPropPrefix(p) || p;
          }

          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
            startUnit = (startValue + "").substr((startNum + "").length);
            endNum || (endNum = 0);
            endUnit = (endValue + "").substr((endNum + "").length) || (p in _config.units ? _config.units[p] : startUnit);

            if (startUnit !== endUnit) {
              startNum = _convertToUnit(target, p, startValue, endUnit);
            }

            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, endUnit === "px" && vars.autoRound !== false && !isTransformRelated ? _renderRoundedCSSProp : _renderCSSProp);
            this._pt.u = endUnit || 0;

            if (startUnit !== endUnit) {
              this._pt.b = startValue;
              this._pt.r = _renderCSSPropWithBeginning;
            }
          } else if (!(p in style)) {
            if (p in target) {
              this.add(target, p, target[p], endValue, index, targets);
            } else {
              _missingPlugin(p, endValue);

              continue;
            }
          } else {
            _tweenComplexCSSString.call(this, target, p, startValue, endValue);
          }

          props.push(p);
        }
      }

      if (hasPriority) {
        _sortPropTweensByPriority(this);
      }
    },
    get: _get,
    aliases: _propertyAliases,
    getSetter: function getSetter(target, property, plugin) {
      var p = _propertyAliases[property];
      p && p.indexOf(",") < 0 && (property = p);
      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
    },
    core: {
      _removeProperty: _removeProperty,
      _getMatrix: _getMatrix
    }
  };
  gsap.utils.checkPrefix = _checkPropPrefix;

  (function (positionAndScale, rotation, others, aliases) {
    var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
      _transformProps[name] = 1;
    });

    _forEachName(rotation, function (name) {
      _config.units[name] = "deg";
      _rotationalProperties[name] = 1;
    });

    _propertyAliases[all[13]] = positionAndScale + "," + rotation;

    _forEachName(aliases, function (name) {
      var split = name.split(":");
      _propertyAliases[split[1]] = all[split[0]];
    });
  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

  _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
    _config.units[name] = "px";
  });

  gsap.registerPlugin(CSSPlugin);

  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,
      TweenMaxWithCSS = gsapWithCSS.core.Tween;

  exports.Back = Back;
  exports.Bounce = Bounce;
  exports.CSSPlugin = CSSPlugin;
  exports.Circ = Circ;
  exports.Cubic = Cubic;
  exports.Elastic = Elastic;
  exports.Expo = Expo;
  exports.Linear = Linear;
  exports.Power0 = Power0;
  exports.Power1 = Power1;
  exports.Power2 = Power2;
  exports.Power3 = Power3;
  exports.Power4 = Power4;
  exports.Quad = Quad;
  exports.Quart = Quart;
  exports.Quint = Quint;
  exports.Sine = Sine;
  exports.SteppedEase = SteppedEase;
  exports.Strong = Strong;
  exports.TimelineLite = Timeline;
  exports.TimelineMax = Timeline;
  exports.TweenLite = Tween;
  exports.TweenMax = TweenMaxWithCSS;
  exports.default = gsapWithCSS;
  exports.gsap = gsapWithCSS;

  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}

})));

  //]]>
  </script>
  <script>
    //<![CDATA[ 
    (function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

	var _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
	    _numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
	    _scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
	    _selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
	    _DEG2RAD = Math.PI / 180,
	    _RAD2DEG = 180 / Math.PI,
	    _sin = Math.sin,
	    _cos = Math.cos,
	    _abs = Math.abs,
	    _sqrt = Math.sqrt,
	    _atan2 = Math.atan2,
	    _largeNum = 1e8,
	    _isString = function _isString(value) {
	  return typeof value === "string";
	},
	    _isNumber = function _isNumber(value) {
	  return typeof value === "number";
	},
	    _isUndefined = function _isUndefined(value) {
	  return typeof value === "undefined";
	},
	    _temp = {},
	    _temp2 = {},
	    _roundingNum = 1e5,
	    _wrapProgress = function _wrapProgress(progress) {
	  return Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum || (progress < 0 ? 0 : 1);
	},
	    _round = function _round(value) {
	  return Math.round(value * _roundingNum) / _roundingNum || 0;
	},
	    _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {
	  var segment = rawPath[segIndex],
	      shift = t === 1 ? 6 : subdivideSegment(segment, i, t);

	  if (shift && shift + i + 2 < segment.length) {
	    rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));
	    segment.splice(0, i + shift);
	    return 1;
	  }
	},
	    _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {
	  var i = rawPath.length;

	  if (!skipOuter) {
	    rawPath.reverse();
	  }

	  while (i--) {
	    if (!rawPath[i].reversed) {
	      reverseSegment(rawPath[i]);
	    }
	  }
	},
	    _copyMetaData = function _copyMetaData(source, copy) {
	  copy.totalLength = source.totalLength;

	  if (source.samples) {
	    copy.samples = source.samples.slice(0);
	    copy.lookup = source.lookup.slice(0);
	    copy.minLength = source.minLength;
	    copy.resolution = source.resolution;
	  } else {
	    copy.totalPoints = source.totalPoints;
	  }

	  return copy;
	},
	    _appendOrMerge = function _appendOrMerge(rawPath, segment) {
	  var index = rawPath.length,
	      prevSeg = rawPath[index - 1] || [],
	      l = prevSeg.length;

	  if (segment[0] === prevSeg[l - 2] && segment[1] === prevSeg[l - 1]) {
	    segment = prevSeg.concat(segment.slice(2));
	    index--;
	  }

	  rawPath[index] = segment;
	};

	function getRawPath(value) {
	  value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;
	  var e = value.getAttribute ? value : 0,
	      rawPath;

	  if (e && (value = value.getAttribute("d"))) {
	    if (!e._gsPath) {
	      e._gsPath = {};
	    }

	    rawPath = e._gsPath[value];
	    return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);
	  }

	  return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;
	}
	function copyRawPath(rawPath) {
	  var a = [],
	      i = 0;

	  for (; i < rawPath.length; i++) {
	    a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));
	  }

	  return _copyMetaData(rawPath, a);
	}
	function reverseSegment(segment) {
	  var i = 0,
	      y;
	  segment.reverse();

	  for (; i < segment.length; i += 2) {
	    y = segment[i];
	    segment[i] = segment[i + 1];
	    segment[i + 1] = y;
	  }

	  segment.reversed = !segment.reversed;
	}

	var _createPath = function _createPath(e, ignore) {
	  var path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
	      attr = [].slice.call(e.attributes),
	      i = attr.length,
	      name;
	  ignore = "," + ignore + ",";

	  while (--i > -1) {
	    name = attr[i].nodeName.toLowerCase();

	    if (ignore.indexOf("," + name + ",") < 0) {
	      path.setAttributeNS(null, name, attr[i].nodeValue);
	    }
	  }

	  return path;
	},
	    _typeAttrs = {
	  rect: "rx,ry,x,y,width,height",
	  circle: "r,cx,cy",
	  ellipse: "rx,ry,cx,cy",
	  line: "x1,x2,y1,y2"
	},
	    _attrToObj = function _attrToObj(e, attrs) {
	  var props = attrs ? attrs.split(",") : [],
	      obj = {},
	      i = props.length;

	  while (--i > -1) {
	    obj[props[i]] = +e.getAttribute(props[i]) || 0;
	  }

	  return obj;
	};

	function convertToPath(element, swap) {
	  var type = element.tagName.toLowerCase(),
	      circ = 0.552284749831,
	      data,
	      x,
	      y,
	      r,
	      ry,
	      path,
	      rcirc,
	      rycirc,
	      points,
	      w,
	      h,
	      x2,
	      x3,
	      x4,
	      x5,
	      x6,
	      y2,
	      y3,
	      y4,
	      y5,
	      y6,
	      attr;

	  if (type === "path" || !element.getBBox) {
	    return element;
	  }

	  path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
	  attr = _attrToObj(element, _typeAttrs[type]);

	  if (type === "rect") {
	    r = attr.rx;
	    ry = attr.ry || r;
	    x = attr.x;
	    y = attr.y;
	    w = attr.width - r * 2;
	    h = attr.height - ry * 2;

	    if (r || ry) {
	      x2 = x + r * (1 - circ);
	      x3 = x + r;
	      x4 = x3 + w;
	      x5 = x4 + r * circ;
	      x6 = x4 + r;
	      y2 = y + ry * (1 - circ);
	      y3 = y + ry;
	      y4 = y3 + h;
	      y5 = y4 + ry * circ;
	      y6 = y4 + ry;
	      data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
	    } else {
	      data = "M" + (x + w) + "," + y + " v" + h + " h" + -w + " v" + -h + " h" + w + "z";
	    }
	  } else if (type === "circle" || type === "ellipse") {
	    if (type === "circle") {
	      r = ry = attr.r;
	      rycirc = r * circ;
	    } else {
	      r = attr.rx;
	      ry = attr.ry;
	      rycirc = ry * circ;
	    }

	    x = attr.cx;
	    y = attr.cy;
	    rcirc = r * circ;
	    data = "M" + (x + r) + "," + y + " C" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
	  } else if (type === "line") {
	    data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2;
	  } else if (type === "polyline" || type === "polygon") {
	    points = (element.getAttribute("points") + "").match(_numbersExp) || [];
	    x = points.shift();
	    y = points.shift();
	    data = "M" + x + "," + y + " L" + points.join(",");

	    if (type === "polygon") {
	      data += "," + x + "," + y + "z";
	    }
	  }

	  path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));

	  if (swap && element.parentNode) {
	    element.parentNode.insertBefore(path, element);
	    element.parentNode.removeChild(element);
	  }

	  return path;
	}

	function getRotationAtBezierT(segment, i, t) {
	  var a = segment[i],
	      b = segment[i + 2],
	      c = segment[i + 4],
	      x;
	  a += (b - a) * t;
	  b += (c - b) * t;
	  a += (b - a) * t;
	  x = b + (c + (segment[i + 6] - c) * t - b) * t - a;
	  a = segment[i + 1];
	  b = segment[i + 3];
	  c = segment[i + 5];
	  a += (b - a) * t;
	  b += (c - b) * t;
	  a += (b - a) * t;
	  return _round(_atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG);
	}

	function sliceRawPath(rawPath, start, end) {
	  if (_isUndefined(end)) {
	    end = 1;
	  }

	  start = start || 0;
	  var reverse = start > end,
	      loops = Math.max(0, ~~(_abs(end - start) - 1e-8));

	  if (reverse) {
	    reverse = end;
	    end = start;
	    start = reverse;
	    reverse = 1;
	    loops -= loops ? 1 : 0;
	  }

	  if (start < 0 || end < 0) {
	    var offset = ~~Math.min(start, end) + 1;
	    start += offset;
	    end += offset;
	  }

	  var path = copyRawPath(rawPath.totalLength ? rawPath : cacheRawPathMeasurements(rawPath)),
	      wrap = end > 1,
	      s = getProgressData(path, start, _temp, true),
	      e = getProgressData(path, end, _temp2),
	      eSeg = e.segment,
	      sSeg = s.segment,
	      eSegIndex = e.segIndex,
	      sSegIndex = s.segIndex,
	      ei = e.i,
	      si = s.i,
	      sameSegment = sSegIndex === eSegIndex,
	      sameBezier = ei === si && sameSegment,
	      invertedOrder = sameSegment && si > ei || sameBezier && s.t > e.t,
	      sShift,
	      eShift,
	      i,
	      copy,
	      totalSegments,
	      l,
	      j;

	  if (wrap || loops) {
	    if (_splitSegment(path, sSegIndex, si, s.t)) {
	      sShift = 1;
	      sSegIndex++;

	      if (sameBezier) {
	        if (invertedOrder) {
	          e.t /= s.t;
	        } else {
	          e.t = (e.t - s.t) / (1 - s.t);
	          eSegIndex++;
	          ei = 0;
	        }
	      } else if (sSegIndex <= eSegIndex + 1 && !invertedOrder) {
	        eSegIndex++;

	        if (sameSegment) {
	          ei -= si;
	        }
	      }
	    }

	    if (!e.t) {
	      eSegIndex--;

	      if (reverse) {
	        sSegIndex--;
	      }
	    } else if (_splitSegment(path, eSegIndex, ei, e.t)) {
	      if (invertedOrder && sShift) {
	        sSegIndex++;
	      }

	      if (reverse) {
	        eSegIndex++;
	      }
	    }

	    copy = [];
	    totalSegments = path.length;
	    l = 1 + totalSegments * loops;
	    j = sSegIndex;

	    if (reverse) {
	      eSegIndex = (eSegIndex || totalSegments) - 1;
	      l += (totalSegments - eSegIndex + sSegIndex) % totalSegments;

	      for (i = 0; i < l; i++) {
	        _appendOrMerge(copy, path[j]);

	        j = (j || totalSegments) - 1;
	      }
	    } else {
	      l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;

	      for (i = 0; i < l; i++) {
	        _appendOrMerge(copy, path[j++ % totalSegments]);
	      }
	    }

	    path = copy;
	  } else {
	    eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);

	    if (start !== end) {
	      sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);

	      if (sameSegment) {
	        eShift += sShift;
	      }

	      eSeg.splice(ei + eShift + 2);

	      if (sShift || si) {
	        sSeg.splice(0, si + sShift);
	      }

	      i = path.length;

	      while (i--) {
	        if (i < sSegIndex || i > eSegIndex) {
	          path.splice(i, 1);
	        }
	      }
	    } else {
	      eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0);
	      ei += eShift;
	      s = eSeg[ei];
	      e = eSeg[ei + 1];
	      eSeg.length = eSeg.totalLength = 0;
	      eSeg.totalPoints = path.totalPoints = 8;
	      eSeg.push(s, e, s, e, s, e, s, e);
	    }
	  }

	  if (reverse) {
	    _reverseRawPath(path, wrap || loops);
	  }

	  path.totalLength = 0;
	  return path;
	}

	function measureSegment(segment, startIndex, bezierQty) {
	  startIndex = startIndex || 0;

	  if (!segment.samples) {
	    segment.samples = [];
	    segment.lookup = [];
	  }

	  var resolution = ~~segment.resolution || 12,
	      inc = 1 / resolution,
	      endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,
	      x1 = segment[startIndex],
	      y1 = segment[startIndex + 1],
	      samplesIndex = startIndex ? startIndex / 6 * resolution : 0,
	      samples = segment.samples,
	      lookup = segment.lookup,
	      min = (startIndex ? segment.minLength : _largeNum) || _largeNum,
	      prevLength = samples[samplesIndex + bezierQty * resolution - 1],
	      length = startIndex ? samples[samplesIndex - 1] : 0,
	      i,
	      j,
	      x4,
	      x3,
	      x2,
	      xd,
	      xd1,
	      y4,
	      y3,
	      y2,
	      yd,
	      yd1,
	      inv,
	      t,
	      lengthIndex,
	      l,
	      segLength;
	  samples.length = lookup.length = 0;

	  for (j = startIndex + 2; j < endIndex; j += 6) {
	    x4 = segment[j + 4] - x1;
	    x3 = segment[j + 2] - x1;
	    x2 = segment[j] - x1;
	    y4 = segment[j + 5] - y1;
	    y3 = segment[j + 3] - y1;
	    y2 = segment[j + 1] - y1;
	    xd = xd1 = yd = yd1 = 0;

	    if (_abs(x4) < 1e-5 && _abs(y4) < 1e-5 && _abs(x2) + _abs(y2) < 1e-5) {
	      if (segment.length > 8) {
	        segment.splice(j, 6);
	        j -= 6;
	        endIndex -= 6;
	      }
	    } else {
	      for (i = 1; i <= resolution; i++) {
	        t = inc * i;
	        inv = 1 - t;
	        xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);
	        yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);
	        l = _sqrt(yd * yd + xd * xd);

	        if (l < min) {
	          min = l;
	        }

	        length += l;
	        samples[samplesIndex++] = length;
	      }
	    }

	    x1 += x4;
	    y1 += y4;
	  }

	  if (prevLength) {
	    prevLength -= length;

	    for (; samplesIndex < samples.length; samplesIndex++) {
	      samples[samplesIndex] += prevLength;
	    }
	  }

	  if (samples.length && min) {
	    segment.totalLength = segLength = samples[samples.length - 1] || 0;
	    segment.minLength = min;
	    l = lengthIndex = 0;

	    for (i = 0; i < segLength; i += min) {
	      lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;
	    }
	  } else {
	    segment.totalLength = samples[0] = 0;
	  }

	  return startIndex ? length - samples[startIndex / 2 - 1] : length;
	}

	function cacheRawPathMeasurements(rawPath, resolution) {
	  var pathLength, points, i;

	  for (i = pathLength = points = 0; i < rawPath.length; i++) {
	    rawPath[i].resolution = ~~resolution || 12;
	    points += rawPath[i].length;
	    pathLength += measureSegment(rawPath[i]);
	  }

	  rawPath.totalPoints = points;
	  rawPath.totalLength = pathLength;
	  return rawPath;
	}
	function subdivideSegment(segment, i, t) {
	  if (t <= 0 || t >= 1) {
	    return 0;
	  }

	  var ax = segment[i],
	      ay = segment[i + 1],
	      cp1x = segment[i + 2],
	      cp1y = segment[i + 3],
	      cp2x = segment[i + 4],
	      cp2y = segment[i + 5],
	      bx = segment[i + 6],
	      by = segment[i + 7],
	      x1a = ax + (cp1x - ax) * t,
	      x2 = cp1x + (cp2x - cp1x) * t,
	      y1a = ay + (cp1y - ay) * t,
	      y2 = cp1y + (cp2y - cp1y) * t,
	      x1 = x1a + (x2 - x1a) * t,
	      y1 = y1a + (y2 - y1a) * t,
	      x2a = cp2x + (bx - cp2x) * t,
	      y2a = cp2y + (by - cp2y) * t;
	  x2 += (x2a - x2) * t;
	  y2 += (y2a - y2) * t;
	  segment.splice(i + 2, 4, _round(x1a), _round(y1a), _round(x1), _round(y1), _round(x1 + (x2 - x1) * t), _round(y1 + (y2 - y1) * t), _round(x2), _round(y2), _round(x2a), _round(y2a));
	  segment.samples && segment.samples.splice(i / 6 * segment.resolution | 0, 0, 0, 0, 0, 0, 0, 0);
	  return 6;
	}

	function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
	  decoratee = decoratee || {};
	  rawPath.totalLength || cacheRawPathMeasurements(rawPath);

	  if (progress < 0 || progress > 1) {
	    progress = _wrapProgress(progress);
	  }

	  var segIndex = 0,
	      segment = rawPath[0],
	      samples,
	      resolution,
	      length,
	      min,
	      max,
	      i,
	      t;

	  if (rawPath.length > 1) {
	    length = rawPath.totalLength * progress;
	    max = i = 0;

	    while ((max += rawPath[i++].totalLength) < length) {
	      segIndex = i;
	    }

	    segment = rawPath[segIndex];
	    min = max - segment.totalLength;
	    progress = (length - min) / (max - min) || 0;
	  }

	  samples = segment.samples;
	  resolution = segment.resolution;
	  length = segment.totalLength * progress;
	  i = segment.lookup[~~(length / segment.minLength)] || 0;
	  min = i ? samples[i - 1] : 0;
	  max = samples[i];

	  if (max < length) {
	    min = max;
	    max = samples[++i];
	  }

	  t = 1 / resolution * ((length - min) / (max - min) + i % resolution);
	  i = ~~(i / resolution) * 6;

	  if (pushToNextIfAtEnd && t === 1) {
	    if (i + 6 < segment.length) {
	      i += 6;
	      t = 0;
	    } else if (segIndex + 1 < rawPath.length) {
	      i = t = 0;
	      segment = rawPath[++segIndex];
	    }
	  }

	  decoratee.t = t;
	  decoratee.i = i;
	  decoratee.path = rawPath;
	  decoratee.segment = segment;
	  decoratee.segIndex = segIndex;
	  return decoratee;
	}

	function getPositionOnPath(rawPath, progress, includeAngle, point) {
	  var segment = rawPath[0],
	      result = point || {},
	      samples,
	      resolution,
	      length,
	      min,
	      max,
	      i,
	      t,
	      a,
	      inv;

	  if (progress < 0 || progress > 1) {
	    progress = _wrapProgress(progress);
	  }

	  if (rawPath.length > 1) {
	    length = rawPath.totalLength * progress;
	    max = i = 0;

	    while ((max += rawPath[i++].totalLength) < length) {
	      segment = rawPath[i];
	    }

	    min = max - segment.totalLength;
	    progress = (length - min) / (max - min) || 0;
	  }

	  samples = segment.samples;
	  resolution = segment.resolution;
	  length = segment.totalLength * progress;
	  i = segment.lookup[~~(length / segment.minLength)] || 0;
	  min = i ? samples[i - 1] : 0;
	  max = samples[i];

	  if (max < length) {
	    min = max;
	    max = samples[++i];
	  }

	  t = 1 / resolution * ((length - min) / (max - min) + i % resolution) || 0;
	  inv = 1 - t;
	  i = ~~(i / resolution) * 6;
	  a = segment[i];
	  result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);
	  result.y = _round((t * t * (segment[i + 7] - (a = segment[i + 1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);

	  if (includeAngle) {
	    result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;
	  }

	  return result;
	}
	function transformRawPath(rawPath, a, b, c, d, tx, ty) {
	  var j = rawPath.length,
	      segment,
	      l,
	      i,
	      x,
	      y;

	  while (--j > -1) {
	    segment = rawPath[j];
	    l = segment.length;

	    for (i = 0; i < l; i += 2) {
	      x = segment[i];
	      y = segment[i + 1];
	      segment[i] = x * a + y * c + tx;
	      segment[i + 1] = x * b + y * d + ty;
	    }
	  }

	  rawPath._dirty = 1;
	  return rawPath;
	}

	function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
	  if (lastX === x && lastY === y) {
	    return;
	  }

	  rx = _abs(rx);
	  ry = _abs(ry);

	  var angleRad = angle % 360 * _DEG2RAD,
	      cosAngle = _cos(angleRad),
	      sinAngle = _sin(angleRad),
	      PI = Math.PI,
	      TWOPI = PI * 2,
	      dx2 = (lastX - x) / 2,
	      dy2 = (lastY - y) / 2,
	      x1 = cosAngle * dx2 + sinAngle * dy2,
	      y1 = -sinAngle * dx2 + cosAngle * dy2,
	      x1_sq = x1 * x1,
	      y1_sq = y1 * y1,
	      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);

	  if (radiiCheck > 1) {
	    rx = _sqrt(radiiCheck) * rx;
	    ry = _sqrt(radiiCheck) * ry;
	  }

	  var rx_sq = rx * rx,
	      ry_sq = ry * ry,
	      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);

	  if (sq < 0) {
	    sq = 0;
	  }

	  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),
	      cx1 = coef * (rx * y1 / ry),
	      cy1 = coef * -(ry * x1 / rx),
	      sx2 = (lastX + x) / 2,
	      sy2 = (lastY + y) / 2,
	      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
	      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
	      ux = (x1 - cx1) / rx,
	      uy = (y1 - cy1) / ry,
	      vx = (-x1 - cx1) / rx,
	      vy = (-y1 - cy1) / ry,
	      temp = ux * ux + uy * uy,
	      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
	      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));

	  isNaN(angleExtent) && (angleExtent = PI);

	  if (!sweepFlag && angleExtent > 0) {
	    angleExtent -= TWOPI;
	  } else if (sweepFlag && angleExtent < 0) {
	    angleExtent += TWOPI;
	  }

	  angleStart %= TWOPI;
	  angleExtent %= TWOPI;

	  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
	      rawPath = [],
	      angleIncrement = angleExtent / segments,
	      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
	      ma = cosAngle * rx,
	      mb = sinAngle * rx,
	      mc = sinAngle * -ry,
	      md = cosAngle * ry,
	      i;

	  for (i = 0; i < segments; i++) {
	    angle = angleStart + i * angleIncrement;
	    x1 = _cos(angle);
	    y1 = _sin(angle);
	    ux = _cos(angle += angleIncrement);
	    uy = _sin(angle);
	    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
	  }

	  for (i = 0; i < rawPath.length; i += 2) {
	    x1 = rawPath[i];
	    y1 = rawPath[i + 1];
	    rawPath[i] = x1 * ma + y1 * mc + cx;
	    rawPath[i + 1] = x1 * mb + y1 * md + cy;
	  }

	  rawPath[i - 2] = x;
	  rawPath[i - 1] = y;
	  return rawPath;
	}

	function stringToRawPath(d) {
	  var a = (d + "").replace(_scientific, function (m) {
	    var n = +m;
	    return n < 0.0001 && n > -0.0001 ? 0 : n;
	  }).match(_svgPathExp) || [],
	      path = [],
	      relativeX = 0,
	      relativeY = 0,
	      twoThirds = 2 / 3,
	      elements = a.length,
	      points = 0,
	      errorMessage = "ERROR: malformed path: " + d,
	      i,
	      j,
	      x,
	      y,
	      command,
	      isRelative,
	      segment,
	      startX,
	      startY,
	      difX,
	      difY,
	      beziers,
	      prevCommand,
	      flag1,
	      flag2,
	      line = function line(sx, sy, ex, ey) {
	    difX = (ex - sx) / 3;
	    difY = (ey - sy) / 3;
	    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
	  };

	  if (!d || !isNaN(a[0]) || isNaN(a[1])) {
	    console.log(errorMessage);
	    return path;
	  }

	  for (i = 0; i < elements; i++) {
	    prevCommand = command;

	    if (isNaN(a[i])) {
	      command = a[i].toUpperCase();
	      isRelative = command !== a[i];
	    } else {
	      i--;
	    }

	    x = +a[i + 1];
	    y = +a[i + 2];

	    if (isRelative) {
	      x += relativeX;
	      y += relativeY;
	    }

	    if (!i) {
	      startX = x;
	      startY = y;
	    }

	    if (command === "M") {
	      if (segment) {
	        if (segment.length < 8) {
	          path.length -= 1;
	        } else {
	          points += segment.length;
	        }
	      }

	      relativeX = startX = x;
	      relativeY = startY = y;
	      segment = [x, y];
	      path.push(segment);
	      i += 2;
	      command = "L";
	    } else if (command === "C") {
	      if (!segment) {
	        segment = [0, 0];
	      }

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);
	      i += 6;
	    } else if (command === "S") {
	      difX = relativeX;
	      difY = relativeY;

	      if (prevCommand === "C" || prevCommand === "S") {
	        difX += relativeX - segment[segment.length - 4];
	        difY += relativeY - segment[segment.length - 3];
	      }

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);
	      i += 4;
	    } else if (command === "Q") {
	      difX = relativeX + (x - relativeX) * twoThirds;
	      difY = relativeY + (y - relativeY) * twoThirds;

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      relativeX += a[i + 3] * 1;
	      relativeY += a[i + 4] * 1;
	      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
	      i += 4;
	    } else if (command === "T") {
	      difX = relativeX - segment[segment.length - 4];
	      difY = relativeY - segment[segment.length - 3];
	      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);
	      i += 2;
	    } else if (command === "H") {
	      line(relativeX, relativeY, relativeX = x, relativeY);
	      i += 1;
	    } else if (command === "V") {
	      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));
	      i += 1;
	    } else if (command === "L" || command === "Z") {
	      if (command === "Z") {
	        x = startX;
	        y = startY;
	        segment.closed = true;
	      }

	      if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
	        line(relativeX, relativeY, x, y);

	        if (command === "L") {
	          i += 2;
	        }
	      }

	      relativeX = x;
	      relativeY = y;
	    } else if (command === "A") {
	      flag1 = a[i + 4];
	      flag2 = a[i + 5];
	      difX = a[i + 6];
	      difY = a[i + 7];
	      j = 7;

	      if (flag1.length > 1) {
	        if (flag1.length < 3) {
	          difY = difX;
	          difX = flag2;
	          j--;
	        } else {
	          difY = flag2;
	          difX = flag1.substr(2);
	          j -= 2;
	        }

	        flag2 = flag1.charAt(1);
	        flag1 = flag1.charAt(0);
	      }

	      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);
	      i += j;

	      if (beziers) {
	        for (j = 0; j < beziers.length; j++) {
	          segment.push(beziers[j]);
	        }
	      }

	      relativeX = segment[segment.length - 2];
	      relativeY = segment[segment.length - 1];
	    } else {
	      console.log(errorMessage);
	    }
	  }

	  i = segment.length;

	  if (i < 6) {
	    path.pop();
	    i = 0;
	  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {
	    segment.closed = true;
	  }

	  path.totalPoints = points + i;
	  return path;
	}
	function flatPointsToSegment(points, curviness) {
	  if (curviness === void 0) {
	    curviness = 1;
	  }

	  var x = points[0],
	      y = 0,
	      segment = [x, y],
	      i = 2;

	  for (; i < points.length; i += 2) {
	    segment.push(x, y, points[i], y = (points[i] - x) * curviness / 2, x = points[i], -y);
	  }

	  return segment;
	}
	function pointsToSegment(points, curviness, cornerThreshold) {
	  var l = points.length - 2,
	      x = +points[0],
	      y = +points[1],
	      nextX = +points[2],
	      nextY = +points[3],
	      segment = [x, y, x, y],
	      dx2 = nextX - x,
	      dy2 = nextY - y,
	      closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001,
	      prevX,
	      prevY,
	      angle,
	      slope,
	      i,
	      dx1,
	      dx3,
	      dy1,
	      dy3,
	      d1,
	      d2,
	      a,
	      b,
	      c;

	  if (isNaN(cornerThreshold)) {
	    cornerThreshold = Math.PI / 10;
	  }

	  if (closed) {
	    points.push(nextX, nextY);
	    nextX = x;
	    nextY = y;
	    x = points[l - 2];
	    y = points[l - 1];
	    points.unshift(x, y);
	    l += 4;
	  }

	  curviness = curviness || curviness === 0 ? +curviness : 1;

	  for (i = 2; i < l; i += 2) {
	    prevX = x;
	    prevY = y;
	    x = nextX;
	    y = nextY;
	    nextX = +points[i + 2];
	    nextY = +points[i + 3];
	    dx1 = dx2;
	    dy1 = dy2;
	    dx2 = nextX - x;
	    dy2 = nextY - y;
	    dx3 = nextX - prevX;
	    dy3 = nextY - prevY;
	    a = dx1 * dx1 + dy1 * dy1;
	    b = dx2 * dx2 + dy2 * dy2;
	    c = dx3 * dx3 + dy3 * dy3;
	    angle = Math.acos((a + b - c) / _sqrt(4 * a * b));
	    d2 = angle / Math.PI * curviness;
	    d1 = _sqrt(a) * d2;
	    d2 *= _sqrt(b);

	    if (x !== prevX || y !== prevY) {
	      if (angle > cornerThreshold) {
	        slope = _atan2(dy3, dx3);
	        segment.push(_round(x - _cos(slope) * d1), _round(y - _sin(slope) * d1), _round(x), _round(y), _round(x + _cos(slope) * d2), _round(y + _sin(slope) * d2));
	      } else {
	        slope = _atan2(dy1, dx1);
	        segment.push(_round(x - _cos(slope) * d1), _round(y - _sin(slope) * d1));
	        slope = _atan2(dy2, dx2);
	        segment.push(_round(x), _round(y), _round(x + _cos(slope) * d2), _round(y + _sin(slope) * d2));
	      }
	    }
	  }

	  segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY));

	  if (closed) {
	    segment.splice(0, 6);
	    segment.length = segment.length - 6;
	  }

	  return segment;
	}
	function rawPathToString(rawPath) {
	  if (_isNumber(rawPath[0])) {
	    rawPath = [rawPath];
	  }

	  var result = "",
	      l = rawPath.length,
	      sl,
	      s,
	      i,
	      segment;

	  for (s = 0; s < l; s++) {
	    segment = rawPath[s];
	    result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
	    sl = segment.length;

	    for (i = 2; i < sl; i++) {
	      result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
	    }

	    if (segment.closed) {
	      result += "z";
	    }
	  }

	  return result;
	}

	var _doc,
	    _win,
	    _docElement,
	    _body,
	    _divContainer,
	    _svgContainer,
	    _identityMatrix,
	    _transformProp = "transform",
	    _transformOriginProp = _transformProp + "Origin",
	    _hasOffsetBug,
	    _setDoc = function _setDoc(element) {
	  var doc = element.ownerDocument || element;

	  if (!(_transformProp in element.style) && "msTransform" in element.style) {
	    _transformProp = "msTransform";
	    _transformOriginProp = _transformProp + "Origin";
	  }

	  while (doc.parentNode && (doc = doc.parentNode)) {}

	  _win = window;
	  _identityMatrix = new Matrix2D();

	  if (doc) {
	    _doc = doc;
	    _docElement = doc.documentElement;
	    _body = doc.body;
	    var d1 = doc.createElement("div"),
	        d2 = doc.createElement("div");

	    _body.appendChild(d1);

	    d1.appendChild(d2);
	    d1.style.position = "static";
	    d1.style[_transformProp] = "translate3d(0,0,1px)";
	    _hasOffsetBug = d2.offsetParent !== d1;

	    _body.removeChild(d1);
	  }

	  return doc;
	},
	    _forceNonZeroScale = function _forceNonZeroScale(e) {
	  var a, cache;

	  while (e && e !== _body) {
	    cache = e._gsap;

	    if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {
	      cache.scaleX = cache.scaleY = 1e-4;
	      cache.renderTransform(1, cache);
	      a ? a.push(cache) : a = [cache];
	    }

	    e = e.parentNode;
	  }

	  return a;
	},
	    _svgTemps = [],
	    _divTemps = [],
	    _getDocScrollTop = function _getDocScrollTop() {
	  return _win.pageYOffset || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0;
	},
	    _getDocScrollLeft = function _getDocScrollLeft() {
	  return _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0;
	},
	    _svgOwner = function _svgOwner(element) {
	  return element.ownerSVGElement || ((element.tagName + "").toLowerCase() === "svg" ? element : null);
	},
	    _isFixed = function _isFixed(element) {
	  if (_win.getComputedStyle(element).position === "fixed") {
	    return true;
	  }

	  element = element.parentNode;

	  if (element && element.nodeType === 1) {
	    return _isFixed(element);
	  }
	},
	    _createSibling = function _createSibling(element, i) {
	  if (element.parentNode && (_doc || _setDoc(element))) {
	    var svg = _svgOwner(element),
	        ns = svg ? svg.getAttribute("xmlns") || "http://www.w3.org/2000/svg" : "http://www.w3.org/1999/xhtml",
	        type = svg ? i ? "rect" : "g" : "div",
	        x = i !== 2 ? 0 : 100,
	        y = i === 3 ? 100 : 0,
	        css = "position:absolute;display:block;pointer-events:none;",
	        e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, "http"), type) : _doc.createElement(type);

	    if (i) {
	      if (!svg) {
	        if (!_divContainer) {
	          _divContainer = _createSibling(element);
	          _divContainer.style.cssText = css;
	        }

	        e.style.cssText = css + "width:0.1px;height:0.1px;top:" + y + "px;left:" + x + "px";

	        _divContainer.appendChild(e);
	      } else {
	        if (!_svgContainer) {
	          _svgContainer = _createSibling(element);
	        }

	        e.setAttribute("width", 0.01);
	        e.setAttribute("height", 0.01);
	        e.setAttribute("transform", "translate(" + x + "," + y + ")");

	        _svgContainer.appendChild(e);
	      }
	    }

	    return e;
	  }

	  throw "Need document and parent.";
	},
	    _consolidate = function _consolidate(m) {
	  var c = new Matrix2D(),
	      i = 0;

	  for (; i < m.numberOfItems; i++) {
	    c.multiply(m.getItem(i).matrix);
	  }

	  return c;
	},
	    _placeSiblings = function _placeSiblings(element, adjustGOffset) {
	  var svg = _svgOwner(element),
	      isRootSVG = element === svg,
	      siblings = svg ? _svgTemps : _divTemps,
	      container,
	      m,
	      b,
	      x,
	      y;

	  if (element === _win) {
	    return element;
	  }

	  if (!siblings.length) {
	    siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));
	  }

	  container = svg ? _svgContainer : _divContainer;

	  if (svg) {
	    b = isRootSVG ? {
	      x: 0,
	      y: 0
	    } : element.getBBox();
	    m = element.transform ? element.transform.baseVal : {};

	    if (m.numberOfItems) {
	      m = m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix;
	      x = m.a * b.x + m.c * b.y;
	      y = m.b * b.x + m.d * b.y;
	    } else {
	      m = _identityMatrix;
	      x = b.x;
	      y = b.y;
	    }

	    if (adjustGOffset && element.tagName.toLowerCase() === "g") {
	      x = y = 0;
	    }

	    container.setAttribute("transform", "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + (m.e + x) + "," + (m.f + y) + ")");
	    (isRootSVG ? svg : element.parentNode).appendChild(container);
	  } else {
	    x = y = 0;

	    if (_hasOffsetBug) {
	      m = element.offsetParent;
	      b = element;

	      while (b && (b = b.parentNode) && b !== m && b.parentNode) {
	        if ((_win.getComputedStyle(b)[_transformProp] + "").length > 4) {
	          x = b.offsetLeft;
	          y = b.offsetTop;
	          b = 0;
	        }
	      }
	    }

	    b = container.style;
	    b.top = element.offsetTop - y + "px";
	    b.left = element.offsetLeft - x + "px";
	    m = _win.getComputedStyle(element);
	    b[_transformProp] = m[_transformProp];
	    b[_transformOriginProp] = m[_transformOriginProp];
	    b.border = m.border;
	    b.borderLeftStyle = m.borderLeftStyle;
	    b.borderTopStyle = m.borderTopStyle;
	    b.borderLeftWidth = m.borderLeftWidth;
	    b.borderTopWidth = m.borderTopWidth;
	    b.position = m.position === "fixed" ? "fixed" : "absolute";
	    element.parentNode.appendChild(container);
	  }

	  return container;
	},
	    _setMatrix = function _setMatrix(m, a, b, c, d, e, f) {
	  m.a = a;
	  m.b = b;
	  m.c = c;
	  m.d = d;
	  m.e = e;
	  m.f = f;
	  return m;
	};

	var Matrix2D = function () {
	  function Matrix2D(a, b, c, d, e, f) {
	    if (a === void 0) {
	      a = 1;
	    }

	    if (b === void 0) {
	      b = 0;
	    }

	    if (c === void 0) {
	      c = 0;
	    }

	    if (d === void 0) {
	      d = 1;
	    }

	    if (e === void 0) {
	      e = 0;
	    }

	    if (f === void 0) {
	      f = 0;
	    }

	    _setMatrix(this, a, b, c, d, e, f);
	  }

	  var _proto = Matrix2D.prototype;

	  _proto.inverse = function inverse() {
	    var a = this.a,
	        b = this.b,
	        c = this.c,
	        d = this.d,
	        e = this.e,
	        f = this.f,
	        determinant = a * d - b * c || 1e-10;
	    return _setMatrix(this, d / determinant, -b / determinant, -c / determinant, a / determinant, (c * f - d * e) / determinant, -(a * f - b * e) / determinant);
	  };

	  _proto.multiply = function multiply(matrix) {
	    var a = this.a,
	        b = this.b,
	        c = this.c,
	        d = this.d,
	        e = this.e,
	        f = this.f,
	        a2 = matrix.a,
	        b2 = matrix.c,
	        c2 = matrix.b,
	        d2 = matrix.d,
	        e2 = matrix.e,
	        f2 = matrix.f;
	    return _setMatrix(this, a2 * a + c2 * c, a2 * b + c2 * d, b2 * a + d2 * c, b2 * b + d2 * d, e + e2 * a + f2 * c, f + e2 * b + f2 * d);
	  };

	  _proto.clone = function clone() {
	    return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);
	  };

	  _proto.equals = function equals(matrix) {
	    var a = this.a,
	        b = this.b,
	        c = this.c,
	        d = this.d,
	        e = this.e,
	        f = this.f;
	    return a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f;
	  };

	  _proto.apply = function apply(point, decoratee) {
	    if (decoratee === void 0) {
	      decoratee = {};
	    }

	    var x = point.x,
	        y = point.y,
	        a = this.a,
	        b = this.b,
	        c = this.c,
	        d = this.d,
	        e = this.e,
	        f = this.f;
	    decoratee.x = x * a + y * c + e || 0;
	    decoratee.y = x * b + y * d + f || 0;
	    return decoratee;
	  };

	  return Matrix2D;
	}();
	function getGlobalMatrix(element, inverse, adjustGOffset) {
	  if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {
	    return new Matrix2D();
	  }

	  var zeroScales = _forceNonZeroScale(element.parentNode),
	      svg = _svgOwner(element),
	      temps = svg ? _svgTemps : _divTemps,
	      container = _placeSiblings(element, adjustGOffset),
	      b1 = temps[0].getBoundingClientRect(),
	      b2 = temps[1].getBoundingClientRect(),
	      b3 = temps[2].getBoundingClientRect(),
	      parent = container.parentNode,
	      isFixed = _isFixed(element),
	      m = new Matrix2D((b2.left - b1.left) / 100, (b2.top - b1.top) / 100, (b3.left - b1.left) / 100, (b3.top - b1.top) / 100, b1.left + (isFixed ? 0 : _getDocScrollLeft()), b1.top + (isFixed ? 0 : _getDocScrollTop()));

	  parent.removeChild(container);

	  if (zeroScales) {
	    b1 = zeroScales.length;

	    while (b1--) {
	      b2 = zeroScales[b1];
	      b2.scaleX = b2.scaleY = 0;
	      b2.renderTransform(1, b2);
	    }
	  }

	  return inverse ? m.inverse() : m;
	}

	/*!
	 * MotionPathPlugin 3.4.2
	 * https://greensock.com
	 *
	 * @license Copyright 2008-2020, GreenSock. All rights reserved.
	 * Subject to the terms at https://greensock.com/standard-license or for
	 * Club GreenSock members, the agreement issued with that membership.
	 * @author: Jack Doyle, jack@greensock.com
	*/

	var _xProps = ["x", "translateX", "left", "marginLeft"],
	    _yProps = ["y", "translateY", "top", "marginTop"],
	    _DEG2RAD$1 = Math.PI / 180,
	    gsap,
	    PropTween,
	    _getUnit,
	    _toArray,
	    _getGSAP = function _getGSAP() {
	  return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
	},
	    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {
	  var l = values.length,
	      si = mode === 2 ? 0 : mode,
	      i = 0;

	  for (; i < l; i++) {
	    segment[si] = parseFloat(values[i][property]);
	    mode === 2 && (segment[si + 1] = 0);
	    si += 2;
	  }

	  return segment;
	},
	    _getPropNum = function _getPropNum(target, prop, unit) {
	  return parseFloat(target._gsap.get(target, prop, unit || "px")) || 0;
	},
	    _relativize = function _relativize(segment) {
	  var x = segment[0],
	      y = segment[1],
	      i;

	  for (i = 2; i < segment.length; i += 2) {
	    x = segment[i] += x;
	    y = segment[i + 1] += y;
	  }
	},
	    _segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars) {
	  if (vars.type === "cubic") {
	    segment = [segment];
	  } else {
	    segment.unshift(_getPropNum(target, x, vars.unitX), y ? _getPropNum(target, y, vars.unitY) : 0);
	    vars.relative && _relativize(segment);
	    var pointFunc = y ? pointsToSegment : flatPointsToSegment;
	    segment = [pointFunc(segment, vars.curviness)];
	  }

	  segment = slicer(_align(segment, target, vars));

	  _addDimensionalPropTween(plugin, target, x, segment, "x", vars.unitX);

	  y && _addDimensionalPropTween(plugin, target, y, segment, "y", vars.unitY);
	  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12));
	},
	    _emptyFunc = function _emptyFunc(v) {
	  return v;
	},
	    _numExp = /[-+\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/g,
	    _originToPoint = function _originToPoint(element, origin, parentMatrix) {
	  var m = getGlobalMatrix(element),
	      svg,
	      x,
	      y;

	  if ((element.tagName + "").toLowerCase() === "svg") {
	    svg = element.viewBox.baseVal;
	    x = svg.x;
	    y = svg.y;
	    svg.width || (svg = {
	      width: +element.getAttribute("width"),
	      height: +element.getAttribute("height")
	    });
	  } else {
	    svg = origin && element.getBBox && element.getBBox();
	    x = y = 0;
	  }

	  if (origin && origin !== "auto") {
	    x += origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;
	    y += origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;
	  }

	  return parentMatrix.apply(x || y ? m.apply({
	    x: x,
	    y: y
	  }) : {
	    x: m.e,
	    y: m.f
	  });
	},
	    _getAlignMatrix = function _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin) {
	  var parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),
	      m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),
	      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),
	      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),
	      x = _originToPoint2.x,
	      y = _originToPoint2.y,
	      p;

	  m.e = m.f = 0;

	  if (toOrigin === "auto" && toElement.getTotalLength && toElement.tagName.toLowerCase() === "path") {
	    p = toElement.getAttribute("d").match(_numExp) || [];
	    p = m.apply({
	      x: +p[0],
	      y: +p[1]
	    });
	    x += p.x;
	    y += p.y;
	  }

	  if (p || toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement) {
	    p = m.apply(toElement.getBBox());
	    x -= p.x;
	    y -= p.y;
	  }

	  m.e = x - fromPoint.x;
	  m.f = y - fromPoint.y;
	  return m;
	},
	    _align = function _align(rawPath, target, _ref) {
	  var align = _ref.align,
	      matrix = _ref.matrix,
	      offsetX = _ref.offsetX,
	      offsetY = _ref.offsetY,
	      alignOrigin = _ref.alignOrigin;

	  var x = rawPath[0][0],
	      y = rawPath[0][1],
	      curX = _getPropNum(target, "x"),
	      curY = _getPropNum(target, "y"),
	      alignTarget,
	      m,
	      p;

	  if (!rawPath || !rawPath.length) {
	    return getRawPath("M0,0L0,0");
	  }

	  if (align) {
	    if (align === "self" || (alignTarget = _toArray(align)[0] || target) === target) {
	      transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);
	    } else {
	      if (alignOrigin && alignOrigin[2] !== false) {
	        gsap.set(target, {
	          transformOrigin: alignOrigin[0] * 100 + "% " + alignOrigin[1] * 100 + "%"
	        });
	      } else {
	        alignOrigin = [_getPropNum(target, "xPercent") / -100, _getPropNum(target, "yPercent") / -100];
	      }

	      m = _getAlignMatrix(target, alignTarget, alignOrigin, "auto");
	      p = m.apply({
	        x: x,
	        y: y
	      });
	      transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));
	    }
	  }

	  if (matrix) {
	    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
	  } else if (offsetX || offsetY) {
	    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);
	  }

	  return rawPath;
	},
	    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {
	  var cache = target._gsap,
	      harness = cache.harness,
	      alias = harness && harness.aliases && harness.aliases[property],
	      prop = alias && alias.indexOf(",") < 0 ? alias : property,
	      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));
	  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;
	  pt.path = rawPath;
	  pt.pp = pathProperty;

	  plugin._props.push(prop);
	},
	    _sliceModifier = function _sliceModifier(start, end) {
	  return function (rawPath) {
	    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;
	  };
	};

	var MotionPathPlugin = {
	  version: "3.4.2",
	  name: "motionPath",
	  register: function register(core, Plugin, propTween) {
	    gsap = core;
	    _getUnit = gsap.utils.getUnit;
	    _toArray = gsap.utils.toArray;
	    PropTween = propTween;
	  },
	  init: function init(target, vars) {
	    if (!gsap) {
	      console.warn("Please gsap.registerPlugin(MotionPathPlugin)");
	      return false;
	    }

	    if (!(typeof vars === "object" && !vars.style) || !vars.path) {
	      vars = {
	        path: vars
	      };
	    }

	    var rawPaths = [],
	        path = vars.path,
	        firstObj = path[0],
	        autoRotate = vars.autoRotate,
	        slicer = _sliceModifier(vars.start, "end" in vars ? vars.end : 1),
	        rawPath,
	        p,
	        x,
	        y;

	    this.rawPaths = rawPaths;
	    this.target = target;

	    if (this.rotate = autoRotate || autoRotate === 0) {
	      this.rOffset = parseFloat(autoRotate) || 0;
	      this.radians = !!vars.useRadians;
	      this.rProp = vars.rotation || "rotation";
	      this.rSet = target._gsap.set(target, this.rProp, this);
	      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0;
	    }

	    if (Array.isArray(path) && !("closed" in path) && typeof firstObj !== "number") {
	      for (p in firstObj) {
	        if (~_xProps.indexOf(p)) {
	          x = p;
	        } else if (~_yProps.indexOf(p)) {
	          y = p;
	        }
	      }

	      if (x && y) {
	        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, vars.x || x, vars.y || y, slicer, vars));
	      } else {
	        x = y = 0;
	      }

	      for (p in firstObj) {
	        if (p !== x && p !== y) {
	          rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars));
	        }
	      }
	    } else {
	      rawPath = slicer(_align(getRawPath(vars.path), target, vars));
	      cacheRawPathMeasurements(rawPath, vars.resolution);
	      rawPaths.push(rawPath);

	      _addDimensionalPropTween(this, target, vars.x || "x", rawPath, "x", vars.unitX || "px");

	      _addDimensionalPropTween(this, target, vars.y || "y", rawPath, "y", vars.unitY || "px");
	    }
	  },
	  render: function render(ratio, data) {
	    var rawPaths = data.rawPaths,
	        i = rawPaths.length,
	        pt = data._pt;

	    if (ratio > 1) {
	      ratio = 1;
	    } else if (ratio < 0) {
	      ratio = 0;
	    }

	    while (i--) {
	      getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);
	    }

	    while (pt) {
	      pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);
	      pt = pt._next;
	    }

	    data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD$1 : 1) + data.rOffset + data.ru, data, ratio);
	  },
	  getLength: function getLength(path) {
	    return cacheRawPathMeasurements(getRawPath(path)).totalLength;
	  },
	  sliceRawPath: sliceRawPath,
	  getRawPath: getRawPath,
	  pointsToSegment: pointsToSegment,
	  stringToRawPath: stringToRawPath,
	  rawPathToString: rawPathToString,
	  transformRawPath: transformRawPath,
	  getGlobalMatrix: getGlobalMatrix,
	  getPositionOnPath: getPositionOnPath,
	  cacheRawPathMeasurements: cacheRawPathMeasurements,
	  convertToPath: function convertToPath$1(targets, swap) {
	    return _toArray(targets).map(function (target) {
	      return convertToPath(target, swap !== false);
	    });
	  },
	  convertCoordinates: function convertCoordinates(fromElement, toElement, point) {
	    var m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));
	    return point ? m.apply(point) : m;
	  },
	  getAlignMatrix: _getAlignMatrix,
	  getRelativePosition: function getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {
	    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);

	    return {
	      x: m.e,
	      y: m.f
	    };
	  },
	  arrayToRawPath: function arrayToRawPath(value, vars) {
	    vars = vars || {};

	    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || "x", 0), value, vars.y || "y", 1);

	    vars.relative && _relativize(segment);
	    return [vars.type === "cubic" ? segment : pointsToSegment(segment, vars.curviness)];
	  }
	};
	_getGSAP() && gsap.registerPlugin(MotionPathPlugin);

	exports.MotionPathPlugin = MotionPathPlugin;
	exports.default = MotionPathPlugin;

	Object.defineProperty(exports, '__esModule', { value: true });

})));

    //]]>
  </script>
  <script>//<![CDATA[ 
    (function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

	var _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
	    _numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
	    _scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
	    _selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
	    _DEG2RAD = Math.PI / 180,
	    _sin = Math.sin,
	    _cos = Math.cos,
	    _abs = Math.abs,
	    _sqrt = Math.sqrt,
	    _isString = function _isString(value) {
	  return typeof value === "string";
	},
	    _isNumber = function _isNumber(value) {
	  return typeof value === "number";
	},
	    _roundingNum = 1e5,
	    _round = function _round(value) {
	  return Math.round(value * _roundingNum) / _roundingNum || 0;
	};

	function getRawPath(value) {
	  value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;
	  var e = value.getAttribute ? value : 0,
	      rawPath;

	  if (e && (value = value.getAttribute("d"))) {
	    if (!e._gsPath) {
	      e._gsPath = {};
	    }

	    rawPath = e._gsPath[value];
	    return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);
	  }

	  return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;
	}
	function reverseSegment(segment) {
	  var i = 0,
	      y;
	  segment.reverse();

	  for (; i < segment.length; i += 2) {
	    y = segment[i];
	    segment[i] = segment[i + 1];
	    segment[i + 1] = y;
	  }

	  segment.reversed = !segment.reversed;
	}

	var _createPath = function _createPath(e, ignore) {
	  var path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
	      attr = [].slice.call(e.attributes),
	      i = attr.length,
	      name;
	  ignore = "," + ignore + ",";

	  while (--i > -1) {
	    name = attr[i].nodeName.toLowerCase();

	    if (ignore.indexOf("," + name + ",") < 0) {
	      path.setAttributeNS(null, name, attr[i].nodeValue);
	    }
	  }

	  return path;
	},
	    _typeAttrs = {
	  rect: "rx,ry,x,y,width,height",
	  circle: "r,cx,cy",
	  ellipse: "rx,ry,cx,cy",
	  line: "x1,x2,y1,y2"
	},
	    _attrToObj = function _attrToObj(e, attrs) {
	  var props = attrs ? attrs.split(",") : [],
	      obj = {},
	      i = props.length;

	  while (--i > -1) {
	    obj[props[i]] = +e.getAttribute(props[i]) || 0;
	  }

	  return obj;
	};

	function convertToPath(element, swap) {
	  var type = element.tagName.toLowerCase(),
	      circ = 0.552284749831,
	      data,
	      x,
	      y,
	      r,
	      ry,
	      path,
	      rcirc,
	      rycirc,
	      points,
	      w,
	      h,
	      x2,
	      x3,
	      x4,
	      x5,
	      x6,
	      y2,
	      y3,
	      y4,
	      y5,
	      y6,
	      attr;

	  if (type === "path" || !element.getBBox) {
	    return element;
	  }

	  path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
	  attr = _attrToObj(element, _typeAttrs[type]);

	  if (type === "rect") {
	    r = attr.rx;
	    ry = attr.ry || r;
	    x = attr.x;
	    y = attr.y;
	    w = attr.width - r * 2;
	    h = attr.height - ry * 2;

	    if (r || ry) {
	      x2 = x + r * (1 - circ);
	      x3 = x + r;
	      x4 = x3 + w;
	      x5 = x4 + r * circ;
	      x6 = x4 + r;
	      y2 = y + ry * (1 - circ);
	      y3 = y + ry;
	      y4 = y3 + h;
	      y5 = y4 + ry * circ;
	      y6 = y4 + ry;
	      data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
	    } else {
	      data = "M" + (x + w) + "," + y + " v" + h + " h" + -w + " v" + -h + " h" + w + "z";
	    }
	  } else if (type === "circle" || type === "ellipse") {
	    if (type === "circle") {
	      r = ry = attr.r;
	      rycirc = r * circ;
	    } else {
	      r = attr.rx;
	      ry = attr.ry;
	      rycirc = ry * circ;
	    }

	    x = attr.cx;
	    y = attr.cy;
	    rcirc = r * circ;
	    data = "M" + (x + r) + "," + y + " C" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
	  } else if (type === "line") {
	    data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2;
	  } else if (type === "polyline" || type === "polygon") {
	    points = (element.getAttribute("points") + "").match(_numbersExp) || [];
	    x = points.shift();
	    y = points.shift();
	    data = "M" + x + "," + y + " L" + points.join(",");

	    if (type === "polygon") {
	      data += "," + x + "," + y + "z";
	    }
	  }

	  path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));

	  if (swap && element.parentNode) {
	    element.parentNode.insertBefore(path, element);
	    element.parentNode.removeChild(element);
	  }

	  return path;
	}

	function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
	  if (lastX === x && lastY === y) {
	    return;
	  }

	  rx = _abs(rx);
	  ry = _abs(ry);

	  var angleRad = angle % 360 * _DEG2RAD,
	      cosAngle = _cos(angleRad),
	      sinAngle = _sin(angleRad),
	      PI = Math.PI,
	      TWOPI = PI * 2,
	      dx2 = (lastX - x) / 2,
	      dy2 = (lastY - y) / 2,
	      x1 = cosAngle * dx2 + sinAngle * dy2,
	      y1 = -sinAngle * dx2 + cosAngle * dy2,
	      x1_sq = x1 * x1,
	      y1_sq = y1 * y1,
	      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);

	  if (radiiCheck > 1) {
	    rx = _sqrt(radiiCheck) * rx;
	    ry = _sqrt(radiiCheck) * ry;
	  }

	  var rx_sq = rx * rx,
	      ry_sq = ry * ry,
	      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);

	  if (sq < 0) {
	    sq = 0;
	  }

	  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),
	      cx1 = coef * (rx * y1 / ry),
	      cy1 = coef * -(ry * x1 / rx),
	      sx2 = (lastX + x) / 2,
	      sy2 = (lastY + y) / 2,
	      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
	      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
	      ux = (x1 - cx1) / rx,
	      uy = (y1 - cy1) / ry,
	      vx = (-x1 - cx1) / rx,
	      vy = (-y1 - cy1) / ry,
	      temp = ux * ux + uy * uy,
	      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
	      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));

	  isNaN(angleExtent) && (angleExtent = PI);

	  if (!sweepFlag && angleExtent > 0) {
	    angleExtent -= TWOPI;
	  } else if (sweepFlag && angleExtent < 0) {
	    angleExtent += TWOPI;
	  }

	  angleStart %= TWOPI;
	  angleExtent %= TWOPI;

	  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
	      rawPath = [],
	      angleIncrement = angleExtent / segments,
	      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
	      ma = cosAngle * rx,
	      mb = sinAngle * rx,
	      mc = sinAngle * -ry,
	      md = cosAngle * ry,
	      i;

	  for (i = 0; i < segments; i++) {
	    angle = angleStart + i * angleIncrement;
	    x1 = _cos(angle);
	    y1 = _sin(angle);
	    ux = _cos(angle += angleIncrement);
	    uy = _sin(angle);
	    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
	  }

	  for (i = 0; i < rawPath.length; i += 2) {
	    x1 = rawPath[i];
	    y1 = rawPath[i + 1];
	    rawPath[i] = x1 * ma + y1 * mc + cx;
	    rawPath[i + 1] = x1 * mb + y1 * md + cy;
	  }

	  rawPath[i - 2] = x;
	  rawPath[i - 1] = y;
	  return rawPath;
	}

	function stringToRawPath(d) {
	  var a = (d + "").replace(_scientific, function (m) {
	    var n = +m;
	    return n < 0.0001 && n > -0.0001 ? 0 : n;
	  }).match(_svgPathExp) || [],
	      path = [],
	      relativeX = 0,
	      relativeY = 0,
	      twoThirds = 2 / 3,
	      elements = a.length,
	      points = 0,
	      errorMessage = "ERROR: malformed path: " + d,
	      i,
	      j,
	      x,
	      y,
	      command,
	      isRelative,
	      segment,
	      startX,
	      startY,
	      difX,
	      difY,
	      beziers,
	      prevCommand,
	      flag1,
	      flag2,
	      line = function line(sx, sy, ex, ey) {
	    difX = (ex - sx) / 3;
	    difY = (ey - sy) / 3;
	    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
	  };

	  if (!d || !isNaN(a[0]) || isNaN(a[1])) {
	    console.log(errorMessage);
	    return path;
	  }

	  for (i = 0; i < elements; i++) {
	    prevCommand = command;

	    if (isNaN(a[i])) {
	      command = a[i].toUpperCase();
	      isRelative = command !== a[i];
	    } else {
	      i--;
	    }

	    x = +a[i + 1];
	    y = +a[i + 2];

	    if (isRelative) {
	      x += relativeX;
	      y += relativeY;
	    }

	    if (!i) {
	      startX = x;
	      startY = y;
	    }

	    if (command === "M") {
	      if (segment) {
	        if (segment.length < 8) {
	          path.length -= 1;
	        } else {
	          points += segment.length;
	        }
	      }

	      relativeX = startX = x;
	      relativeY = startY = y;
	      segment = [x, y];
	      path.push(segment);
	      i += 2;
	      command = "L";
	    } else if (command === "C") {
	      if (!segment) {
	        segment = [0, 0];
	      }

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);
	      i += 6;
	    } else if (command === "S") {
	      difX = relativeX;
	      difY = relativeY;

	      if (prevCommand === "C" || prevCommand === "S") {
	        difX += relativeX - segment[segment.length - 4];
	        difY += relativeY - segment[segment.length - 3];
	      }

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);
	      i += 4;
	    } else if (command === "Q") {
	      difX = relativeX + (x - relativeX) * twoThirds;
	      difY = relativeY + (y - relativeY) * twoThirds;

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      relativeX += a[i + 3] * 1;
	      relativeY += a[i + 4] * 1;
	      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
	      i += 4;
	    } else if (command === "T") {
	      difX = relativeX - segment[segment.length - 4];
	      difY = relativeY - segment[segment.length - 3];
	      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);
	      i += 2;
	    } else if (command === "H") {
	      line(relativeX, relativeY, relativeX = x, relativeY);
	      i += 1;
	    } else if (command === "V") {
	      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));
	      i += 1;
	    } else if (command === "L" || command === "Z") {
	      if (command === "Z") {
	        x = startX;
	        y = startY;
	        segment.closed = true;
	      }

	      if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
	        line(relativeX, relativeY, x, y);

	        if (command === "L") {
	          i += 2;
	        }
	      }

	      relativeX = x;
	      relativeY = y;
	    } else if (command === "A") {
	      flag1 = a[i + 4];
	      flag2 = a[i + 5];
	      difX = a[i + 6];
	      difY = a[i + 7];
	      j = 7;

	      if (flag1.length > 1) {
	        if (flag1.length < 3) {
	          difY = difX;
	          difX = flag2;
	          j--;
	        } else {
	          difY = flag2;
	          difX = flag1.substr(2);
	          j -= 2;
	        }

	        flag2 = flag1.charAt(1);
	        flag1 = flag1.charAt(0);
	      }

	      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);
	      i += j;

	      if (beziers) {
	        for (j = 0; j < beziers.length; j++) {
	          segment.push(beziers[j]);
	        }
	      }

	      relativeX = segment[segment.length - 2];
	      relativeY = segment[segment.length - 1];
	    } else {
	      console.log(errorMessage);
	    }
	  }

	  i = segment.length;

	  if (i < 6) {
	    path.pop();
	    i = 0;
	  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {
	    segment.closed = true;
	  }

	  path.totalPoints = points + i;
	  return path;
	}
	function rawPathToString(rawPath) {
	  if (_isNumber(rawPath[0])) {
	    rawPath = [rawPath];
	  }

	  var result = "",
	      l = rawPath.length,
	      sl,
	      s,
	      i,
	      segment;

	  for (s = 0; s < l; s++) {
	    segment = rawPath[s];
	    result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
	    sl = segment.length;

	    for (i = 2; i < sl; i++) {
	      result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
	    }

	    if (segment.closed) {
	      result += "z";
	    }
	  }

	  return result;
	}

	/*!
	 * MorphSVGPlugin 3.4.2
	 * https://greensock.com
	 *
	 * @license Copyright 2008-2020, GreenSock. All rights reserved.
	 * Subject to the terms at https://greensock.com/standard-license or for
	 * Club GreenSock members, the agreement issued with that membership.
	 * @author: Jack Doyle, jack@greensock.com
	*/

	var gsap,
	    _toArray,
	    _lastLinkedAnchor,
	    _coreInitted,
	    PluginClass,
	    _getGSAP = function _getGSAP() {
	  return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
	},
	    _isFunction = function _isFunction(value) {
	  return typeof value === "function";
	},
	    _atan2 = Math.atan2,
	    _cos$1 = Math.cos,
	    _sin$1 = Math.sin,
	    _sqrt$1 = Math.sqrt,
	    _PI = Math.PI,
	    _2PI = _PI * 2,
	    _angleMin = _PI * 0.3,
	    _angleMax = _PI * 0.7,
	    _bigNum = 1e20,
	    _numExp = /[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi,
	    _selectorExp$1 = /(^[#\.][a-z]|[a-y][a-z])/gi,
	    _commands = /[achlmqstvz]/ig,
	    _log = function _log(message) {
	  return console && console.warn(message);
	},
	    _bonusValidated = 1,
	    _getAverageXY = function _getAverageXY(segment) {
	  var l = segment.length,
	      x = 0,
	      y = 0,
	      i;

	  for (i = 0; i < l; i++) {
	    x += segment[i++];
	    y += segment[i];
	  }

	  return [x / (l / 2), y / (l / 2)];
	},
	    _getSize = function _getSize(segment) {
	  var l = segment.length,
	      xMax = segment[0],
	      xMin = xMax,
	      yMax = segment[1],
	      yMin = yMax,
	      x,
	      y,
	      i;

	  for (i = 6; i < l; i += 6) {
	    x = segment[i];
	    y = segment[i + 1];

	    if (x > xMax) {
	      xMax = x;
	    } else if (x < xMin) {
	      xMin = x;
	    }

	    if (y > yMax) {
	      yMax = y;
	    } else if (y < yMin) {
	      yMin = y;
	    }
	  }

	  segment.centerX = (xMax + xMin) / 2;
	  segment.centerY = (yMax + yMin) / 2;
	  return segment.size = (xMax - xMin) * (yMax - yMin);
	},
	    _getTotalSize = function _getTotalSize(rawPath, samplesPerBezier) {
	  if (samplesPerBezier === void 0) {
	    samplesPerBezier = 3;
	  }

	  var j = rawPath.length,
	      xMax = rawPath[0][0],
	      xMin = xMax,
	      yMax = rawPath[0][1],
	      yMin = yMax,
	      inc = 1 / samplesPerBezier,
	      l,
	      x,
	      y,
	      i,
	      segment,
	      k,
	      t,
	      inv,
	      x1,
	      y1,
	      x2,
	      x3,
	      x4,
	      y2,
	      y3,
	      y4;

	  while (--j > -1) {
	    segment = rawPath[j];
	    l = segment.length;

	    for (i = 6; i < l; i += 6) {
	      x1 = segment[i];
	      y1 = segment[i + 1];
	      x2 = segment[i + 2] - x1;
	      y2 = segment[i + 3] - y1;
	      x3 = segment[i + 4] - x1;
	      y3 = segment[i + 5] - y1;
	      x4 = segment[i + 6] - x1;
	      y4 = segment[i + 7] - y1;
	      k = samplesPerBezier;

	      while (--k > -1) {
	        t = inc * k;
	        inv = 1 - t;
	        x = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t + x1;
	        y = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t + y1;

	        if (x > xMax) {
	          xMax = x;
	        } else if (x < xMin) {
	          xMin = x;
	        }

	        if (y > yMax) {
	          yMax = y;
	        } else if (y < yMin) {
	          yMin = y;
	        }
	      }
	    }
	  }

	  rawPath.centerX = (xMax + xMin) / 2;
	  rawPath.centerY = (yMax + yMin) / 2;
	  rawPath.left = xMin;
	  rawPath.width = xMax - xMin;
	  rawPath.top = yMin;
	  rawPath.height = yMax - yMin;
	  return rawPath.size = (xMax - xMin) * (yMax - yMin);
	},
	    _sortByComplexity = function _sortByComplexity(a, b) {
	  return b.length - a.length;
	},
	    _sortBySize = function _sortBySize(a, b) {
	  var sizeA = a.size || _getSize(a),
	      sizeB = b.size || _getSize(b);

	  return Math.abs(sizeB - sizeA) < (sizeA + sizeB) / 20 ? b.centerX - a.centerX || b.centerY - a.centerY : sizeB - sizeA;
	},
	    _offsetSegment = function _offsetSegment(segment, shapeIndex) {
	  var a = segment.slice(0),
	      l = segment.length,
	      wrap = l - 2,
	      i,
	      index;
	  shapeIndex = shapeIndex | 0;

	  for (i = 0; i < l; i++) {
	    index = (i + shapeIndex) % wrap;
	    segment[i++] = a[index];
	    segment[i] = a[index + 1];
	  }
	},
	    _getTotalMovement = function _getTotalMovement(sb, eb, shapeIndex, offsetX, offsetY) {
	  var l = sb.length,
	      d = 0,
	      wrap = l - 2,
	      index,
	      i,
	      x,
	      y;
	  shapeIndex *= 6;

	  for (i = 0; i < l; i += 6) {
	    index = (i + shapeIndex) % wrap;
	    y = sb[index] - (eb[i] - offsetX);
	    x = sb[index + 1] - (eb[i + 1] - offsetY);
	    d += _sqrt$1(x * x + y * y);
	  }

	  return d;
	},
	    _getClosestShapeIndex = function _getClosestShapeIndex(sb, eb, checkReverse) {
	  var l = sb.length,
	      sCenter = _getAverageXY(sb),
	      eCenter = _getAverageXY(eb),
	      offsetX = eCenter[0] - sCenter[0],
	      offsetY = eCenter[1] - sCenter[1],
	      min = _getTotalMovement(sb, eb, 0, offsetX, offsetY),
	      minIndex = 0,
	      copy,
	      d,
	      i;

	  for (i = 6; i < l; i += 6) {
	    d = _getTotalMovement(sb, eb, i / 6, offsetX, offsetY);

	    if (d < min) {
	      min = d;
	      minIndex = i;
	    }
	  }

	  if (checkReverse) {
	    copy = sb.slice(0);
	    reverseSegment(copy);

	    for (i = 6; i < l; i += 6) {
	      d = _getTotalMovement(copy, eb, i / 6, offsetX, offsetY);

	      if (d < min) {
	        min = d;
	        minIndex = -i;
	      }
	    }
	  }

	  return minIndex / 6;
	},
	    _getClosestAnchor = function _getClosestAnchor(rawPath, x, y) {
	  var j = rawPath.length,
	      closestDistance = _bigNum,
	      closestX = 0,
	      closestY = 0,
	      segment,
	      dx,
	      dy,
	      d,
	      i,
	      l;

	  while (--j > -1) {
	    segment = rawPath[j];
	    l = segment.length;

	    for (i = 0; i < l; i += 6) {
	      dx = segment[i] - x;
	      dy = segment[i + 1] - y;
	      d = _sqrt$1(dx * dx + dy * dy);

	      if (d < closestDistance) {
	        closestDistance = d;
	        closestX = segment[i];
	        closestY = segment[i + 1];
	      }
	    }
	  }

	  return [closestX, closestY];
	},
	    _getClosestSegment = function _getClosestSegment(bezier, pool, startIndex, sortRatio, offsetX, offsetY) {
	  var l = pool.length,
	      index = 0,
	      minSize = Math.min(bezier.size || _getSize(bezier), pool[startIndex].size || _getSize(pool[startIndex])) * sortRatio,
	      min = _bigNum,
	      cx = bezier.centerX + offsetX,
	      cy = bezier.centerY + offsetY,
	      size,
	      i,
	      dx,
	      dy,
	      d;

	  for (i = startIndex; i < l; i++) {
	    size = pool[i].size || _getSize(pool[i]);

	    if (size < minSize) {
	      break;
	    }

	    dx = pool[i].centerX - cx;
	    dy = pool[i].centerY - cy;
	    d = _sqrt$1(dx * dx + dy * dy);

	    if (d < min) {
	      index = i;
	      min = d;
	    }
	  }

	  d = pool[index];
	  pool.splice(index, 1);
	  return d;
	},
	    _subdivideSegmentQty = function _subdivideSegmentQty(segment, quantity) {
	  var tally = 0,
	      max = 0.999999,
	      l = segment.length,
	      newPointsPerSegment = quantity / ((l - 2) / 6),
	      ax,
	      ay,
	      cp1x,
	      cp1y,
	      cp2x,
	      cp2y,
	      bx,
	      by,
	      x1,
	      y1,
	      x2,
	      y2,
	      i,
	      t;

	  for (i = 2; i < l; i += 6) {
	    tally += newPointsPerSegment;

	    while (tally > max) {
	      ax = segment[i - 2];
	      ay = segment[i - 1];
	      cp1x = segment[i];
	      cp1y = segment[i + 1];
	      cp2x = segment[i + 2];
	      cp2y = segment[i + 3];
	      bx = segment[i + 4];
	      by = segment[i + 5];
	      t = 1 / ((Math.floor(tally) || 1) + 1);
	      x1 = ax + (cp1x - ax) * t;
	      x2 = cp1x + (cp2x - cp1x) * t;
	      x1 += (x2 - x1) * t;
	      x2 += (cp2x + (bx - cp2x) * t - x2) * t;
	      y1 = ay + (cp1y - ay) * t;
	      y2 = cp1y + (cp2y - cp1y) * t;
	      y1 += (y2 - y1) * t;
	      y2 += (cp2y + (by - cp2y) * t - y2) * t;
	      segment.splice(i, 4, ax + (cp1x - ax) * t, ay + (cp1y - ay) * t, x1, y1, x1 + (x2 - x1) * t, y1 + (y2 - y1) * t, x2, y2, cp2x + (bx - cp2x) * t, cp2y + (by - cp2y) * t);
	      i += 6;
	      l += 6;
	      tally--;
	    }
	  }

	  return segment;
	},
	    _equalizeSegmentQuantity = function _equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe) {
	  var dif = end.length - start.length,
	      longer = dif > 0 ? end : start,
	      shorter = dif > 0 ? start : end,
	      added = 0,
	      sortMethod = map === "complexity" ? _sortByComplexity : _sortBySize,
	      sortRatio = map === "position" ? 0 : typeof map === "number" ? map : 0.8,
	      i = shorter.length,
	      shapeIndices = typeof shapeIndex === "object" && shapeIndex.push ? shapeIndex.slice(0) : [shapeIndex],
	      reverse = shapeIndices[0] === "reverse" || shapeIndices[0] < 0,
	      log = shapeIndex === "log",
	      eb,
	      sb,
	      b,
	      x,
	      y,
	      offsetX,
	      offsetY;

	  if (!shorter[0]) {
	    return;
	  }

	  if (longer.length > 1) {
	    start.sort(sortMethod);
	    end.sort(sortMethod);
	    offsetX = longer.size || _getTotalSize(longer);
	    offsetX = shorter.size || _getTotalSize(shorter);
	    offsetX = longer.centerX - shorter.centerX;
	    offsetY = longer.centerY - shorter.centerY;

	    if (sortMethod === _sortBySize) {
	      for (i = 0; i < shorter.length; i++) {
	        longer.splice(i, 0, _getClosestSegment(shorter[i], longer, i, sortRatio, offsetX, offsetY));
	      }
	    }
	  }

	  if (dif) {
	    if (dif < 0) {
	      dif = -dif;
	    }

	    if (longer[0].length > shorter[0].length) {
	      _subdivideSegmentQty(shorter[0], (longer[0].length - shorter[0].length) / 6 | 0);
	    }

	    i = shorter.length;

	    while (added < dif) {
	      x = longer[i].size || _getSize(longer[i]);
	      b = _getClosestAnchor(shorter, longer[i].centerX, longer[i].centerY);
	      x = b[0];
	      y = b[1];
	      shorter[i++] = [x, y, x, y, x, y, x, y];
	      shorter.totalPoints += 8;
	      added++;
	    }
	  }

	  for (i = 0; i < start.length; i++) {
	    eb = end[i];
	    sb = start[i];
	    dif = eb.length - sb.length;

	    if (dif < 0) {
	      _subdivideSegmentQty(eb, -dif / 6 | 0);
	    } else if (dif > 0) {
	      _subdivideSegmentQty(sb, dif / 6 | 0);
	    }

	    if (reverse && fillSafe !== false && !sb.reversed) {
	      reverseSegment(sb);
	    }

	    shapeIndex = shapeIndices[i] || shapeIndices[i] === 0 ? shapeIndices[i] : "auto";

	    if (shapeIndex) {
	      if (sb.closed || Math.abs(sb[0] - sb[sb.length - 2]) < 0.5 && Math.abs(sb[1] - sb[sb.length - 1]) < 0.5) {
	        if (shapeIndex === "auto" || shapeIndex === "log") {
	          shapeIndices[i] = shapeIndex = _getClosestShapeIndex(sb, eb, !i || fillSafe === false);

	          if (shapeIndex < 0) {
	            reverse = true;
	            reverseSegment(sb);
	            shapeIndex = -shapeIndex;
	          }

	          _offsetSegment(sb, shapeIndex * 6);
	        } else if (shapeIndex !== "reverse") {
	          if (i && shapeIndex < 0) {
	            reverseSegment(sb);
	          }

	          _offsetSegment(sb, (shapeIndex < 0 ? -shapeIndex : shapeIndex) * 6);
	        }
	      } else if (!reverse && (shapeIndex === "auto" && Math.abs(eb[0] - sb[0]) + Math.abs(eb[1] - sb[1]) + Math.abs(eb[eb.length - 2] - sb[sb.length - 2]) + Math.abs(eb[eb.length - 1] - sb[sb.length - 1]) > Math.abs(eb[0] - sb[sb.length - 2]) + Math.abs(eb[1] - sb[sb.length - 1]) + Math.abs(eb[eb.length - 2] - sb[0]) + Math.abs(eb[eb.length - 1] - sb[1]) || shapeIndex % 2)) {
	        reverseSegment(sb);
	        shapeIndices[i] = -1;
	        reverse = true;
	      } else if (shapeIndex === "auto") {
	        shapeIndices[i] = 0;
	      } else if (shapeIndex === "reverse") {
	        shapeIndices[i] = -1;
	      }

	      if (sb.closed !== eb.closed) {
	        sb.closed = eb.closed = false;
	      }
	    }
	  }

	  if (log) {
	    _log("shapeIndex:[" + shapeIndices.join(",") + "]");
	  }

	  start.shapeIndex = shapeIndices;
	  return shapeIndices;
	},
	    _pathFilter = function _pathFilter(a, shapeIndex, map, precompile, fillSafe) {
	  var start = stringToRawPath(a[0]),
	      end = stringToRawPath(a[1]);

	  if (!_equalizeSegmentQuantity(start, end, shapeIndex || shapeIndex === 0 ? shapeIndex : "auto", map, fillSafe)) {
	    return;
	  }

	  a[0] = rawPathToString(start);
	  a[1] = rawPathToString(end);

	  if (precompile === "log" || precompile === true) {
	    _log('precompile:["' + a[0] + '","' + a[1] + '"]');
	  }
	},
	    _offsetPoints = function _offsetPoints(text, offset) {
	  if (!offset) {
	    return text;
	  }

	  var a = text.match(_numExp) || [],
	      l = a.length,
	      s = "",
	      inc,
	      i,
	      j;

	  if (offset === "reverse") {
	    i = l - 1;
	    inc = -2;
	  } else {
	    i = ((parseInt(offset, 10) || 0) * 2 + 1 + l * 100) % l;
	    inc = 2;
	  }

	  for (j = 0; j < l; j += 2) {
	    s += a[i - 1] + "," + a[i] + " ";
	    i = (i + inc) % l;
	  }

	  return s;
	},
	    _equalizePointQuantity = function _equalizePointQuantity(a, quantity) {
	  var tally = 0,
	      x = parseFloat(a[0]),
	      y = parseFloat(a[1]),
	      s = x + "," + y + " ",
	      max = 0.999999,
	      newPointsPerSegment,
	      i,
	      l,
	      j,
	      factor,
	      nextX,
	      nextY;
	  l = a.length;
	  newPointsPerSegment = quantity * 0.5 / (l * 0.5 - 1);

	  for (i = 0; i < l - 2; i += 2) {
	    tally += newPointsPerSegment;
	    nextX = parseFloat(a[i + 2]);
	    nextY = parseFloat(a[i + 3]);

	    if (tally > max) {
	      factor = 1 / (Math.floor(tally) + 1);
	      j = 1;

	      while (tally > max) {
	        s += (x + (nextX - x) * factor * j).toFixed(2) + "," + (y + (nextY - y) * factor * j).toFixed(2) + " ";
	        tally--;
	        j++;
	      }
	    }

	    s += nextX + "," + nextY + " ";
	    x = nextX;
	    y = nextY;
	  }

	  return s;
	},
	    _pointsFilter = function _pointsFilter(a) {
	  var startNums = a[0].match(_numExp) || [],
	      endNums = a[1].match(_numExp) || [],
	      dif = endNums.length - startNums.length;

	  if (dif > 0) {
	    a[0] = _equalizePointQuantity(startNums, dif);
	  } else {
	    a[1] = _equalizePointQuantity(endNums, -dif);
	  }
	},
	    _buildPointsFilter = function _buildPointsFilter(shapeIndex) {
	  return !isNaN(shapeIndex) ? function (a) {
	    _pointsFilter(a);

	    a[1] = _offsetPoints(a[1], parseInt(shapeIndex, 10));
	  } : _pointsFilter;
	},
	    _parseShape = function _parseShape(shape, forcePath, target) {
	  var isString = typeof shape === "string",
	      e,
	      type;

	  if (!isString || _selectorExp$1.test(shape) || (shape.match(_numExp) || []).length < 3) {
	    e = _toArray(shape)[0];

	    if (e) {
	      type = (e.nodeName + "").toUpperCase();

	      if (forcePath && type !== "PATH") {
	        e = convertToPath(e, false);
	        type = "PATH";
	      }

	      shape = e.getAttribute(type === "PATH" ? "d" : "points") || "";

	      if (e === target) {
	        shape = e.getAttributeNS(null, "data-original") || shape;
	      }
	    } else {
	      _log("WARNING: invalid morph to: " + shape);

	      shape = false;
	    }
	  }

	  return shape;
	},
	    _populateSmoothData = function _populateSmoothData(rawPath, tolerance) {
	  var j = rawPath.length,
	      limit = 0.2 * (tolerance || 1),
	      smooth,
	      segment,
	      x,
	      y,
	      x2,
	      y2,
	      i,
	      l,
	      a,
	      a2,
	      isSmooth,
	      smoothData;

	  while (--j > -1) {
	    segment = rawPath[j];
	    isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
	    smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
	    isSmooth.length = 4;
	    l = segment.length - 2;

	    for (i = 6; i < l; i += 6) {
	      x = segment[i] - segment[i - 2];
	      y = segment[i + 1] - segment[i - 1];
	      x2 = segment[i + 2] - segment[i];
	      y2 = segment[i + 3] - segment[i + 1];
	      a = _atan2(y, x);
	      a2 = _atan2(y2, x2);
	      smooth = Math.abs(a - a2) < limit;

	      if (smooth) {
	        smoothData[i - 2] = a;
	        smoothData[i + 2] = a2;
	        smoothData[i - 1] = _sqrt$1(x * x + y * y);
	        smoothData[i + 3] = _sqrt$1(x2 * x2 + y2 * y2);
	      }

	      isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
	    }

	    if (segment[l] === segment[0] && segment[l + 1] === segment[1]) {
	      x = segment[0] - segment[l - 2];
	      y = segment[1] - segment[l - 1];
	      x2 = segment[2] - segment[0];
	      y2 = segment[3] - segment[1];
	      a = _atan2(y, x);
	      a2 = _atan2(y2, x2);

	      if (Math.abs(a - a2) < limit) {
	        smoothData[l - 2] = a;
	        smoothData[2] = a2;
	        smoothData[l - 1] = _sqrt$1(x * x + y * y);
	        smoothData[3] = _sqrt$1(x2 * x2 + y2 * y2);
	        isSmooth[l - 2] = isSmooth[l - 1] = true;
	      }
	    }
	  }

	  return rawPath;
	},
	    _parseOriginFactors = function _parseOriginFactors(v) {
	  var a = v.trim().split(" "),
	      x = ~v.indexOf("left") ? 0 : ~v.indexOf("right") ? 100 : isNaN(parseFloat(a[0])) ? 50 : parseFloat(a[0]),
	      y = ~v.indexOf("top") ? 0 : ~v.indexOf("bottom") ? 100 : isNaN(parseFloat(a[1])) ? 50 : parseFloat(a[1]);
	  return {
	    x: x / 100,
	    y: y / 100
	  };
	},
	    _shortAngle = function _shortAngle(dif) {
	  return dif !== dif % _PI ? dif + (dif < 0 ? _2PI : -_2PI) : dif;
	},
	    _morphMessage = "Use MorphSVGPlugin.convertToPath() to convert to a path before morphing.",
	    _tweenRotation = function _tweenRotation(start, end, i, linkedPT) {
	  var so = this._origin,
	      eo = this._eOrigin,
	      dx = start[i] - so.x,
	      dy = start[i + 1] - so.y,
	      d = _sqrt$1(dx * dx + dy * dy),
	      sa = _atan2(dy, dx),
	      angleDif,
	      _short;

	  dx = end[i] - eo.x;
	  dy = end[i + 1] - eo.y;
	  angleDif = _atan2(dy, dx) - sa;
	  _short = _shortAngle(angleDif);

	  if (!linkedPT && _lastLinkedAnchor && Math.abs(_short + _lastLinkedAnchor.ca) < _angleMin) {
	    linkedPT = _lastLinkedAnchor;
	  }

	  return this._anchorPT = _lastLinkedAnchor = {
	    _next: this._anchorPT,
	    t: start,
	    sa: sa,
	    ca: linkedPT && _short * linkedPT.ca < 0 && Math.abs(_short) > _angleMax ? angleDif : _short,
	    sl: d,
	    cl: _sqrt$1(dx * dx + dy * dy) - d,
	    i: i
	  };
	},
	    _initCore = function _initCore(required) {
	  gsap = _getGSAP();
	  PluginClass = PluginClass || gsap && gsap.plugins.morphSVG;

	  if (gsap && PluginClass) {
	    _toArray = gsap.utils.toArray;
	    PluginClass.prototype._tweenRotation = _tweenRotation;
	    _coreInitted = 1;
	  } else if (required) {
	    _log("Please gsap.registerPlugin(MorphSVGPlugin)");
	  }
	};

	var MorphSVGPlugin = {
	  version: "3.4.2",
	  name: "morphSVG",
	  rawVars: 1,
	  register: function register(core, Plugin) {
	    gsap = core;
	    PluginClass = Plugin;

	    _initCore();
	  },
	  init: function init(target, value, tween, index, targets) {
	    _coreInitted || _initCore(1);

	    if (!value) {
	      _log("invalid shape");

	      return false;
	    }

	    _isFunction(value) && (value = value.call(tween, index, target, targets));
	    var type, p, pt, shape, isPoly, shapeIndex, map, startSmooth, endSmooth, start, end, i, j, l, startSeg, endSeg, precompiled, sData, eData, originFactors, useRotation, offset;

	    if (typeof value === "string" || value.getBBox || value[0]) {
	      value = {
	        shape: value
	      };
	    } else if (typeof value === "object") {
	      type = {};

	      for (p in value) {
	        type[p] = _isFunction(value[p]) && p !== "render" ? value[p].call(tween, index, target, targets) : value[p];
	      }

	      value = type;
	    }

	    var cs = target.nodeType ? window.getComputedStyle(target) : {},
	        fill = cs.fill + "",
	        fillSafe = !(fill === "none" || (fill.match(_numExp) || [])[3] === "0" || cs.fillRule === "evenodd"),
	        origins = (value.origin || "50 50").split(",");
	    type = (target.nodeName + "").toUpperCase();
	    isPoly = type === "POLYLINE" || type === "POLYGON";

	    if (type !== "PATH" && !isPoly && !value.prop) {
	      _log("Cannot morph a <" + type + "> element. " + _morphMessage);

	      return false;
	    }

	    p = type === "PATH" ? "d" : "points";

	    if (!value.prop && !_isFunction(target.setAttribute)) {
	      return false;
	    }

	    shape = _parseShape(value.shape || value.d || value.points || "", p === "d", target);

	    if (isPoly && _commands.test(shape)) {
	      _log("A <" + type + "> cannot accept path data. " + _morphMessage);

	      return false;
	    }

	    shapeIndex = value.shapeIndex || value.shapeIndex === 0 ? value.shapeIndex : "auto";
	    map = value.map || MorphSVGPlugin.defaultMap;
	    this._prop = value.prop;
	    this._render = value.render || MorphSVGPlugin.defaultRender;
	    this._apply = "updateTarget" in value ? value.updateTarget : MorphSVGPlugin.defaultUpdateTarget;
	    this._rnd = Math.pow(10, isNaN(value.precision) ? 2 : +value.precision);
	    this._tween = tween;

	    if (shape) {
	      this._target = target;
	      precompiled = typeof value.precompile === "object";
	      start = this._prop ? target[this._prop] : target.getAttribute(p);

	      if (!this._prop && !target.getAttributeNS(null, "data-original")) {
	        target.setAttributeNS(null, "data-original", start);
	      }

	      if (p === "d" || this._prop) {
	        start = stringToRawPath(precompiled ? value.precompile[0] : start);
	        end = stringToRawPath(precompiled ? value.precompile[1] : shape);

	        if (!precompiled && !_equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe)) {
	          return false;
	        }

	        if (value.precompile === "log" || value.precompile === true) {
	          _log('precompile:["' + rawPathToString(start) + '","' + rawPathToString(end) + '"]');
	        }

	        useRotation = (value.type || MorphSVGPlugin.defaultType) !== "linear";

	        if (useRotation) {
	          start = _populateSmoothData(start, value.smoothTolerance);
	          end = _populateSmoothData(end, value.smoothTolerance);

	          if (!start.size) {
	            _getTotalSize(start);
	          }

	          if (!end.size) {
	            _getTotalSize(end);
	          }

	          originFactors = _parseOriginFactors(origins[0]);
	          this._origin = start.origin = {
	            x: start.left + originFactors.x * start.width,
	            y: start.top + originFactors.y * start.height
	          };

	          if (origins[1]) {
	            originFactors = _parseOriginFactors(origins[1]);
	          }

	          this._eOrigin = {
	            x: end.left + originFactors.x * end.width,
	            y: end.top + originFactors.y * end.height
	          };
	        }

	        this._rawPath = target._gsRawPath = start;
	        j = start.length;

	        while (--j > -1) {
	          startSeg = start[j];
	          endSeg = end[j];
	          startSmooth = startSeg.isSmooth || [];
	          endSmooth = endSeg.isSmooth || [];
	          l = startSeg.length;
	          _lastLinkedAnchor = 0;

	          for (i = 0; i < l; i += 2) {
	            if (endSeg[i] !== startSeg[i] || endSeg[i + 1] !== startSeg[i + 1]) {
	              if (useRotation) {
	                if (startSmooth[i] && endSmooth[i]) {
	                  sData = startSeg.smoothData;
	                  eData = endSeg.smoothData;
	                  offset = i + (i === l - 4 ? 7 - l : 5);
	                  this._controlPT = {
	                    _next: this._controlPT,
	                    i: i,
	                    j: j,
	                    l1s: sData[i + 1],
	                    l1c: eData[i + 1] - sData[i + 1],
	                    l2s: sData[offset],
	                    l2c: eData[offset] - sData[offset]
	                  };
	                  pt = this._tweenRotation(startSeg, endSeg, i + 2);

	                  this._tweenRotation(startSeg, endSeg, i, pt);

	                  this._tweenRotation(startSeg, endSeg, offset - 1, pt);

	                  i += 4;
	                } else {
	                  this._tweenRotation(startSeg, endSeg, i);
	                }
	              } else {
	                pt = this.add(startSeg, i, startSeg[i], endSeg[i]);
	                pt = this.add(startSeg, i + 1, startSeg[i + 1], endSeg[i + 1]) || pt;
	              }
	            }
	          }
	        }
	      } else {
	        pt = this.add(target, "setAttribute", target.getAttribute(p) + "", shape + "", index, targets, 0, _buildPointsFilter(shapeIndex), p);
	      }

	      if (useRotation) {
	        this.add(this._origin, "x", this._origin.x, this._eOrigin.x);
	        pt = this.add(this._origin, "y", this._origin.y, this._eOrigin.y);
	      }

	      if (pt) {
	        this._props.push("morphSVG");

	        pt.end = shape;
	        pt.endProp = p;
	      }
	    }

	    return _bonusValidated;
	  },
	  render: function render(ratio, data) {
	    var rawPath = data._rawPath,
	        controlPT = data._controlPT,
	        anchorPT = data._anchorPT,
	        rnd = data._rnd,
	        target = data._target,
	        pt = data._pt,
	        s,
	        space,
	        easeInOut,
	        segment,
	        l,
	        angle,
	        i,
	        j,
	        x,
	        y,
	        sin,
	        cos,
	        offset;

	    while (pt) {
	      pt.r(ratio, pt.d);
	      pt = pt._next;
	    }

	    if (ratio === 1 && data._apply) {
	      pt = data._pt;

	      while (pt) {
	        if (pt.end) {
	          if (data._prop) {
	            target[data._prop] = pt.end;
	          } else {
	            target.setAttribute(pt.endProp, pt.end);
	          }
	        }

	        pt = pt._next;
	      }
	    } else if (rawPath) {
	      while (anchorPT) {
	        angle = anchorPT.sa + ratio * anchorPT.ca;
	        l = anchorPT.sl + ratio * anchorPT.cl;
	        anchorPT.t[anchorPT.i] = data._origin.x + _cos$1(angle) * l;
	        anchorPT.t[anchorPT.i + 1] = data._origin.y + _sin$1(angle) * l;
	        anchorPT = anchorPT._next;
	      }

	      easeInOut = ratio < 0.5 ? 2 * ratio * ratio : (4 - 2 * ratio) * ratio - 1;

	      while (controlPT) {
	        i = controlPT.i;
	        segment = rawPath[controlPT.j];
	        offset = i + (i === segment.length - 4 ? 7 - segment.length : 5);
	        angle = _atan2(segment[offset] - segment[i + 1], segment[offset - 1] - segment[i]);
	        sin = _sin$1(angle);
	        cos = _cos$1(angle);
	        x = segment[i + 2];
	        y = segment[i + 3];
	        l = controlPT.l1s + easeInOut * controlPT.l1c;
	        segment[i] = x - cos * l;
	        segment[i + 1] = y - sin * l;
	        l = controlPT.l2s + easeInOut * controlPT.l2c;
	        segment[offset - 1] = x + cos * l;
	        segment[offset] = y + sin * l;
	        controlPT = controlPT._next;
	      }

	      target._gsRawPath = rawPath;

	      if (data._apply) {
	        s = "";
	        space = " ";

	        for (j = 0; j < rawPath.length; j++) {
	          segment = rawPath[j];
	          l = segment.length;
	          s += "M" + (segment[0] * rnd | 0) / rnd + space + (segment[1] * rnd | 0) / rnd + " C";

	          for (i = 2; i < l; i++) {
	            s += (segment[i] * rnd | 0) / rnd + space;
	          }
	        }

	        if (data._prop) {
	          target[data._prop] = s;
	        } else {
	          target.setAttribute("d", s);
	        }
	      }
	    }

	    data._render && rawPath && data._render.call(data._tween, rawPath, target);
	  },
	  kill: function kill(property) {
	    this._pt = this._rawPath = 0;
	  },
	  getRawPath: getRawPath,
	  stringToRawPath: stringToRawPath,
	  rawPathToString: rawPathToString,
	  pathFilter: _pathFilter,
	  pointsFilter: _pointsFilter,
	  getTotalSize: _getTotalSize,
	  equalizeSegmentQuantity: _equalizeSegmentQuantity,
	  convertToPath: function convertToPath$1(targets, swap) {
	    return _toArray(targets).map(function (target) {
	      return convertToPath(target, swap !== false);
	    });
	  },
	  defaultType: "linear",
	  defaultUpdateTarget: true,
	  defaultMap: "size"
	};
	_getGSAP() && gsap.registerPlugin(MorphSVGPlugin);

	exports.MorphSVGPlugin = MorphSVGPlugin;
	exports.default = MorphSVGPlugin;

	Object.defineProperty(exports, '__esModule', { value: true });

})));

    //]]>
  </script>
  <script>
    //<![CDATA[
    gsap.registerPlugin(MotionPathPlugin)
    gsap.registerPlugin(MorphSVGPlugin)
    let cowNs = {
        svg: "http://www.w3.org/2000/svg",
        xlink: "http://www.w3.org/1999/xlink",
      };

    function skullBorder() {
      var group = document.createElementNS(cowNs.svg, "g");
      document.querySelector('#hairs').appendChild(group);
      let skullOutline = MotionPathPlugin.getRawPath("#cowSkullOutline");
      MotionPathPlugin.cacheRawPathMeasurements(skullOutline);

      let hNum = 500;
      for (var i = 0; i < hNum; i++) {
        var hairArray = ["#hair1", "#hair2", "#hair3", "#hair4", "#hair5"];
        let hairTmp = gsap.utils.random(hairArray);
        var path = document.createElementNS(cowNs.svg, "path");
        path.setAttribute("class", "hair");
        path.setAttributeNS(null, "d", MotionPathPlugin.rawPathToString(MotionPathPlugin.getRawPath(hairTmp)));
        hairTmp = gsap.utils.random(hairArray);
        gsap.to(path, Math.random() + 1.5, {
          ease: "elastic.inOut",
          morphSVG: hairTmp,
          yoyo: true,
          repeat: -1,
        });
        let pos = MotionPathPlugin.getPositionOnPath(
          skullOutline,
          hNum / i,
          true
        );
        gsap.set(path, {
          x: `${pos.x-7}`,
          y: `${pos.y+18 }`,
          rotation: `${pos.angle + (Math.random() - 0.5) * 45}`,
        });
        group.appendChild(path);
      }
    };
    skullBorder();
    var tl = gsap.timeline({ repeat: -1, yoyo: true });
    tl.to("#eyeSpiral", 1, { ease: "none", morphSVG: "#eyeSpiralRev" });
    // .to("#eyeSpiral", 1, { morphSVG: eyeSpiral3 })
    // .to("#eyeSpiral", 1, { morphSVG: eyeSpiral1 });
// ]]>
  </script>
</svg>